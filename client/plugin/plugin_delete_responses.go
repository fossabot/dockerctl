// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/go-swagger/dockerctl/models"
)

// PluginDeleteReader is a Reader for the PluginDelete structure.
type PluginDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PluginDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPluginDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPluginDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPluginDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPluginDeleteOK creates a PluginDeleteOK with default headers values
func NewPluginDeleteOK() *PluginDeleteOK {
	return &PluginDeleteOK{}
}

/* PluginDeleteOK describes a response with status code 200, with default header values.

no error
*/
type PluginDeleteOK struct {
	Payload *models.Plugin
}

// IsSuccess returns true when this plugin delete o k response has a 2xx status code
func (o *PluginDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this plugin delete o k response has a 3xx status code
func (o *PluginDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this plugin delete o k response has a 4xx status code
func (o *PluginDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this plugin delete o k response has a 5xx status code
func (o *PluginDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this plugin delete o k response a status code equal to that given
func (o *PluginDeleteOK) IsCode(code int) bool {
	return code == 200
}

func (o *PluginDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{name}][%d] pluginDeleteOK  %+v", 200, o.Payload)
}

func (o *PluginDeleteOK) String() string {
	return fmt.Sprintf("[DELETE /plugins/{name}][%d] pluginDeleteOK  %+v", 200, o.Payload)
}

func (o *PluginDeleteOK) GetPayload() *models.Plugin {
	return o.Payload
}

func (o *PluginDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plugin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPluginDeleteNotFound creates a PluginDeleteNotFound with default headers values
func NewPluginDeleteNotFound() *PluginDeleteNotFound {
	return &PluginDeleteNotFound{}
}

/* PluginDeleteNotFound describes a response with status code 404, with default header values.

plugin is not installed
*/
type PluginDeleteNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this plugin delete not found response has a 2xx status code
func (o *PluginDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this plugin delete not found response has a 3xx status code
func (o *PluginDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this plugin delete not found response has a 4xx status code
func (o *PluginDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this plugin delete not found response has a 5xx status code
func (o *PluginDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this plugin delete not found response a status code equal to that given
func (o *PluginDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PluginDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{name}][%d] pluginDeleteNotFound  %+v", 404, o.Payload)
}

func (o *PluginDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /plugins/{name}][%d] pluginDeleteNotFound  %+v", 404, o.Payload)
}

func (o *PluginDeleteNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PluginDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPluginDeleteInternalServerError creates a PluginDeleteInternalServerError with default headers values
func NewPluginDeleteInternalServerError() *PluginDeleteInternalServerError {
	return &PluginDeleteInternalServerError{}
}

/* PluginDeleteInternalServerError describes a response with status code 500, with default header values.

server error
*/
type PluginDeleteInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this plugin delete internal server error response has a 2xx status code
func (o *PluginDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this plugin delete internal server error response has a 3xx status code
func (o *PluginDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this plugin delete internal server error response has a 4xx status code
func (o *PluginDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this plugin delete internal server error response has a 5xx status code
func (o *PluginDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this plugin delete internal server error response a status code equal to that given
func (o *PluginDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PluginDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /plugins/{name}][%d] pluginDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *PluginDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /plugins/{name}][%d] pluginDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *PluginDeleteInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PluginDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
