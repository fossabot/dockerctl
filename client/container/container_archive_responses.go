// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-swagger/dockerctl/models"
)

// ContainerArchiveReader is a Reader for the ContainerArchive structure.
type ContainerArchiveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContainerArchiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContainerArchiveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewContainerArchiveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewContainerArchiveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewContainerArchiveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewContainerArchiveOK creates a ContainerArchiveOK with default headers values
func NewContainerArchiveOK() *ContainerArchiveOK {
	return &ContainerArchiveOK{}
}

/* ContainerArchiveOK describes a response with status code 200, with default header values.

no error
*/
type ContainerArchiveOK struct {
}

// IsSuccess returns true when this container archive o k response has a 2xx status code
func (o *ContainerArchiveOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this container archive o k response has a 3xx status code
func (o *ContainerArchiveOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this container archive o k response has a 4xx status code
func (o *ContainerArchiveOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this container archive o k response has a 5xx status code
func (o *ContainerArchiveOK) IsServerError() bool {
	return false
}

// IsCode returns true when this container archive o k response a status code equal to that given
func (o *ContainerArchiveOK) IsCode(code int) bool {
	return code == 200
}

func (o *ContainerArchiveOK) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveOK ", 200)
}

func (o *ContainerArchiveOK) String() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveOK ", 200)
}

func (o *ContainerArchiveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewContainerArchiveBadRequest creates a ContainerArchiveBadRequest with default headers values
func NewContainerArchiveBadRequest() *ContainerArchiveBadRequest {
	return &ContainerArchiveBadRequest{}
}

/* ContainerArchiveBadRequest describes a response with status code 400, with default header values.

Bad parameter
*/
type ContainerArchiveBadRequest struct {
	Payload *ContainerArchiveBadRequestBody
}

// IsSuccess returns true when this container archive bad request response has a 2xx status code
func (o *ContainerArchiveBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this container archive bad request response has a 3xx status code
func (o *ContainerArchiveBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this container archive bad request response has a 4xx status code
func (o *ContainerArchiveBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this container archive bad request response has a 5xx status code
func (o *ContainerArchiveBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this container archive bad request response a status code equal to that given
func (o *ContainerArchiveBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ContainerArchiveBadRequest) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveBadRequest  %+v", 400, o.Payload)
}

func (o *ContainerArchiveBadRequest) String() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveBadRequest  %+v", 400, o.Payload)
}

func (o *ContainerArchiveBadRequest) GetPayload() *ContainerArchiveBadRequestBody {
	return o.Payload
}

func (o *ContainerArchiveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ContainerArchiveBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerArchiveNotFound creates a ContainerArchiveNotFound with default headers values
func NewContainerArchiveNotFound() *ContainerArchiveNotFound {
	return &ContainerArchiveNotFound{}
}

/* ContainerArchiveNotFound describes a response with status code 404, with default header values.

Container or path does not exist
*/
type ContainerArchiveNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this container archive not found response has a 2xx status code
func (o *ContainerArchiveNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this container archive not found response has a 3xx status code
func (o *ContainerArchiveNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this container archive not found response has a 4xx status code
func (o *ContainerArchiveNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this container archive not found response has a 5xx status code
func (o *ContainerArchiveNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this container archive not found response a status code equal to that given
func (o *ContainerArchiveNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ContainerArchiveNotFound) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveNotFound  %+v", 404, o.Payload)
}

func (o *ContainerArchiveNotFound) String() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveNotFound  %+v", 404, o.Payload)
}

func (o *ContainerArchiveNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ContainerArchiveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerArchiveInternalServerError creates a ContainerArchiveInternalServerError with default headers values
func NewContainerArchiveInternalServerError() *ContainerArchiveInternalServerError {
	return &ContainerArchiveInternalServerError{}
}

/* ContainerArchiveInternalServerError describes a response with status code 500, with default header values.

server error
*/
type ContainerArchiveInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this container archive internal server error response has a 2xx status code
func (o *ContainerArchiveInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this container archive internal server error response has a 3xx status code
func (o *ContainerArchiveInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this container archive internal server error response has a 4xx status code
func (o *ContainerArchiveInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this container archive internal server error response has a 5xx status code
func (o *ContainerArchiveInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this container archive internal server error response a status code equal to that given
func (o *ContainerArchiveInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ContainerArchiveInternalServerError) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveInternalServerError  %+v", 500, o.Payload)
}

func (o *ContainerArchiveInternalServerError) String() string {
	return fmt.Sprintf("[GET /containers/{id}/archive][%d] containerArchiveInternalServerError  %+v", 500, o.Payload)
}

func (o *ContainerArchiveInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ContainerArchiveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ContainerArchiveBadRequestBody container archive bad request body
swagger:model ContainerArchiveBadRequestBody
*/
type ContainerArchiveBadRequestBody struct {
	models.ErrorResponse

	// The error message. Either "must specify path parameter" (path cannot be empty) or "not a directory" (path was asserted to be a directory but exists as a file).
	Message string `json:"message,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ContainerArchiveBadRequestBody) UnmarshalJSON(raw []byte) error {
	// ContainerArchiveBadRequestBodyAO0
	var containerArchiveBadRequestBodyAO0 models.ErrorResponse
	if err := swag.ReadJSON(raw, &containerArchiveBadRequestBodyAO0); err != nil {
		return err
	}
	o.ErrorResponse = containerArchiveBadRequestBodyAO0

	// ContainerArchiveBadRequestBodyAO1
	var dataContainerArchiveBadRequestBodyAO1 struct {
		Message string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataContainerArchiveBadRequestBodyAO1); err != nil {
		return err
	}

	o.Message = dataContainerArchiveBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ContainerArchiveBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	containerArchiveBadRequestBodyAO0, err := swag.WriteJSON(o.ErrorResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, containerArchiveBadRequestBodyAO0)
	var dataContainerArchiveBadRequestBodyAO1 struct {
		Message string `json:"message,omitempty"`
	}

	dataContainerArchiveBadRequestBodyAO1.Message = o.Message

	jsonDataContainerArchiveBadRequestBodyAO1, errContainerArchiveBadRequestBodyAO1 := swag.WriteJSON(dataContainerArchiveBadRequestBodyAO1)
	if errContainerArchiveBadRequestBodyAO1 != nil {
		return nil, errContainerArchiveBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataContainerArchiveBadRequestBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this container archive bad request body
func (o *ContainerArchiveBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this container archive bad request body based on the context it is used
func (o *ContainerArchiveBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ContainerArchiveBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerArchiveBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ContainerArchiveBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
