// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/go-swagger/dockerctl/models"
)

// NodeUpdateReader is a Reader for the NodeUpdate structure.
type NodeUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NodeUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNodeUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNodeUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNodeUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNodeUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewNodeUpdateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewNodeUpdateOK creates a NodeUpdateOK with default headers values
func NewNodeUpdateOK() *NodeUpdateOK {
	return &NodeUpdateOK{}
}

/* NodeUpdateOK describes a response with status code 200, with default header values.

no error
*/
type NodeUpdateOK struct {
}

// IsSuccess returns true when this node update o k response has a 2xx status code
func (o *NodeUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this node update o k response has a 3xx status code
func (o *NodeUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node update o k response has a 4xx status code
func (o *NodeUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this node update o k response has a 5xx status code
func (o *NodeUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this node update o k response a status code equal to that given
func (o *NodeUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *NodeUpdateOK) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateOK ", 200)
}

func (o *NodeUpdateOK) String() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateOK ", 200)
}

func (o *NodeUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNodeUpdateBadRequest creates a NodeUpdateBadRequest with default headers values
func NewNodeUpdateBadRequest() *NodeUpdateBadRequest {
	return &NodeUpdateBadRequest{}
}

/* NodeUpdateBadRequest describes a response with status code 400, with default header values.

bad parameter
*/
type NodeUpdateBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node update bad request response has a 2xx status code
func (o *NodeUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node update bad request response has a 3xx status code
func (o *NodeUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node update bad request response has a 4xx status code
func (o *NodeUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this node update bad request response has a 5xx status code
func (o *NodeUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this node update bad request response a status code equal to that given
func (o *NodeUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *NodeUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *NodeUpdateBadRequest) String() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *NodeUpdateBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpdateNotFound creates a NodeUpdateNotFound with default headers values
func NewNodeUpdateNotFound() *NodeUpdateNotFound {
	return &NodeUpdateNotFound{}
}

/* NodeUpdateNotFound describes a response with status code 404, with default header values.

no such node
*/
type NodeUpdateNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node update not found response has a 2xx status code
func (o *NodeUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node update not found response has a 3xx status code
func (o *NodeUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node update not found response has a 4xx status code
func (o *NodeUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this node update not found response has a 5xx status code
func (o *NodeUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this node update not found response a status code equal to that given
func (o *NodeUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *NodeUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateNotFound  %+v", 404, o.Payload)
}

func (o *NodeUpdateNotFound) String() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateNotFound  %+v", 404, o.Payload)
}

func (o *NodeUpdateNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpdateInternalServerError creates a NodeUpdateInternalServerError with default headers values
func NewNodeUpdateInternalServerError() *NodeUpdateInternalServerError {
	return &NodeUpdateInternalServerError{}
}

/* NodeUpdateInternalServerError describes a response with status code 500, with default header values.

server error
*/
type NodeUpdateInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node update internal server error response has a 2xx status code
func (o *NodeUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node update internal server error response has a 3xx status code
func (o *NodeUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node update internal server error response has a 4xx status code
func (o *NodeUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this node update internal server error response has a 5xx status code
func (o *NodeUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this node update internal server error response a status code equal to that given
func (o *NodeUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *NodeUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *NodeUpdateInternalServerError) String() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *NodeUpdateInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpdateServiceUnavailable creates a NodeUpdateServiceUnavailable with default headers values
func NewNodeUpdateServiceUnavailable() *NodeUpdateServiceUnavailable {
	return &NodeUpdateServiceUnavailable{}
}

/* NodeUpdateServiceUnavailable describes a response with status code 503, with default header values.

node is not part of a swarm
*/
type NodeUpdateServiceUnavailable struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node update service unavailable response has a 2xx status code
func (o *NodeUpdateServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node update service unavailable response has a 3xx status code
func (o *NodeUpdateServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node update service unavailable response has a 4xx status code
func (o *NodeUpdateServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this node update service unavailable response has a 5xx status code
func (o *NodeUpdateServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this node update service unavailable response a status code equal to that given
func (o *NodeUpdateServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *NodeUpdateServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *NodeUpdateServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *NodeUpdateServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpdateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
