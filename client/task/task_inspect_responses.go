// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/go-swagger/dockerctl/models"
)

// TaskInspectReader is a Reader for the TaskInspect structure.
type TaskInspectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TaskInspectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTaskInspectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewTaskInspectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTaskInspectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewTaskInspectServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTaskInspectOK creates a TaskInspectOK with default headers values
func NewTaskInspectOK() *TaskInspectOK {
	return &TaskInspectOK{}
}

/* TaskInspectOK describes a response with status code 200, with default header values.

no error
*/
type TaskInspectOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this task inspect o k response has a 2xx status code
func (o *TaskInspectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this task inspect o k response has a 3xx status code
func (o *TaskInspectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this task inspect o k response has a 4xx status code
func (o *TaskInspectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this task inspect o k response has a 5xx status code
func (o *TaskInspectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this task inspect o k response a status code equal to that given
func (o *TaskInspectOK) IsCode(code int) bool {
	return code == 200
}

func (o *TaskInspectOK) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectOK  %+v", 200, o.Payload)
}

func (o *TaskInspectOK) String() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectOK  %+v", 200, o.Payload)
}

func (o *TaskInspectOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *TaskInspectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskInspectNotFound creates a TaskInspectNotFound with default headers values
func NewTaskInspectNotFound() *TaskInspectNotFound {
	return &TaskInspectNotFound{}
}

/* TaskInspectNotFound describes a response with status code 404, with default header values.

no such task
*/
type TaskInspectNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this task inspect not found response has a 2xx status code
func (o *TaskInspectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this task inspect not found response has a 3xx status code
func (o *TaskInspectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this task inspect not found response has a 4xx status code
func (o *TaskInspectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this task inspect not found response has a 5xx status code
func (o *TaskInspectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this task inspect not found response a status code equal to that given
func (o *TaskInspectNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *TaskInspectNotFound) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectNotFound  %+v", 404, o.Payload)
}

func (o *TaskInspectNotFound) String() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectNotFound  %+v", 404, o.Payload)
}

func (o *TaskInspectNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *TaskInspectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskInspectInternalServerError creates a TaskInspectInternalServerError with default headers values
func NewTaskInspectInternalServerError() *TaskInspectInternalServerError {
	return &TaskInspectInternalServerError{}
}

/* TaskInspectInternalServerError describes a response with status code 500, with default header values.

server error
*/
type TaskInspectInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this task inspect internal server error response has a 2xx status code
func (o *TaskInspectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this task inspect internal server error response has a 3xx status code
func (o *TaskInspectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this task inspect internal server error response has a 4xx status code
func (o *TaskInspectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this task inspect internal server error response has a 5xx status code
func (o *TaskInspectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this task inspect internal server error response a status code equal to that given
func (o *TaskInspectInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *TaskInspectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectInternalServerError  %+v", 500, o.Payload)
}

func (o *TaskInspectInternalServerError) String() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectInternalServerError  %+v", 500, o.Payload)
}

func (o *TaskInspectInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *TaskInspectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskInspectServiceUnavailable creates a TaskInspectServiceUnavailable with default headers values
func NewTaskInspectServiceUnavailable() *TaskInspectServiceUnavailable {
	return &TaskInspectServiceUnavailable{}
}

/* TaskInspectServiceUnavailable describes a response with status code 503, with default header values.

node is not part of a swarm
*/
type TaskInspectServiceUnavailable struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this task inspect service unavailable response has a 2xx status code
func (o *TaskInspectServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this task inspect service unavailable response has a 3xx status code
func (o *TaskInspectServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this task inspect service unavailable response has a 4xx status code
func (o *TaskInspectServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this task inspect service unavailable response has a 5xx status code
func (o *TaskInspectServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this task inspect service unavailable response a status code equal to that given
func (o *TaskInspectServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *TaskInspectServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *TaskInspectServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *TaskInspectServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *TaskInspectServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
