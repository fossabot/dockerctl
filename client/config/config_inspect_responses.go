// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/go-swagger/dockerctl/models"
)

// ConfigInspectReader is a Reader for the ConfigInspect structure.
type ConfigInspectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfigInspectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConfigInspectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewConfigInspectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfigInspectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfigInspectServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfigInspectOK creates a ConfigInspectOK with default headers values
func NewConfigInspectOK() *ConfigInspectOK {
	return &ConfigInspectOK{}
}

/* ConfigInspectOK describes a response with status code 200, with default header values.

no error
*/
type ConfigInspectOK struct {
	Payload *models.Config
}

// IsSuccess returns true when this config inspect o k response has a 2xx status code
func (o *ConfigInspectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this config inspect o k response has a 3xx status code
func (o *ConfigInspectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config inspect o k response has a 4xx status code
func (o *ConfigInspectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this config inspect o k response has a 5xx status code
func (o *ConfigInspectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this config inspect o k response a status code equal to that given
func (o *ConfigInspectOK) IsCode(code int) bool {
	return code == 200
}

func (o *ConfigInspectOK) Error() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectOK  %+v", 200, o.Payload)
}

func (o *ConfigInspectOK) String() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectOK  %+v", 200, o.Payload)
}

func (o *ConfigInspectOK) GetPayload() *models.Config {
	return o.Payload
}

func (o *ConfigInspectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Config)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigInspectNotFound creates a ConfigInspectNotFound with default headers values
func NewConfigInspectNotFound() *ConfigInspectNotFound {
	return &ConfigInspectNotFound{}
}

/* ConfigInspectNotFound describes a response with status code 404, with default header values.

config not found
*/
type ConfigInspectNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this config inspect not found response has a 2xx status code
func (o *ConfigInspectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config inspect not found response has a 3xx status code
func (o *ConfigInspectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config inspect not found response has a 4xx status code
func (o *ConfigInspectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this config inspect not found response has a 5xx status code
func (o *ConfigInspectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this config inspect not found response a status code equal to that given
func (o *ConfigInspectNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ConfigInspectNotFound) Error() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectNotFound  %+v", 404, o.Payload)
}

func (o *ConfigInspectNotFound) String() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectNotFound  %+v", 404, o.Payload)
}

func (o *ConfigInspectNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ConfigInspectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigInspectInternalServerError creates a ConfigInspectInternalServerError with default headers values
func NewConfigInspectInternalServerError() *ConfigInspectInternalServerError {
	return &ConfigInspectInternalServerError{}
}

/* ConfigInspectInternalServerError describes a response with status code 500, with default header values.

server error
*/
type ConfigInspectInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this config inspect internal server error response has a 2xx status code
func (o *ConfigInspectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config inspect internal server error response has a 3xx status code
func (o *ConfigInspectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config inspect internal server error response has a 4xx status code
func (o *ConfigInspectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this config inspect internal server error response has a 5xx status code
func (o *ConfigInspectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this config inspect internal server error response a status code equal to that given
func (o *ConfigInspectInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ConfigInspectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfigInspectInternalServerError) String() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfigInspectInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ConfigInspectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigInspectServiceUnavailable creates a ConfigInspectServiceUnavailable with default headers values
func NewConfigInspectServiceUnavailable() *ConfigInspectServiceUnavailable {
	return &ConfigInspectServiceUnavailable{}
}

/* ConfigInspectServiceUnavailable describes a response with status code 503, with default header values.

node is not part of a swarm
*/
type ConfigInspectServiceUnavailable struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this config inspect service unavailable response has a 2xx status code
func (o *ConfigInspectServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config inspect service unavailable response has a 3xx status code
func (o *ConfigInspectServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config inspect service unavailable response has a 4xx status code
func (o *ConfigInspectServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this config inspect service unavailable response has a 5xx status code
func (o *ConfigInspectServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this config inspect service unavailable response a status code equal to that given
func (o *ConfigInspectServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ConfigInspectServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfigInspectServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfigInspectServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ConfigInspectServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
