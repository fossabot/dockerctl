// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ImageDeleteResponseItem

// register flags to command
func registerModelImageDeleteResponseItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerImageDeleteResponseItemDeleted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageDeleteResponseItemUntagged(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerImageDeleteResponseItemDeleted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DeletedDescription := `The image ID of an image that was deleted`

	var DeletedFlagName string
	if cmdPrefix == "" {
		DeletedFlagName = "Deleted"
	} else {
		DeletedFlagName = fmt.Sprintf("%v.Deleted", cmdPrefix)
	}

	var DeletedFlagDefault string

	_ = cmd.PersistentFlags().String(DeletedFlagName, DeletedFlagDefault, DeletedDescription)

	return nil
}

func registerImageDeleteResponseItemUntagged(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UntaggedDescription := `The image ID of an image that was untagged`

	var UntaggedFlagName string
	if cmdPrefix == "" {
		UntaggedFlagName = "Untagged"
	} else {
		UntaggedFlagName = fmt.Sprintf("%v.Untagged", cmdPrefix)
	}

	var UntaggedFlagDefault string

	_ = cmd.PersistentFlags().String(UntaggedFlagName, UntaggedFlagDefault, UntaggedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelImageDeleteResponseItemFlags(depth int, m *models.ImageDeleteResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DeletedAdded := retrieveImageDeleteResponseItemDeletedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DeletedAdded

	err, UntaggedAdded := retrieveImageDeleteResponseItemUntaggedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UntaggedAdded

	return nil, retAdded
}

func retrieveImageDeleteResponseItemDeletedFlags(depth int, m *models.ImageDeleteResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DeletedFlagName := fmt.Sprintf("%v.Deleted", cmdPrefix)
	if cmd.Flags().Changed(DeletedFlagName) {

		var DeletedFlagName string
		if cmdPrefix == "" {
			DeletedFlagName = "Deleted"
		} else {
			DeletedFlagName = fmt.Sprintf("%v.Deleted", cmdPrefix)
		}

		DeletedFlagValue, err := cmd.Flags().GetString(DeletedFlagName)
		if err != nil {
			return err, false
		}
		m.Deleted = DeletedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageDeleteResponseItemUntaggedFlags(depth int, m *models.ImageDeleteResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UntaggedFlagName := fmt.Sprintf("%v.Untagged", cmdPrefix)
	if cmd.Flags().Changed(UntaggedFlagName) {

		var UntaggedFlagName string
		if cmdPrefix == "" {
			UntaggedFlagName = "Untagged"
		} else {
			UntaggedFlagName = fmt.Sprintf("%v.Untagged", cmdPrefix)
		}

		UntaggedFlagValue, err := cmd.Flags().GetString(UntaggedFlagName)
		if err != nil {
			return err, false
		}
		m.Untagged = UntaggedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
