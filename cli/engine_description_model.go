// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for EngineDescription

// register flags to command
func registerModelEngineDescriptionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEngineDescriptionEngineVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineDescriptionLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineDescriptionPlugins(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEngineDescriptionEngineVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	EngineVersionDescription := ``

	var EngineVersionFlagName string
	if cmdPrefix == "" {
		EngineVersionFlagName = "EngineVersion"
	} else {
		EngineVersionFlagName = fmt.Sprintf("%v.EngineVersion", cmdPrefix)
	}

	var EngineVersionFlagDefault string

	_ = cmd.PersistentFlags().String(EngineVersionFlagName, EngineVersionFlagDefault, EngineVersionDescription)

	return nil
}

func registerEngineDescriptionLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerEngineDescriptionPlugins(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Plugins []*EngineDescriptionPluginsItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEngineDescriptionFlags(depth int, m *models.EngineDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EngineVersionAdded := retrieveEngineDescriptionEngineVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EngineVersionAdded

	err, LabelsAdded := retrieveEngineDescriptionLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, PluginsAdded := retrieveEngineDescriptionPluginsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PluginsAdded

	return nil, retAdded
}

func retrieveEngineDescriptionEngineVersionFlags(depth int, m *models.EngineDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EngineVersionFlagName := fmt.Sprintf("%v.EngineVersion", cmdPrefix)
	if cmd.Flags().Changed(EngineVersionFlagName) {

		var EngineVersionFlagName string
		if cmdPrefix == "" {
			EngineVersionFlagName = "EngineVersion"
		} else {
			EngineVersionFlagName = fmt.Sprintf("%v.EngineVersion", cmdPrefix)
		}

		EngineVersionFlagValue, err := cmd.Flags().GetString(EngineVersionFlagName)
		if err != nil {
			return err, false
		}
		m.EngineVersion = EngineVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEngineDescriptionLabelsFlags(depth int, m *models.EngineDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEngineDescriptionPluginsFlags(depth int, m *models.EngineDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PluginsFlagName := fmt.Sprintf("%v.Plugins", cmdPrefix)
	if cmd.Flags().Changed(PluginsFlagName) {
		// warning: Plugins array type []*EngineDescriptionPluginsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for EngineDescriptionPluginsItems0

// register flags to command
func registerModelEngineDescriptionPluginsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEngineDescriptionPluginsItems0Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineDescriptionPluginsItems0Type(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEngineDescriptionPluginsItems0Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := ``

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerEngineDescriptionPluginsItems0Type(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := ``

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "Type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEngineDescriptionPluginsItems0Flags(depth int, m *models.EngineDescriptionPluginsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveEngineDescriptionPluginsItems0NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, TypeAdded := retrieveEngineDescriptionPluginsItems0TypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrieveEngineDescriptionPluginsItems0NameFlags(depth int, m *models.EngineDescriptionPluginsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEngineDescriptionPluginsItems0TypeFlags(depth int, m *models.EngineDescriptionPluginsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "Type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
