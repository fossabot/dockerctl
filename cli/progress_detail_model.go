// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ProgressDetail

// register flags to command
func registerModelProgressDetailFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProgressDetailCurrent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProgressDetailTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProgressDetailCurrent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CurrentDescription := ``

	var CurrentFlagName string
	if cmdPrefix == "" {
		CurrentFlagName = "current"
	} else {
		CurrentFlagName = fmt.Sprintf("%v.current", cmdPrefix)
	}

	var CurrentFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CurrentFlagName, CurrentFlagDefault, CurrentDescription)

	return nil
}

func registerProgressDetailTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TotalDescription := ``

	var TotalFlagName string
	if cmdPrefix == "" {
		TotalFlagName = "total"
	} else {
		TotalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var TotalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(TotalFlagName, TotalFlagDefault, TotalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProgressDetailFlags(depth int, m *models.ProgressDetail, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CurrentAdded := retrieveProgressDetailCurrentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CurrentAdded

	err, TotalAdded := retrieveProgressDetailTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	return nil, retAdded
}

func retrieveProgressDetailCurrentFlags(depth int, m *models.ProgressDetail, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CurrentFlagName := fmt.Sprintf("%v.current", cmdPrefix)
	if cmd.Flags().Changed(CurrentFlagName) {

		var CurrentFlagName string
		if cmdPrefix == "" {
			CurrentFlagName = "current"
		} else {
			CurrentFlagName = fmt.Sprintf("%v.current", cmdPrefix)
		}

		CurrentFlagValue, err := cmd.Flags().GetInt64(CurrentFlagName)
		if err != nil {
			return err, false
		}
		m.Current = CurrentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProgressDetailTotalFlags(depth int, m *models.ProgressDetail, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TotalFlagName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(TotalFlagName) {

		var TotalFlagName string
		if cmdPrefix == "" {
			TotalFlagName = "total"
		} else {
			TotalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		TotalFlagValue, err := cmd.Flags().GetInt64(TotalFlagName)
		if err != nil {
			return err, false
		}
		m.Total = TotalFlagValue

		retAdded = true
	}

	return nil, retAdded
}
