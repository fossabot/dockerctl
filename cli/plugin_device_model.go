// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for PluginDevice

// register flags to command
func registerModelPluginDeviceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginDeviceDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginDeviceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginDevicePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginDeviceSettable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginDeviceDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := `Required. `

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "Description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerPluginDeviceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Required. `

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerPluginDevicePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PathDescription := `Required. `

	var PathFlagName string
	if cmdPrefix == "" {
		PathFlagName = "Path"
	} else {
		PathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
	}

	var PathFlagDefault string

	_ = cmd.PersistentFlags().String(PathFlagName, PathFlagDefault, PathDescription)

	return nil
}

func registerPluginDeviceSettable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Settable []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginDeviceFlags(depth int, m *models.PluginDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptionAdded := retrievePluginDeviceDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, NameAdded := retrievePluginDeviceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, PathAdded := retrievePluginDevicePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PathAdded

	err, SettableAdded := retrievePluginDeviceSettableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SettableAdded

	return nil, retAdded
}

func retrievePluginDeviceDescriptionFlags(depth int, m *models.PluginDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "Description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginDeviceNameFlags(depth int, m *models.PluginDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginDevicePathFlags(depth int, m *models.PluginDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PathFlagName := fmt.Sprintf("%v.Path", cmdPrefix)
	if cmd.Flags().Changed(PathFlagName) {

		var PathFlagName string
		if cmdPrefix == "" {
			PathFlagName = "Path"
		} else {
			PathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
		}

		PathFlagValue, err := cmd.Flags().GetString(PathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = &PathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginDeviceSettableFlags(depth int, m *models.PluginDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SettableFlagName := fmt.Sprintf("%v.Settable", cmdPrefix)
	if cmd.Flags().Changed(SettableFlagName) {
		// warning: Settable array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
