// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/image"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationImageImageSearchCmd returns a cmd to handle operation imageSearch
func makeOperationImageImageSearchCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ImageSearch",
		Short: `Search for an image on Docker Hub.`,
		RunE:  runOperationImageImageSearch,
	}

	if err := registerOperationImageImageSearchParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationImageImageSearch uses cmd flags to call endpoint api
func runOperationImageImageSearch(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := image.NewImageSearchParams()
	if err, _ := retrieveOperationImageImageSearchFiltersFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageSearchLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageSearchTermFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationImageImageSearchResult(appCli.Image.ImageSearch(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationImageImageSearchParamFlags registers all flags needed to fill params
func registerOperationImageImageSearchParamFlags(cmd *cobra.Command) error {
	if err := registerOperationImageImageSearchFiltersParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageSearchLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageSearchTermParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationImageImageSearchFiltersParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	FiltersDescription := `A JSON encoded value of the filters (a ` + "`" + `map[string][]string` + "`" + `) to process on the images list. Available filters:

- ` + "`" + `is-automated=(true|false)` + "`" + `
- ` + "`" + `is-official=(true|false)` + "`" + `
- ` + "`" + `stars=<number>` + "`" + ` Matches images that has at least 'number' stars.
`

	var FiltersFlagName string
	if cmdPrefix == "" {
		FiltersFlagName = "filters"
	} else {
		FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
	}

	var FiltersFlagDefault string

	_ = cmd.PersistentFlags().String(FiltersFlagName, FiltersFlagDefault, FiltersDescription)

	return nil
}
func registerOperationImageImageSearchLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	LimitDescription := `Maximum number of results to return`

	var LimitFlagName string
	if cmdPrefix == "" {
		LimitFlagName = "limit"
	} else {
		LimitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var LimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(LimitFlagName, LimitFlagDefault, LimitDescription)

	return nil
}
func registerOperationImageImageSearchTermParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	TermDescription := `Required. Term to search`

	var TermFlagName string
	if cmdPrefix == "" {
		TermFlagName = "term"
	} else {
		TermFlagName = fmt.Sprintf("%v.term", cmdPrefix)
	}

	var TermFlagDefault string

	_ = cmd.PersistentFlags().String(TermFlagName, TermFlagDefault, TermDescription)

	return nil
}

func retrieveOperationImageImageSearchFiltersFlag(m *image.ImageSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filters") {

		var FiltersFlagName string
		if cmdPrefix == "" {
			FiltersFlagName = "filters"
		} else {
			FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
		}

		FiltersFlagValue, err := cmd.Flags().GetString(FiltersFlagName)
		if err != nil {
			return err, false
		}
		m.Filters = &FiltersFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageSearchLimitFlag(m *image.ImageSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var LimitFlagName string
		if cmdPrefix == "" {
			LimitFlagName = "limit"
		} else {
			LimitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		LimitFlagValue, err := cmd.Flags().GetInt64(LimitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = &LimitFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageSearchTermFlag(m *image.ImageSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("term") {

		var TermFlagName string
		if cmdPrefix == "" {
			TermFlagName = "term"
		} else {
			TermFlagName = fmt.Sprintf("%v.term", cmdPrefix)
		}

		TermFlagValue, err := cmd.Flags().GetString(TermFlagName)
		if err != nil {
			return err, false
		}
		m.Term = TermFlagValue

	}
	return nil, retAdded
}

// parseOperationImageImageSearchResult parses request result and return the string content
func parseOperationImageImageSearchResult(resp0 *image.ImageSearchOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*image.ImageSearchOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*image.ImageSearchInternalServerError)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelImageSearchOKBodyItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerImageSearchOKBodyItems0Description(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSearchOKBodyItems0IsAutomated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSearchOKBodyItems0IsOfficial(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSearchOKBodyItems0Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSearchOKBodyItems0StarCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerImageSearchOKBodyItems0Description(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := ``

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerImageSearchOKBodyItems0IsAutomated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IsAutomatedDescription := ``

	var IsAutomatedFlagName string
	if cmdPrefix == "" {
		IsAutomatedFlagName = "is_automated"
	} else {
		IsAutomatedFlagName = fmt.Sprintf("%v.is_automated", cmdPrefix)
	}

	var IsAutomatedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(IsAutomatedFlagName, IsAutomatedFlagDefault, IsAutomatedDescription)

	return nil
}

func registerImageSearchOKBodyItems0IsOfficial(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IsOfficialDescription := ``

	var IsOfficialFlagName string
	if cmdPrefix == "" {
		IsOfficialFlagName = "is_official"
	} else {
		IsOfficialFlagName = fmt.Sprintf("%v.is_official", cmdPrefix)
	}

	var IsOfficialFlagDefault bool

	_ = cmd.PersistentFlags().Bool(IsOfficialFlagName, IsOfficialFlagDefault, IsOfficialDescription)

	return nil
}

func registerImageSearchOKBodyItems0Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := ``

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "name"
	} else {
		NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerImageSearchOKBodyItems0StarCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StarCountDescription := ``

	var StarCountFlagName string
	if cmdPrefix == "" {
		StarCountFlagName = "star_count"
	} else {
		StarCountFlagName = fmt.Sprintf("%v.star_count", cmdPrefix)
	}

	var StarCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(StarCountFlagName, StarCountFlagDefault, StarCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelImageSearchOKBodyItems0Flags(depth int, m *image.ImageSearchOKBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptionAdded := retrieveImageSearchOKBodyItems0DescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, IsAutomatedAdded := retrieveImageSearchOKBodyItems0IsAutomatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsAutomatedAdded

	err, IsOfficialAdded := retrieveImageSearchOKBodyItems0IsOfficialFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsOfficialAdded

	err, NameAdded := retrieveImageSearchOKBodyItems0NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, StarCountAdded := retrieveImageSearchOKBodyItems0StarCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StarCountAdded

	return nil, retAdded
}

func retrieveImageSearchOKBodyItems0DescriptionFlags(depth int, m *image.ImageSearchOKBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSearchOKBodyItems0IsAutomatedFlags(depth int, m *image.ImageSearchOKBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IsAutomatedFlagName := fmt.Sprintf("%v.is_automated", cmdPrefix)
	if cmd.Flags().Changed(IsAutomatedFlagName) {

		var IsAutomatedFlagName string
		if cmdPrefix == "" {
			IsAutomatedFlagName = "is_automated"
		} else {
			IsAutomatedFlagName = fmt.Sprintf("%v.is_automated", cmdPrefix)
		}

		IsAutomatedFlagValue, err := cmd.Flags().GetBool(IsAutomatedFlagName)
		if err != nil {
			return err, false
		}
		m.IsAutomated = IsAutomatedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSearchOKBodyItems0IsOfficialFlags(depth int, m *image.ImageSearchOKBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IsOfficialFlagName := fmt.Sprintf("%v.is_official", cmdPrefix)
	if cmd.Flags().Changed(IsOfficialFlagName) {

		var IsOfficialFlagName string
		if cmdPrefix == "" {
			IsOfficialFlagName = "is_official"
		} else {
			IsOfficialFlagName = fmt.Sprintf("%v.is_official", cmdPrefix)
		}

		IsOfficialFlagValue, err := cmd.Flags().GetBool(IsOfficialFlagName)
		if err != nil {
			return err, false
		}
		m.IsOfficial = IsOfficialFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSearchOKBodyItems0NameFlags(depth int, m *image.ImageSearchOKBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "name"
		} else {
			NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSearchOKBodyItems0StarCountFlags(depth int, m *image.ImageSearchOKBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StarCountFlagName := fmt.Sprintf("%v.star_count", cmdPrefix)
	if cmd.Flags().Changed(StarCountFlagName) {

		var StarCountFlagName string
		if cmdPrefix == "" {
			StarCountFlagName = "star_count"
		} else {
			StarCountFlagName = fmt.Sprintf("%v.star_count", cmdPrefix)
		}

		StarCountFlagValue, err := cmd.Flags().GetInt64(StarCountFlagName)
		if err != nil {
			return err, false
		}
		m.StarCount = StarCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
