// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerAttachCmd returns a cmd to handle operation containerAttach
func makeOperationContainerContainerAttachCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ContainerAttach",
		Short: `Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.

Either the ` + "`" + `stream` + "`" + ` or ` + "`" + `logs` + "`" + ` parameter must be ` + "`" + `true` + "`" + ` for this endpoint to do anything.

See [the documentation for the ` + "`" + `docker attach` + "`" + ` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.

### Hijacking

This endpoint hijacks the HTTP connection to transport ` + "`" + `stdin` + "`" + `, ` + "`" + `stdout` + "`" + `, and ` + "`" + `stderr` + "`" + ` on the same socket.

This is the response from the daemon for an attach request:

` + "`" + `` + "`" + `` + "`" + `
HTTP/1.1 200 OK
Content-Type: application/vnd.docker.raw-stream

[STREAM]
` + "`" + `` + "`" + `` + "`" + `

After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.

To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.

For example, the client sends this request to upgrade the connection:

` + "`" + `` + "`" + `` + "`" + `
POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
Upgrade: tcp
Connection: Upgrade
` + "`" + `` + "`" + `` + "`" + `

The Docker daemon will respond with a ` + "`" + `101 UPGRADED` + "`" + ` response, and will similarly follow with the raw stream:

` + "`" + `` + "`" + `` + "`" + `
HTTP/1.1 101 UPGRADED
Content-Type: application/vnd.docker.raw-stream
Connection: Upgrade
Upgrade: tcp

[STREAM]
` + "`" + `` + "`" + `` + "`" + `

### Stream format

When the TTY setting is disabled in [` + "`" + `POST /containers/create` + "`" + `](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out ` + "`" + `stdout` + "`" + ` and ` + "`" + `stderr` + "`" + `. The stream consists of a series of frames, each containing a header and a payload.

The header contains the information which the stream writes (` + "`" + `stdout` + "`" + ` or ` + "`" + `stderr` + "`" + `). It also contains the size of the associated frame encoded in the last four bytes (` + "`" + `uint32` + "`" + `).

It is encoded on the first eight bytes like this:

` + "`" + `` + "`" + `` + "`" + `go
header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
` + "`" + `` + "`" + `` + "`" + `

` + "`" + `STREAM_TYPE` + "`" + ` can be:

- 0: ` + "`" + `stdin` + "`" + ` (is written on ` + "`" + `stdout` + "`" + `)
- 1: ` + "`" + `stdout` + "`" + `
- 2: ` + "`" + `stderr` + "`" + `

` + "`" + `SIZE1, SIZE2, SIZE3, SIZE4` + "`" + ` are the four bytes of the ` + "`" + `uint32` + "`" + ` size encoded as big endian.

Following the header is the payload, which is the specified number of bytes of ` + "`" + `STREAM_TYPE` + "`" + `.

The simplest way to implement this protocol is the following:

1. Read 8 bytes.
2. Choose ` + "`" + `stdout` + "`" + ` or ` + "`" + `stderr` + "`" + ` depending on the first byte.
3. Extract the frame size from the last four bytes.
4. Read the extracted size and output it on the correct output.
5. Goto 1.

### Stream format when using a TTY

When the TTY setting is enabled in [` + "`" + `POST /containers/create` + "`" + `](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's ` + "`" + `stdin` + "`" + `.
`,
		RunE: runOperationContainerContainerAttach,
	}

	if err := registerOperationContainerContainerAttachParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerAttach uses cmd flags to call endpoint api
func runOperationContainerContainerAttach(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerAttachParams()
	if err, _ := retrieveOperationContainerContainerAttachDetachKeysFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachLogsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachStderrFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachStdinFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachStdoutFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachStreamFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationContainerContainerAttachResult(appCli.Container.ContainerAttach(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationContainerContainerAttachParamFlags registers all flags needed to fill params
func registerOperationContainerContainerAttachParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerAttachDetachKeysParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachLogsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachStderrParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachStdinParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachStdoutParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachStreamParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerAttachDetachKeysParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	DetachKeysDescription := `Override the key sequence for detaching a container.Format is a single character ` + "`" + `[a-Z]` + "`" + ` or ` + "`" + `ctrl-<value>` + "`" + ` where ` + "`" + `<value>` + "`" + ` is one of: ` + "`" + `a-z` + "`" + `, ` + "`" + `@` + "`" + `, ` + "`" + `^` + "`" + `, ` + "`" + `[` + "`" + `, ` + "`" + `,` + "`" + ` or ` + "`" + `_` + "`" + `.`

	var DetachKeysFlagName string
	if cmdPrefix == "" {
		DetachKeysFlagName = "detachKeys"
	} else {
		DetachKeysFlagName = fmt.Sprintf("%v.detachKeys", cmdPrefix)
	}

	var DetachKeysFlagDefault string

	_ = cmd.PersistentFlags().String(DetachKeysFlagName, DetachKeysFlagDefault, DetachKeysDescription)

	return nil
}
func registerOperationContainerContainerAttachIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	IDDescription := `Required. ID or name of the container`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}
func registerOperationContainerContainerAttachLogsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	LogsDescription := `Replay previous logs from the container.

This is useful for attaching to a container that has started and you want to output everything since the container started.

If ` + "`" + `stream` + "`" + ` is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.
`

	var LogsFlagName string
	if cmdPrefix == "" {
		LogsFlagName = "logs"
	} else {
		LogsFlagName = fmt.Sprintf("%v.logs", cmdPrefix)
	}

	var LogsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(LogsFlagName, LogsFlagDefault, LogsDescription)

	return nil
}
func registerOperationContainerContainerAttachStderrParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StderrDescription := `Attach to ` + "`" + `stderr` + "`" + ``

	var StderrFlagName string
	if cmdPrefix == "" {
		StderrFlagName = "stderr"
	} else {
		StderrFlagName = fmt.Sprintf("%v.stderr", cmdPrefix)
	}

	var StderrFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StderrFlagName, StderrFlagDefault, StderrDescription)

	return nil
}
func registerOperationContainerContainerAttachStdinParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StdinDescription := `Attach to ` + "`" + `stdin` + "`" + ``

	var StdinFlagName string
	if cmdPrefix == "" {
		StdinFlagName = "stdin"
	} else {
		StdinFlagName = fmt.Sprintf("%v.stdin", cmdPrefix)
	}

	var StdinFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StdinFlagName, StdinFlagDefault, StdinDescription)

	return nil
}
func registerOperationContainerContainerAttachStdoutParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StdoutDescription := `Attach to ` + "`" + `stdout` + "`" + ``

	var StdoutFlagName string
	if cmdPrefix == "" {
		StdoutFlagName = "stdout"
	} else {
		StdoutFlagName = fmt.Sprintf("%v.stdout", cmdPrefix)
	}

	var StdoutFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StdoutFlagName, StdoutFlagDefault, StdoutDescription)

	return nil
}
func registerOperationContainerContainerAttachStreamParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StreamDescription := `Stream attached streams from the time the request was made onwards`

	var StreamFlagName string
	if cmdPrefix == "" {
		StreamFlagName = "stream"
	} else {
		StreamFlagName = fmt.Sprintf("%v.stream", cmdPrefix)
	}

	var StreamFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StreamFlagName, StreamFlagDefault, StreamDescription)

	return nil
}

func retrieveOperationContainerContainerAttachDetachKeysFlag(m *container.ContainerAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("detachKeys") {

		var DetachKeysFlagName string
		if cmdPrefix == "" {
			DetachKeysFlagName = "detachKeys"
		} else {
			DetachKeysFlagName = fmt.Sprintf("%v.detachKeys", cmdPrefix)
		}

		DetachKeysFlagValue, err := cmd.Flags().GetString(DetachKeysFlagName)
		if err != nil {
			return err, false
		}
		m.DetachKeys = &DetachKeysFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachIDFlag(m *container.ContainerAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachLogsFlag(m *container.ContainerAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("logs") {

		var LogsFlagName string
		if cmdPrefix == "" {
			LogsFlagName = "logs"
		} else {
			LogsFlagName = fmt.Sprintf("%v.logs", cmdPrefix)
		}

		LogsFlagValue, err := cmd.Flags().GetBool(LogsFlagName)
		if err != nil {
			return err, false
		}
		m.Logs = &LogsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachStderrFlag(m *container.ContainerAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stderr") {

		var StderrFlagName string
		if cmdPrefix == "" {
			StderrFlagName = "stderr"
		} else {
			StderrFlagName = fmt.Sprintf("%v.stderr", cmdPrefix)
		}

		StderrFlagValue, err := cmd.Flags().GetBool(StderrFlagName)
		if err != nil {
			return err, false
		}
		m.Stderr = &StderrFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachStdinFlag(m *container.ContainerAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stdin") {

		var StdinFlagName string
		if cmdPrefix == "" {
			StdinFlagName = "stdin"
		} else {
			StdinFlagName = fmt.Sprintf("%v.stdin", cmdPrefix)
		}

		StdinFlagValue, err := cmd.Flags().GetBool(StdinFlagName)
		if err != nil {
			return err, false
		}
		m.Stdin = &StdinFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachStdoutFlag(m *container.ContainerAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stdout") {

		var StdoutFlagName string
		if cmdPrefix == "" {
			StdoutFlagName = "stdout"
		} else {
			StdoutFlagName = fmt.Sprintf("%v.stdout", cmdPrefix)
		}

		StdoutFlagValue, err := cmd.Flags().GetBool(StdoutFlagName)
		if err != nil {
			return err, false
		}
		m.Stdout = &StdoutFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachStreamFlag(m *container.ContainerAttachParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stream") {

		var StreamFlagName string
		if cmdPrefix == "" {
			StreamFlagName = "stream"
		} else {
			StreamFlagName = fmt.Sprintf("%v.stream", cmdPrefix)
		}

		StreamFlagValue, err := cmd.Flags().GetBool(StreamFlagName)
		if err != nil {
			return err, false
		}
		m.Stream = &StreamFlagValue

	}
	return nil, retAdded
}

// parseOperationContainerContainerAttachResult parses request result and return the string content
func parseOperationContainerContainerAttachResult(resp0 *container.ContainerAttachOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning containerAttachSwitchingProtocols is not supported

		// Non schema case: warning containerAttachOK is not supported

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerAttachBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*container.ContainerAttachNotFound)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*container.ContainerAttachInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response containerAttachOK is not supported by go-swagger cli yet.

	return "", nil
}
