// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortBinding

// register flags to command
func registerModelPortBindingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortBindingHostIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortBindingHostPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortBindingHostIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HostIPDescription := `Host IP address that the container's port is mapped to.`

	var HostIPFlagName string
	if cmdPrefix == "" {
		HostIPFlagName = "HostIp"
	} else {
		HostIPFlagName = fmt.Sprintf("%v.HostIp", cmdPrefix)
	}

	var HostIPFlagDefault string

	_ = cmd.PersistentFlags().String(HostIPFlagName, HostIPFlagDefault, HostIPDescription)

	return nil
}

func registerPortBindingHostPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HostPortDescription := `Host port number that the container's port is mapped to.`

	var HostPortFlagName string
	if cmdPrefix == "" {
		HostPortFlagName = "HostPort"
	} else {
		HostPortFlagName = fmt.Sprintf("%v.HostPort", cmdPrefix)
	}

	var HostPortFlagDefault string

	_ = cmd.PersistentFlags().String(HostPortFlagName, HostPortFlagDefault, HostPortDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortBindingFlags(depth int, m *models.PortBinding, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, HostIPAdded := retrievePortBindingHostIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostIPAdded

	err, HostPortAdded := retrievePortBindingHostPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostPortAdded

	return nil, retAdded
}

func retrievePortBindingHostIPFlags(depth int, m *models.PortBinding, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostIPFlagName := fmt.Sprintf("%v.HostIp", cmdPrefix)
	if cmd.Flags().Changed(HostIPFlagName) {

		var HostIPFlagName string
		if cmdPrefix == "" {
			HostIPFlagName = "HostIp"
		} else {
			HostIPFlagName = fmt.Sprintf("%v.HostIp", cmdPrefix)
		}

		HostIPFlagValue, err := cmd.Flags().GetString(HostIPFlagName)
		if err != nil {
			return err, false
		}
		m.HostIP = HostIPFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortBindingHostPortFlags(depth int, m *models.PortBinding, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostPortFlagName := fmt.Sprintf("%v.HostPort", cmdPrefix)
	if cmd.Flags().Changed(HostPortFlagName) {

		var HostPortFlagName string
		if cmdPrefix == "" {
			HostPortFlagName = "HostPort"
		} else {
			HostPortFlagName = fmt.Sprintf("%v.HostPort", cmdPrefix)
		}

		HostPortFlagValue, err := cmd.Flags().GetString(HostPortFlagName)
		if err != nil {
			return err, false
		}
		m.HostPort = HostPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}
