// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/service"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationServiceServiceInspectCmd returns a cmd to handle operation serviceInspect
func makeOperationServiceServiceInspectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ServiceInspect",
		Short: ``,
		RunE:  runOperationServiceServiceInspect,
	}

	if err := registerOperationServiceServiceInspectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationServiceServiceInspect uses cmd flags to call endpoint api
func runOperationServiceServiceInspect(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := service.NewServiceInspectParams()
	if err, _ := retrieveOperationServiceServiceInspectIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServiceServiceInspectInsertDefaultsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationServiceServiceInspectResult(appCli.Service.ServiceInspect(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationServiceServiceInspectParamFlags registers all flags needed to fill params
func registerOperationServiceServiceInspectParamFlags(cmd *cobra.Command) error {
	if err := registerOperationServiceServiceInspectIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServiceServiceInspectInsertDefaultsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationServiceServiceInspectIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	IDDescription := `Required. ID or name of service.`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}
func registerOperationServiceServiceInspectInsertDefaultsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	InsertDefaultsDescription := `Fill empty fields with default values.`

	var InsertDefaultsFlagName string
	if cmdPrefix == "" {
		InsertDefaultsFlagName = "insertDefaults"
	} else {
		InsertDefaultsFlagName = fmt.Sprintf("%v.insertDefaults", cmdPrefix)
	}

	var InsertDefaultsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(InsertDefaultsFlagName, InsertDefaultsFlagDefault, InsertDefaultsDescription)

	return nil
}

func retrieveOperationServiceServiceInspectIDFlag(m *service.ServiceInspectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServiceServiceInspectInsertDefaultsFlag(m *service.ServiceInspectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("insertDefaults") {

		var InsertDefaultsFlagName string
		if cmdPrefix == "" {
			InsertDefaultsFlagName = "insertDefaults"
		} else {
			InsertDefaultsFlagName = fmt.Sprintf("%v.insertDefaults", cmdPrefix)
		}

		InsertDefaultsFlagValue, err := cmd.Flags().GetBool(InsertDefaultsFlagName)
		if err != nil {
			return err, false
		}
		m.InsertDefaults = &InsertDefaultsFlagValue

	}
	return nil, retAdded
}

// parseOperationServiceServiceInspectResult parses request result and return the string content
func parseOperationServiceServiceInspectResult(resp0 *service.ServiceInspectOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*service.ServiceInspectOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*service.ServiceInspectNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*service.ServiceInspectInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*service.ServiceInspectServiceUnavailable)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
