// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"
	"github.com/go-swagger/dockerctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerInspectCmd returns a cmd to handle operation containerInspect
func makeOperationContainerContainerInspectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerInspect",
		Short: `Return low-level information about a container.`,
		RunE:  runOperationContainerContainerInspect,
	}

	if err := registerOperationContainerContainerInspectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerInspect uses cmd flags to call endpoint api
func runOperationContainerContainerInspect(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerInspectParams()
	if err, _ := retrieveOperationContainerContainerInspectIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerInspectSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationContainerContainerInspectResult(appCli.Container.ContainerInspect(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationContainerContainerInspectParamFlags registers all flags needed to fill params
func registerOperationContainerContainerInspectParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerInspectIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerInspectSizeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerInspectIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	IDDescription := `Required. ID or name of the container`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}
func registerOperationContainerContainerInspectSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	SizeDescription := `Return the size of container as fields ` + "`" + `SizeRw` + "`" + ` and ` + "`" + `SizeRootFs` + "`" + ``

	var SizeFlagName string
	if cmdPrefix == "" {
		SizeFlagName = "size"
	} else {
		SizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var SizeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(SizeFlagName, SizeFlagDefault, SizeDescription)

	return nil
}

func retrieveOperationContainerContainerInspectIDFlag(m *container.ContainerInspectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerInspectSizeFlag(m *container.ContainerInspectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("size") {

		var SizeFlagName string
		if cmdPrefix == "" {
			SizeFlagName = "size"
		} else {
			SizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		SizeFlagValue, err := cmd.Flags().GetBool(SizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = &SizeFlagValue

	}
	return nil, retAdded
}

// parseOperationContainerContainerInspectResult parses request result and return the string content
func parseOperationContainerContainerInspectResult(resp0 *container.ContainerInspectOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*container.ContainerInspectOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerInspectNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerInspectInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelContainerInspectOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerInspectOKBodyAppArmorProfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyArgs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyExecIDs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyGraphDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyHostConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyHostnamePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyHostsPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyLogPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyMountLabel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyMounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyNetworkSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyNode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyPlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyProcessLabel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyResolvConfPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyRestartCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodySizeRootFs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodySizeRw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerInspectOKBodyAppArmorProfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AppArmorProfileDescription := ``

	var AppArmorProfileFlagName string
	if cmdPrefix == "" {
		AppArmorProfileFlagName = "AppArmorProfile"
	} else {
		AppArmorProfileFlagName = fmt.Sprintf("%v.AppArmorProfile", cmdPrefix)
	}

	var AppArmorProfileFlagDefault string

	_ = cmd.PersistentFlags().String(AppArmorProfileFlagName, AppArmorProfileFlagDefault, AppArmorProfileDescription)

	return nil
}

func registerContainerInspectOKBodyArgs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Args []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerInspectOKBodyConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ConfigFlagName string
	if cmdPrefix == "" {
		ConfigFlagName = "Config"
	} else {
		ConfigFlagName = fmt.Sprintf("%v.Config", cmdPrefix)
	}

	if err := registerModelContainerConfigFlags(depth+1, ConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerInspectOKBodyCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedDescription := `The time the container was created`

	var CreatedFlagName string
	if cmdPrefix == "" {
		CreatedFlagName = "Created"
	} else {
		CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
	}

	var CreatedFlagDefault string

	_ = cmd.PersistentFlags().String(CreatedFlagName, CreatedFlagDefault, CreatedDescription)

	return nil
}

func registerContainerInspectOKBodyDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DriverDescription := ``

	var DriverFlagName string
	if cmdPrefix == "" {
		DriverFlagName = "Driver"
	} else {
		DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
	}

	var DriverFlagDefault string

	_ = cmd.PersistentFlags().String(DriverFlagName, DriverFlagDefault, DriverDescription)

	return nil
}

func registerContainerInspectOKBodyExecIDs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ExecIDs []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerInspectOKBodyGraphDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var GraphDriverFlagName string
	if cmdPrefix == "" {
		GraphDriverFlagName = "GraphDriver"
	} else {
		GraphDriverFlagName = fmt.Sprintf("%v.GraphDriver", cmdPrefix)
	}

	if err := registerModelGraphDriverDataFlags(depth+1, GraphDriverFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerInspectOKBodyHostConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var HostConfigFlagName string
	if cmdPrefix == "" {
		HostConfigFlagName = "HostConfig"
	} else {
		HostConfigFlagName = fmt.Sprintf("%v.HostConfig", cmdPrefix)
	}

	if err := registerModelHostConfigFlags(depth+1, HostConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerInspectOKBodyHostnamePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HostnamePathDescription := ``

	var HostnamePathFlagName string
	if cmdPrefix == "" {
		HostnamePathFlagName = "HostnamePath"
	} else {
		HostnamePathFlagName = fmt.Sprintf("%v.HostnamePath", cmdPrefix)
	}

	var HostnamePathFlagDefault string

	_ = cmd.PersistentFlags().String(HostnamePathFlagName, HostnamePathFlagDefault, HostnamePathDescription)

	return nil
}

func registerContainerInspectOKBodyHostsPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HostsPathDescription := ``

	var HostsPathFlagName string
	if cmdPrefix == "" {
		HostsPathFlagName = "HostsPath"
	} else {
		HostsPathFlagName = fmt.Sprintf("%v.HostsPath", cmdPrefix)
	}

	var HostsPathFlagDefault string

	_ = cmd.PersistentFlags().String(HostsPathFlagName, HostsPathFlagDefault, HostsPathDescription)

	return nil
}

func registerContainerInspectOKBodyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := `The ID of the container`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "Id"
	} else {
		IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerContainerInspectOKBodyImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ImageDescription := `The container's image`

	var ImageFlagName string
	if cmdPrefix == "" {
		ImageFlagName = "Image"
	} else {
		ImageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
	}

	var ImageFlagDefault string

	_ = cmd.PersistentFlags().String(ImageFlagName, ImageFlagDefault, ImageDescription)

	return nil
}

func registerContainerInspectOKBodyLogPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	LogPathDescription := ``

	var LogPathFlagName string
	if cmdPrefix == "" {
		LogPathFlagName = "LogPath"
	} else {
		LogPathFlagName = fmt.Sprintf("%v.LogPath", cmdPrefix)
	}

	var LogPathFlagDefault string

	_ = cmd.PersistentFlags().String(LogPathFlagName, LogPathFlagDefault, LogPathDescription)

	return nil
}

func registerContainerInspectOKBodyMountLabel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MountLabelDescription := ``

	var MountLabelFlagName string
	if cmdPrefix == "" {
		MountLabelFlagName = "MountLabel"
	} else {
		MountLabelFlagName = fmt.Sprintf("%v.MountLabel", cmdPrefix)
	}

	var MountLabelFlagDefault string

	_ = cmd.PersistentFlags().String(MountLabelFlagName, MountLabelFlagDefault, MountLabelDescription)

	return nil
}

func registerContainerInspectOKBodyMounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Mounts []*models.MountPoint array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerInspectOKBodyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := ``

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerContainerInspectOKBodyNetworkSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var NetworkSettingsFlagName string
	if cmdPrefix == "" {
		NetworkSettingsFlagName = "NetworkSettings"
	} else {
		NetworkSettingsFlagName = fmt.Sprintf("%v.NetworkSettings", cmdPrefix)
	}

	if err := registerModelNetworkSettingsFlags(depth+1, NetworkSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerInspectOKBodyNode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Node interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerContainerInspectOKBodyPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PathDescription := `The path to the command being run`

	var PathFlagName string
	if cmdPrefix == "" {
		PathFlagName = "Path"
	} else {
		PathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
	}

	var PathFlagDefault string

	_ = cmd.PersistentFlags().String(PathFlagName, PathFlagDefault, PathDescription)

	return nil
}

func registerContainerInspectOKBodyPlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PlatformDescription := ``

	var PlatformFlagName string
	if cmdPrefix == "" {
		PlatformFlagName = "Platform"
	} else {
		PlatformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
	}

	var PlatformFlagDefault string

	_ = cmd.PersistentFlags().String(PlatformFlagName, PlatformFlagDefault, PlatformDescription)

	return nil
}

func registerContainerInspectOKBodyProcessLabel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ProcessLabelDescription := ``

	var ProcessLabelFlagName string
	if cmdPrefix == "" {
		ProcessLabelFlagName = "ProcessLabel"
	} else {
		ProcessLabelFlagName = fmt.Sprintf("%v.ProcessLabel", cmdPrefix)
	}

	var ProcessLabelFlagDefault string

	_ = cmd.PersistentFlags().String(ProcessLabelFlagName, ProcessLabelFlagDefault, ProcessLabelDescription)

	return nil
}

func registerContainerInspectOKBodyResolvConfPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ResolvConfPathDescription := ``

	var ResolvConfPathFlagName string
	if cmdPrefix == "" {
		ResolvConfPathFlagName = "ResolvConfPath"
	} else {
		ResolvConfPathFlagName = fmt.Sprintf("%v.ResolvConfPath", cmdPrefix)
	}

	var ResolvConfPathFlagDefault string

	_ = cmd.PersistentFlags().String(ResolvConfPathFlagName, ResolvConfPathFlagDefault, ResolvConfPathDescription)

	return nil
}

func registerContainerInspectOKBodyRestartCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RestartCountDescription := ``

	var RestartCountFlagName string
	if cmdPrefix == "" {
		RestartCountFlagName = "RestartCount"
	} else {
		RestartCountFlagName = fmt.Sprintf("%v.RestartCount", cmdPrefix)
	}

	var RestartCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(RestartCountFlagName, RestartCountFlagDefault, RestartCountDescription)

	return nil
}

func registerContainerInspectOKBodySizeRootFs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeRootFsDescription := `The total size of all the files in this container.`

	var SizeRootFsFlagName string
	if cmdPrefix == "" {
		SizeRootFsFlagName = "SizeRootFs"
	} else {
		SizeRootFsFlagName = fmt.Sprintf("%v.SizeRootFs", cmdPrefix)
	}

	var SizeRootFsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SizeRootFsFlagName, SizeRootFsFlagDefault, SizeRootFsDescription)

	return nil
}

func registerContainerInspectOKBodySizeRw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeRwDescription := `The size of files that have been created or changed by this container.`

	var SizeRwFlagName string
	if cmdPrefix == "" {
		SizeRwFlagName = "SizeRw"
	} else {
		SizeRwFlagName = fmt.Sprintf("%v.SizeRw", cmdPrefix)
	}

	var SizeRwFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SizeRwFlagName, SizeRwFlagDefault, SizeRwDescription)

	return nil
}

func registerContainerInspectOKBodyState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var StateFlagName string
	if cmdPrefix == "" {
		StateFlagName = "State"
	} else {
		StateFlagName = fmt.Sprintf("%v.State", cmdPrefix)
	}

	if err := registerModelContainerInspectOKBodyStateFlags(depth+1, StateFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerInspectOKBodyFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AppArmorProfileAdded := retrieveContainerInspectOKBodyAppArmorProfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AppArmorProfileAdded

	err, ArgsAdded := retrieveContainerInspectOKBodyArgsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArgsAdded

	err, ConfigAdded := retrieveContainerInspectOKBodyConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConfigAdded

	err, CreatedAdded := retrieveContainerInspectOKBodyCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAdded

	err, DriverAdded := retrieveContainerInspectOKBodyDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverAdded

	err, ExecIDsAdded := retrieveContainerInspectOKBodyExecIDsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExecIDsAdded

	err, GraphDriverAdded := retrieveContainerInspectOKBodyGraphDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GraphDriverAdded

	err, HostConfigAdded := retrieveContainerInspectOKBodyHostConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostConfigAdded

	err, HostnamePathAdded := retrieveContainerInspectOKBodyHostnamePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostnamePathAdded

	err, HostsPathAdded := retrieveContainerInspectOKBodyHostsPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostsPathAdded

	err, IDAdded := retrieveContainerInspectOKBodyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, ImageAdded := retrieveContainerInspectOKBodyImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ImageAdded

	err, LogPathAdded := retrieveContainerInspectOKBodyLogPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogPathAdded

	err, MountLabelAdded := retrieveContainerInspectOKBodyMountLabelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MountLabelAdded

	err, MountsAdded := retrieveContainerInspectOKBodyMountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MountsAdded

	err, NameAdded := retrieveContainerInspectOKBodyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, NetworkSettingsAdded := retrieveContainerInspectOKBodyNetworkSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkSettingsAdded

	err, NodeAdded := retrieveContainerInspectOKBodyNodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NodeAdded

	err, PathAdded := retrieveContainerInspectOKBodyPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PathAdded

	err, PlatformAdded := retrieveContainerInspectOKBodyPlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlatformAdded

	err, ProcessLabelAdded := retrieveContainerInspectOKBodyProcessLabelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProcessLabelAdded

	err, ResolvConfPathAdded := retrieveContainerInspectOKBodyResolvConfPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ResolvConfPathAdded

	err, RestartCountAdded := retrieveContainerInspectOKBodyRestartCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RestartCountAdded

	err, SizeRootFsAdded := retrieveContainerInspectOKBodySizeRootFsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeRootFsAdded

	err, SizeRwAdded := retrieveContainerInspectOKBodySizeRwFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeRwAdded

	err, StateAdded := retrieveContainerInspectOKBodyStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	return nil, retAdded
}

func retrieveContainerInspectOKBodyAppArmorProfileFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AppArmorProfileFlagName := fmt.Sprintf("%v.AppArmorProfile", cmdPrefix)
	if cmd.Flags().Changed(AppArmorProfileFlagName) {

		var AppArmorProfileFlagName string
		if cmdPrefix == "" {
			AppArmorProfileFlagName = "AppArmorProfile"
		} else {
			AppArmorProfileFlagName = fmt.Sprintf("%v.AppArmorProfile", cmdPrefix)
		}

		AppArmorProfileFlagValue, err := cmd.Flags().GetString(AppArmorProfileFlagName)
		if err != nil {
			return err, false
		}
		m.AppArmorProfile = AppArmorProfileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyArgsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ArgsFlagName := fmt.Sprintf("%v.Args", cmdPrefix)
	if cmd.Flags().Changed(ArgsFlagName) {
		// warning: Args array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyConfigFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConfigFlagName := fmt.Sprintf("%v.Config", cmdPrefix)
	if cmd.Flags().Changed(ConfigFlagName) {
		// info: complex object Config models.ContainerConfig is retrieved outside this Changed() block
	}
	ConfigFlagValue := m.Config
	if swag.IsZero(ConfigFlagValue) {
		ConfigFlagValue = &models.ContainerConfig{}
	}

	err, ConfigAdded := retrieveModelContainerConfigFlags(depth+1, ConfigFlagValue, ConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConfigAdded
	if ConfigAdded {
		m.Config = ConfigFlagValue
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyCreatedFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedFlagName := fmt.Sprintf("%v.Created", cmdPrefix)
	if cmd.Flags().Changed(CreatedFlagName) {

		var CreatedFlagName string
		if cmdPrefix == "" {
			CreatedFlagName = "Created"
		} else {
			CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
		}

		CreatedFlagValue, err := cmd.Flags().GetString(CreatedFlagName)
		if err != nil {
			return err, false
		}
		m.Created = CreatedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyDriverFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DriverFlagName := fmt.Sprintf("%v.Driver", cmdPrefix)
	if cmd.Flags().Changed(DriverFlagName) {

		var DriverFlagName string
		if cmdPrefix == "" {
			DriverFlagName = "Driver"
		} else {
			DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
		}

		DriverFlagValue, err := cmd.Flags().GetString(DriverFlagName)
		if err != nil {
			return err, false
		}
		m.Driver = DriverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyExecIDsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ExecIDsFlagName := fmt.Sprintf("%v.ExecIDs", cmdPrefix)
	if cmd.Flags().Changed(ExecIDsFlagName) {
		// warning: ExecIDs array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyGraphDriverFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GraphDriverFlagName := fmt.Sprintf("%v.GraphDriver", cmdPrefix)
	if cmd.Flags().Changed(GraphDriverFlagName) {
		// info: complex object GraphDriver models.GraphDriverData is retrieved outside this Changed() block
	}
	GraphDriverFlagValue := m.GraphDriver
	if swag.IsZero(GraphDriverFlagValue) {
		GraphDriverFlagValue = &models.GraphDriverData{}
	}

	err, GraphDriverAdded := retrieveModelGraphDriverDataFlags(depth+1, GraphDriverFlagValue, GraphDriverFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GraphDriverAdded
	if GraphDriverAdded {
		m.GraphDriver = GraphDriverFlagValue
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyHostConfigFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostConfigFlagName := fmt.Sprintf("%v.HostConfig", cmdPrefix)
	if cmd.Flags().Changed(HostConfigFlagName) {
		// info: complex object HostConfig models.HostConfig is retrieved outside this Changed() block
	}
	HostConfigFlagValue := m.HostConfig
	if swag.IsZero(HostConfigFlagValue) {
		HostConfigFlagValue = &models.HostConfig{}
	}

	err, HostConfigAdded := retrieveModelHostConfigFlags(depth+1, HostConfigFlagValue, HostConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostConfigAdded
	if HostConfigAdded {
		m.HostConfig = HostConfigFlagValue
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyHostnamePathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostnamePathFlagName := fmt.Sprintf("%v.HostnamePath", cmdPrefix)
	if cmd.Flags().Changed(HostnamePathFlagName) {

		var HostnamePathFlagName string
		if cmdPrefix == "" {
			HostnamePathFlagName = "HostnamePath"
		} else {
			HostnamePathFlagName = fmt.Sprintf("%v.HostnamePath", cmdPrefix)
		}

		HostnamePathFlagValue, err := cmd.Flags().GetString(HostnamePathFlagName)
		if err != nil {
			return err, false
		}
		m.HostnamePath = HostnamePathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyHostsPathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostsPathFlagName := fmt.Sprintf("%v.HostsPath", cmdPrefix)
	if cmd.Flags().Changed(HostsPathFlagName) {

		var HostsPathFlagName string
		if cmdPrefix == "" {
			HostsPathFlagName = "HostsPath"
		} else {
			HostsPathFlagName = fmt.Sprintf("%v.HostsPath", cmdPrefix)
		}

		HostsPathFlagValue, err := cmd.Flags().GetString(HostsPathFlagName)
		if err != nil {
			return err, false
		}
		m.HostsPath = HostsPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyIDFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "Id"
		} else {
			IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyImageFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ImageFlagName := fmt.Sprintf("%v.Image", cmdPrefix)
	if cmd.Flags().Changed(ImageFlagName) {

		var ImageFlagName string
		if cmdPrefix == "" {
			ImageFlagName = "Image"
		} else {
			ImageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
		}

		ImageFlagValue, err := cmd.Flags().GetString(ImageFlagName)
		if err != nil {
			return err, false
		}
		m.Image = ImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyLogPathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LogPathFlagName := fmt.Sprintf("%v.LogPath", cmdPrefix)
	if cmd.Flags().Changed(LogPathFlagName) {

		var LogPathFlagName string
		if cmdPrefix == "" {
			LogPathFlagName = "LogPath"
		} else {
			LogPathFlagName = fmt.Sprintf("%v.LogPath", cmdPrefix)
		}

		LogPathFlagValue, err := cmd.Flags().GetString(LogPathFlagName)
		if err != nil {
			return err, false
		}
		m.LogPath = LogPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyMountLabelFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MountLabelFlagName := fmt.Sprintf("%v.MountLabel", cmdPrefix)
	if cmd.Flags().Changed(MountLabelFlagName) {

		var MountLabelFlagName string
		if cmdPrefix == "" {
			MountLabelFlagName = "MountLabel"
		} else {
			MountLabelFlagName = fmt.Sprintf("%v.MountLabel", cmdPrefix)
		}

		MountLabelFlagValue, err := cmd.Flags().GetString(MountLabelFlagName)
		if err != nil {
			return err, false
		}
		m.MountLabel = MountLabelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyMountsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MountsFlagName := fmt.Sprintf("%v.Mounts", cmdPrefix)
	if cmd.Flags().Changed(MountsFlagName) {
		// warning: Mounts array type []*models.MountPoint is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyNameFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyNetworkSettingsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworkSettingsFlagName := fmt.Sprintf("%v.NetworkSettings", cmdPrefix)
	if cmd.Flags().Changed(NetworkSettingsFlagName) {
		// info: complex object NetworkSettings models.NetworkSettings is retrieved outside this Changed() block
	}
	NetworkSettingsFlagValue := m.NetworkSettings
	if swag.IsZero(NetworkSettingsFlagValue) {
		NetworkSettingsFlagValue = &models.NetworkSettings{}
	}

	err, NetworkSettingsAdded := retrieveModelNetworkSettingsFlags(depth+1, NetworkSettingsFlagValue, NetworkSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkSettingsAdded
	if NetworkSettingsAdded {
		m.NetworkSettings = NetworkSettingsFlagValue
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyNodeFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NodeFlagName := fmt.Sprintf("%v.Node", cmdPrefix)
	if cmd.Flags().Changed(NodeFlagName) {
		// warning: Node map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyPathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PathFlagName := fmt.Sprintf("%v.Path", cmdPrefix)
	if cmd.Flags().Changed(PathFlagName) {

		var PathFlagName string
		if cmdPrefix == "" {
			PathFlagName = "Path"
		} else {
			PathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
		}

		PathFlagValue, err := cmd.Flags().GetString(PathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = PathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyPlatformFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PlatformFlagName := fmt.Sprintf("%v.Platform", cmdPrefix)
	if cmd.Flags().Changed(PlatformFlagName) {

		var PlatformFlagName string
		if cmdPrefix == "" {
			PlatformFlagName = "Platform"
		} else {
			PlatformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
		}

		PlatformFlagValue, err := cmd.Flags().GetString(PlatformFlagName)
		if err != nil {
			return err, false
		}
		m.Platform = PlatformFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyProcessLabelFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ProcessLabelFlagName := fmt.Sprintf("%v.ProcessLabel", cmdPrefix)
	if cmd.Flags().Changed(ProcessLabelFlagName) {

		var ProcessLabelFlagName string
		if cmdPrefix == "" {
			ProcessLabelFlagName = "ProcessLabel"
		} else {
			ProcessLabelFlagName = fmt.Sprintf("%v.ProcessLabel", cmdPrefix)
		}

		ProcessLabelFlagValue, err := cmd.Flags().GetString(ProcessLabelFlagName)
		if err != nil {
			return err, false
		}
		m.ProcessLabel = ProcessLabelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyResolvConfPathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ResolvConfPathFlagName := fmt.Sprintf("%v.ResolvConfPath", cmdPrefix)
	if cmd.Flags().Changed(ResolvConfPathFlagName) {

		var ResolvConfPathFlagName string
		if cmdPrefix == "" {
			ResolvConfPathFlagName = "ResolvConfPath"
		} else {
			ResolvConfPathFlagName = fmt.Sprintf("%v.ResolvConfPath", cmdPrefix)
		}

		ResolvConfPathFlagValue, err := cmd.Flags().GetString(ResolvConfPathFlagName)
		if err != nil {
			return err, false
		}
		m.ResolvConfPath = ResolvConfPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyRestartCountFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RestartCountFlagName := fmt.Sprintf("%v.RestartCount", cmdPrefix)
	if cmd.Flags().Changed(RestartCountFlagName) {

		var RestartCountFlagName string
		if cmdPrefix == "" {
			RestartCountFlagName = "RestartCount"
		} else {
			RestartCountFlagName = fmt.Sprintf("%v.RestartCount", cmdPrefix)
		}

		RestartCountFlagValue, err := cmd.Flags().GetInt64(RestartCountFlagName)
		if err != nil {
			return err, false
		}
		m.RestartCount = RestartCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodySizeRootFsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeRootFsFlagName := fmt.Sprintf("%v.SizeRootFs", cmdPrefix)
	if cmd.Flags().Changed(SizeRootFsFlagName) {

		var SizeRootFsFlagName string
		if cmdPrefix == "" {
			SizeRootFsFlagName = "SizeRootFs"
		} else {
			SizeRootFsFlagName = fmt.Sprintf("%v.SizeRootFs", cmdPrefix)
		}

		SizeRootFsFlagValue, err := cmd.Flags().GetInt64(SizeRootFsFlagName)
		if err != nil {
			return err, false
		}
		m.SizeRootFs = SizeRootFsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodySizeRwFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeRwFlagName := fmt.Sprintf("%v.SizeRw", cmdPrefix)
	if cmd.Flags().Changed(SizeRwFlagName) {

		var SizeRwFlagName string
		if cmdPrefix == "" {
			SizeRwFlagName = "SizeRw"
		} else {
			SizeRwFlagName = fmt.Sprintf("%v.SizeRw", cmdPrefix)
		}

		SizeRwFlagValue, err := cmd.Flags().GetInt64(SizeRwFlagName)
		if err != nil {
			return err, false
		}
		m.SizeRw = SizeRwFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StateFlagName := fmt.Sprintf("%v.State", cmdPrefix)
	if cmd.Flags().Changed(StateFlagName) {
		// info: complex object State ContainerInspectOKBodyState is retrieved outside this Changed() block
	}
	StateFlagValue := m.State
	if swag.IsZero(StateFlagValue) {
		StateFlagValue = &container.ContainerInspectOKBodyState{}
	}

	err, StateAdded := retrieveModelContainerInspectOKBodyStateFlags(depth+1, StateFlagValue, StateFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded
	if StateAdded {
		m.State = StateFlagValue
	}

	return nil, retAdded
}

// register flags to command
func registerModelContainerInspectOKBodyStateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerInspectOKBodyStateDead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateExitCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateFinishedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateOOMKilled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStatePaused(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStatePid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateRestarting(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateRunning(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateStartedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerInspectOKBodyStateDead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DeadDescription := ``

	var DeadFlagName string
	if cmdPrefix == "" {
		DeadFlagName = "Dead"
	} else {
		DeadFlagName = fmt.Sprintf("%v.Dead", cmdPrefix)
	}

	var DeadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(DeadFlagName, DeadFlagDefault, DeadDescription)

	return nil
}

func registerContainerInspectOKBodyStateError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ErrorDescription := ``

	var ErrorFlagName string
	if cmdPrefix == "" {
		ErrorFlagName = "Error"
	} else {
		ErrorFlagName = fmt.Sprintf("%v.Error", cmdPrefix)
	}

	var ErrorFlagDefault string

	_ = cmd.PersistentFlags().String(ErrorFlagName, ErrorFlagDefault, ErrorDescription)

	return nil
}

func registerContainerInspectOKBodyStateExitCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ExitCodeDescription := `The last exit code of this container`

	var ExitCodeFlagName string
	if cmdPrefix == "" {
		ExitCodeFlagName = "ExitCode"
	} else {
		ExitCodeFlagName = fmt.Sprintf("%v.ExitCode", cmdPrefix)
	}

	var ExitCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ExitCodeFlagName, ExitCodeFlagDefault, ExitCodeDescription)

	return nil
}

func registerContainerInspectOKBodyStateFinishedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	FinishedAtDescription := `The time when this container last exited.`

	var FinishedAtFlagName string
	if cmdPrefix == "" {
		FinishedAtFlagName = "FinishedAt"
	} else {
		FinishedAtFlagName = fmt.Sprintf("%v.FinishedAt", cmdPrefix)
	}

	var FinishedAtFlagDefault string

	_ = cmd.PersistentFlags().String(FinishedAtFlagName, FinishedAtFlagDefault, FinishedAtDescription)

	return nil
}

func registerContainerInspectOKBodyStateOOMKilled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OOMKilledDescription := `Whether this container has been killed because it ran out of memory.`

	var OOMKilledFlagName string
	if cmdPrefix == "" {
		OOMKilledFlagName = "OOMKilled"
	} else {
		OOMKilledFlagName = fmt.Sprintf("%v.OOMKilled", cmdPrefix)
	}

	var OOMKilledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(OOMKilledFlagName, OOMKilledFlagDefault, OOMKilledDescription)

	return nil
}

func registerContainerInspectOKBodyStatePaused(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PausedDescription := `Whether this container is paused.`

	var PausedFlagName string
	if cmdPrefix == "" {
		PausedFlagName = "Paused"
	} else {
		PausedFlagName = fmt.Sprintf("%v.Paused", cmdPrefix)
	}

	var PausedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(PausedFlagName, PausedFlagDefault, PausedDescription)

	return nil
}

func registerContainerInspectOKBodyStatePid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PidDescription := `The process ID of this container`

	var PidFlagName string
	if cmdPrefix == "" {
		PidFlagName = "Pid"
	} else {
		PidFlagName = fmt.Sprintf("%v.Pid", cmdPrefix)
	}

	var PidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(PidFlagName, PidFlagDefault, PidDescription)

	return nil
}

func registerContainerInspectOKBodyStateRestarting(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RestartingDescription := `Whether this container is restarting.`

	var RestartingFlagName string
	if cmdPrefix == "" {
		RestartingFlagName = "Restarting"
	} else {
		RestartingFlagName = fmt.Sprintf("%v.Restarting", cmdPrefix)
	}

	var RestartingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(RestartingFlagName, RestartingFlagDefault, RestartingDescription)

	return nil
}

func registerContainerInspectOKBodyStateRunning(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RunningDescription := `Whether this container is running.

Note that a running container can be _paused_. The ` + "`" + `Running` + "`" + ` and ` + "`" + `Paused` + "`" + `
booleans are not mutually exclusive:

When pausing a container (on Linux), the freezer cgroup is used to suspend
all processes in the container. Freezing the process requires the process to
be running. As a result, paused containers are both ` + "`" + `Running` + "`" + ` _and_ ` + "`" + `Paused` + "`" + `.

Use the ` + "`" + `Status` + "`" + ` field instead to determine if a container's state is "running".
`

	var RunningFlagName string
	if cmdPrefix == "" {
		RunningFlagName = "Running"
	} else {
		RunningFlagName = fmt.Sprintf("%v.Running", cmdPrefix)
	}

	var RunningFlagDefault bool

	_ = cmd.PersistentFlags().Bool(RunningFlagName, RunningFlagDefault, RunningDescription)

	return nil
}

func registerContainerInspectOKBodyStateStartedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StartedAtDescription := `The time when this container was last started.`

	var StartedAtFlagName string
	if cmdPrefix == "" {
		StartedAtFlagName = "StartedAt"
	} else {
		StartedAtFlagName = fmt.Sprintf("%v.StartedAt", cmdPrefix)
	}

	var StartedAtFlagDefault string

	_ = cmd.PersistentFlags().String(StartedAtFlagName, StartedAtFlagDefault, StartedAtDescription)

	return nil
}

func registerContainerInspectOKBodyStateStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StatusDescription := `Enum: ["created","running","paused","restarting","removing","exited","dead"]. The status of the container. For example, ` + "`" + `"running"` + "`" + ` or ` + "`" + `"exited"` + "`" + `.
`

	var StatusFlagName string
	if cmdPrefix == "" {
		StatusFlagName = "Status"
	} else {
		StatusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
	}

	var StatusFlagDefault string

	_ = cmd.PersistentFlags().String(StatusFlagName, StatusFlagDefault, StatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(StatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["created","running","paused","restarting","removing","exited","dead"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerInspectOKBodyStateFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DeadAdded := retrieveContainerInspectOKBodyStateDeadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DeadAdded

	err, ErrorAdded := retrieveContainerInspectOKBodyStateErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded

	err, ExitCodeAdded := retrieveContainerInspectOKBodyStateExitCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExitCodeAdded

	err, FinishedAtAdded := retrieveContainerInspectOKBodyStateFinishedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FinishedAtAdded

	err, OOMKilledAdded := retrieveContainerInspectOKBodyStateOOMKilledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OOMKilledAdded

	err, PausedAdded := retrieveContainerInspectOKBodyStatePausedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PausedAdded

	err, PidAdded := retrieveContainerInspectOKBodyStatePidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PidAdded

	err, RestartingAdded := retrieveContainerInspectOKBodyStateRestartingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RestartingAdded

	err, RunningAdded := retrieveContainerInspectOKBodyStateRunningFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RunningAdded

	err, StartedAtAdded := retrieveContainerInspectOKBodyStateStartedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StartedAtAdded

	err, StatusAdded := retrieveContainerInspectOKBodyStateStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateDeadFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DeadFlagName := fmt.Sprintf("%v.Dead", cmdPrefix)
	if cmd.Flags().Changed(DeadFlagName) {

		var DeadFlagName string
		if cmdPrefix == "" {
			DeadFlagName = "Dead"
		} else {
			DeadFlagName = fmt.Sprintf("%v.Dead", cmdPrefix)
		}

		DeadFlagValue, err := cmd.Flags().GetBool(DeadFlagName)
		if err != nil {
			return err, false
		}
		m.Dead = DeadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateErrorFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ErrorFlagName := fmt.Sprintf("%v.Error", cmdPrefix)
	if cmd.Flags().Changed(ErrorFlagName) {

		var ErrorFlagName string
		if cmdPrefix == "" {
			ErrorFlagName = "Error"
		} else {
			ErrorFlagName = fmt.Sprintf("%v.Error", cmdPrefix)
		}

		ErrorFlagValue, err := cmd.Flags().GetString(ErrorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = ErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateExitCodeFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ExitCodeFlagName := fmt.Sprintf("%v.ExitCode", cmdPrefix)
	if cmd.Flags().Changed(ExitCodeFlagName) {

		var ExitCodeFlagName string
		if cmdPrefix == "" {
			ExitCodeFlagName = "ExitCode"
		} else {
			ExitCodeFlagName = fmt.Sprintf("%v.ExitCode", cmdPrefix)
		}

		ExitCodeFlagValue, err := cmd.Flags().GetInt64(ExitCodeFlagName)
		if err != nil {
			return err, false
		}
		m.ExitCode = ExitCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateFinishedAtFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	FinishedAtFlagName := fmt.Sprintf("%v.FinishedAt", cmdPrefix)
	if cmd.Flags().Changed(FinishedAtFlagName) {

		var FinishedAtFlagName string
		if cmdPrefix == "" {
			FinishedAtFlagName = "FinishedAt"
		} else {
			FinishedAtFlagName = fmt.Sprintf("%v.FinishedAt", cmdPrefix)
		}

		FinishedAtFlagValue, err := cmd.Flags().GetString(FinishedAtFlagName)
		if err != nil {
			return err, false
		}
		m.FinishedAt = FinishedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateOOMKilledFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OOMKilledFlagName := fmt.Sprintf("%v.OOMKilled", cmdPrefix)
	if cmd.Flags().Changed(OOMKilledFlagName) {

		var OOMKilledFlagName string
		if cmdPrefix == "" {
			OOMKilledFlagName = "OOMKilled"
		} else {
			OOMKilledFlagName = fmt.Sprintf("%v.OOMKilled", cmdPrefix)
		}

		OOMKilledFlagValue, err := cmd.Flags().GetBool(OOMKilledFlagName)
		if err != nil {
			return err, false
		}
		m.OOMKilled = OOMKilledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStatePausedFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PausedFlagName := fmt.Sprintf("%v.Paused", cmdPrefix)
	if cmd.Flags().Changed(PausedFlagName) {

		var PausedFlagName string
		if cmdPrefix == "" {
			PausedFlagName = "Paused"
		} else {
			PausedFlagName = fmt.Sprintf("%v.Paused", cmdPrefix)
		}

		PausedFlagValue, err := cmd.Flags().GetBool(PausedFlagName)
		if err != nil {
			return err, false
		}
		m.Paused = PausedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStatePidFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PidFlagName := fmt.Sprintf("%v.Pid", cmdPrefix)
	if cmd.Flags().Changed(PidFlagName) {

		var PidFlagName string
		if cmdPrefix == "" {
			PidFlagName = "Pid"
		} else {
			PidFlagName = fmt.Sprintf("%v.Pid", cmdPrefix)
		}

		PidFlagValue, err := cmd.Flags().GetInt64(PidFlagName)
		if err != nil {
			return err, false
		}
		m.Pid = PidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateRestartingFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RestartingFlagName := fmt.Sprintf("%v.Restarting", cmdPrefix)
	if cmd.Flags().Changed(RestartingFlagName) {

		var RestartingFlagName string
		if cmdPrefix == "" {
			RestartingFlagName = "Restarting"
		} else {
			RestartingFlagName = fmt.Sprintf("%v.Restarting", cmdPrefix)
		}

		RestartingFlagValue, err := cmd.Flags().GetBool(RestartingFlagName)
		if err != nil {
			return err, false
		}
		m.Restarting = RestartingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateRunningFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RunningFlagName := fmt.Sprintf("%v.Running", cmdPrefix)
	if cmd.Flags().Changed(RunningFlagName) {

		var RunningFlagName string
		if cmdPrefix == "" {
			RunningFlagName = "Running"
		} else {
			RunningFlagName = fmt.Sprintf("%v.Running", cmdPrefix)
		}

		RunningFlagValue, err := cmd.Flags().GetBool(RunningFlagName)
		if err != nil {
			return err, false
		}
		m.Running = RunningFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateStartedAtFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StartedAtFlagName := fmt.Sprintf("%v.StartedAt", cmdPrefix)
	if cmd.Flags().Changed(StartedAtFlagName) {

		var StartedAtFlagName string
		if cmdPrefix == "" {
			StartedAtFlagName = "StartedAt"
		} else {
			StartedAtFlagName = fmt.Sprintf("%v.StartedAt", cmdPrefix)
		}

		StartedAtFlagValue, err := cmd.Flags().GetString(StartedAtFlagName)
		if err != nil {
			return err, false
		}
		m.StartedAt = StartedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateStatusFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StatusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(StatusFlagName) {

		var StatusFlagName string
		if cmdPrefix == "" {
			StatusFlagName = "Status"
		} else {
			StatusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
		}

		StatusFlagValue, err := cmd.Flags().GetString(StatusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = StatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
