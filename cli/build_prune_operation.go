// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/image"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationImageBuildPruneCmd returns a cmd to handle operation buildPrune
func makeOperationImageBuildPruneCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "BuildPrune",
		Short: ``,
		RunE:  runOperationImageBuildPrune,
	}

	if err := registerOperationImageBuildPruneParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationImageBuildPrune uses cmd flags to call endpoint api
func runOperationImageBuildPrune(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := image.NewBuildPruneParams()
	if err, _ := retrieveOperationImageBuildPruneAllFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageBuildPruneFiltersFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageBuildPruneKeepStorageFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationImageBuildPruneResult(appCli.Image.BuildPrune(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationImageBuildPruneParamFlags registers all flags needed to fill params
func registerOperationImageBuildPruneParamFlags(cmd *cobra.Command) error {
	if err := registerOperationImageBuildPruneAllParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageBuildPruneFiltersParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageBuildPruneKeepStorageParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationImageBuildPruneAllParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	AllDescription := `Remove all types of build cache`

	var AllFlagName string
	if cmdPrefix == "" {
		AllFlagName = "all"
	} else {
		AllFlagName = fmt.Sprintf("%v.all", cmdPrefix)
	}

	var AllFlagDefault bool

	_ = cmd.PersistentFlags().Bool(AllFlagName, AllFlagDefault, AllDescription)

	return nil
}
func registerOperationImageBuildPruneFiltersParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	FiltersDescription := `A JSON encoded value of the filters (a ` + "`" + `map[string][]string` + "`" + `) to process on the list of build cache objects. Available filters:
- ` + "`" + `until=<duration>` + "`" + `: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h')
- ` + "`" + `id=<id>` + "`" + `
- ` + "`" + `parent=<id>` + "`" + `
- ` + "`" + `type=<string>` + "`" + `
- ` + "`" + `description=<string>` + "`" + `
- ` + "`" + `inuse` + "`" + `
- ` + "`" + `shared` + "`" + `
- ` + "`" + `private` + "`" + `
`

	var FiltersFlagName string
	if cmdPrefix == "" {
		FiltersFlagName = "filters"
	} else {
		FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
	}

	var FiltersFlagDefault string

	_ = cmd.PersistentFlags().String(FiltersFlagName, FiltersFlagDefault, FiltersDescription)

	return nil
}
func registerOperationImageBuildPruneKeepStorageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	KeepStorageDescription := `Amount of disk space in bytes to keep for cache`

	var KeepStorageFlagName string
	if cmdPrefix == "" {
		KeepStorageFlagName = "keep-storage"
	} else {
		KeepStorageFlagName = fmt.Sprintf("%v.keep-storage", cmdPrefix)
	}

	var KeepStorageFlagDefault int64

	_ = cmd.PersistentFlags().Int64(KeepStorageFlagName, KeepStorageFlagDefault, KeepStorageDescription)

	return nil
}

func retrieveOperationImageBuildPruneAllFlag(m *image.BuildPruneParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("all") {

		var AllFlagName string
		if cmdPrefix == "" {
			AllFlagName = "all"
		} else {
			AllFlagName = fmt.Sprintf("%v.all", cmdPrefix)
		}

		AllFlagValue, err := cmd.Flags().GetBool(AllFlagName)
		if err != nil {
			return err, false
		}
		m.All = &AllFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageBuildPruneFiltersFlag(m *image.BuildPruneParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filters") {

		var FiltersFlagName string
		if cmdPrefix == "" {
			FiltersFlagName = "filters"
		} else {
			FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
		}

		FiltersFlagValue, err := cmd.Flags().GetString(FiltersFlagName)
		if err != nil {
			return err, false
		}
		m.Filters = &FiltersFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageBuildPruneKeepStorageFlag(m *image.BuildPruneParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("keep-storage") {

		var KeepStorageFlagName string
		if cmdPrefix == "" {
			KeepStorageFlagName = "keep-storage"
		} else {
			KeepStorageFlagName = fmt.Sprintf("%v.keep-storage", cmdPrefix)
		}

		KeepStorageFlagValue, err := cmd.Flags().GetInt64(KeepStorageFlagName)
		if err != nil {
			return err, false
		}
		m.KeepStorage = &KeepStorageFlagValue

	}
	return nil, retAdded
}

// parseOperationImageBuildPruneResult parses request result and return the string content
func parseOperationImageBuildPruneResult(resp0 *image.BuildPruneOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*image.BuildPruneOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*image.BuildPruneInternalServerError)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelBuildPruneOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBuildPruneOKBodyCachesDeleted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildPruneOKBodySpaceReclaimed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuildPruneOKBodyCachesDeleted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: CachesDeleted []string array type is not supported by go-swagger cli yet

	return nil
}

func registerBuildPruneOKBodySpaceReclaimed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SpaceReclaimedDescription := `Disk space reclaimed in bytes`

	var SpaceReclaimedFlagName string
	if cmdPrefix == "" {
		SpaceReclaimedFlagName = "SpaceReclaimed"
	} else {
		SpaceReclaimedFlagName = fmt.Sprintf("%v.SpaceReclaimed", cmdPrefix)
	}

	var SpaceReclaimedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SpaceReclaimedFlagName, SpaceReclaimedFlagDefault, SpaceReclaimedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBuildPruneOKBodyFlags(depth int, m *image.BuildPruneOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CachesDeletedAdded := retrieveBuildPruneOKBodyCachesDeletedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CachesDeletedAdded

	err, SpaceReclaimedAdded := retrieveBuildPruneOKBodySpaceReclaimedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceReclaimedAdded

	return nil, retAdded
}

func retrieveBuildPruneOKBodyCachesDeletedFlags(depth int, m *image.BuildPruneOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CachesDeletedFlagName := fmt.Sprintf("%v.CachesDeleted", cmdPrefix)
	if cmd.Flags().Changed(CachesDeletedFlagName) {
		// warning: CachesDeleted array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBuildPruneOKBodySpaceReclaimedFlags(depth int, m *image.BuildPruneOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SpaceReclaimedFlagName := fmt.Sprintf("%v.SpaceReclaimed", cmdPrefix)
	if cmd.Flags().Changed(SpaceReclaimedFlagName) {

		var SpaceReclaimedFlagName string
		if cmdPrefix == "" {
			SpaceReclaimedFlagName = "SpaceReclaimed"
		} else {
			SpaceReclaimedFlagName = fmt.Sprintf("%v.SpaceReclaimed", cmdPrefix)
		}

		SpaceReclaimedFlagValue, err := cmd.Flags().GetInt64(SpaceReclaimedFlagName)
		if err != nil {
			return err, false
		}
		m.SpaceReclaimed = SpaceReclaimedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
