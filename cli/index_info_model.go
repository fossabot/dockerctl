// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for IndexInfo

// register flags to command
func registerModelIndexInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIndexInfoMirrors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexInfoName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexInfoOfficial(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIndexInfoSecure(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIndexInfoMirrors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Mirrors []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIndexInfoName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Name of the registry, such as "docker.io".
`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerIndexInfoOfficial(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OfficialDescription := `Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
`

	var OfficialFlagName string
	if cmdPrefix == "" {
		OfficialFlagName = "Official"
	} else {
		OfficialFlagName = fmt.Sprintf("%v.Official", cmdPrefix)
	}

	var OfficialFlagDefault bool

	_ = cmd.PersistentFlags().Bool(OfficialFlagName, OfficialFlagDefault, OfficialDescription)

	return nil
}

func registerIndexInfoSecure(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SecureDescription := `Indicates if the registry is part of the list of insecure
registries.

If ` + "`" + `false` + "`" + `, the registry is insecure. Insecure registries accept
un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from
unknown CAs) communication.

> **Warning**: Insecure registries can be useful when running a local
> registry. However, because its use creates security vulnerabilities
> it should ONLY be enabled for testing purposes. For increased
> security, users should add their CA to their system's list of
> trusted CAs instead of enabling this option.
`

	var SecureFlagName string
	if cmdPrefix == "" {
		SecureFlagName = "Secure"
	} else {
		SecureFlagName = fmt.Sprintf("%v.Secure", cmdPrefix)
	}

	var SecureFlagDefault bool

	_ = cmd.PersistentFlags().Bool(SecureFlagName, SecureFlagDefault, SecureDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIndexInfoFlags(depth int, m *models.IndexInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MirrorsAdded := retrieveIndexInfoMirrorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MirrorsAdded

	err, NameAdded := retrieveIndexInfoNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OfficialAdded := retrieveIndexInfoOfficialFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OfficialAdded

	err, SecureAdded := retrieveIndexInfoSecureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SecureAdded

	return nil, retAdded
}

func retrieveIndexInfoMirrorsFlags(depth int, m *models.IndexInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MirrorsFlagName := fmt.Sprintf("%v.Mirrors", cmdPrefix)
	if cmd.Flags().Changed(MirrorsFlagName) {
		// warning: Mirrors array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIndexInfoNameFlags(depth int, m *models.IndexInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexInfoOfficialFlags(depth int, m *models.IndexInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OfficialFlagName := fmt.Sprintf("%v.Official", cmdPrefix)
	if cmd.Flags().Changed(OfficialFlagName) {

		var OfficialFlagName string
		if cmdPrefix == "" {
			OfficialFlagName = "Official"
		} else {
			OfficialFlagName = fmt.Sprintf("%v.Official", cmdPrefix)
		}

		OfficialFlagValue, err := cmd.Flags().GetBool(OfficialFlagName)
		if err != nil {
			return err, false
		}
		m.Official = OfficialFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIndexInfoSecureFlags(depth int, m *models.IndexInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SecureFlagName := fmt.Sprintf("%v.Secure", cmdPrefix)
	if cmd.Flags().Changed(SecureFlagName) {

		var SecureFlagName string
		if cmdPrefix == "" {
			SecureFlagName = "Secure"
		} else {
			SecureFlagName = fmt.Sprintf("%v.Secure", cmdPrefix)
		}

		SecureFlagValue, err := cmd.Flags().GetBool(SecureFlagName)
		if err != nil {
			return err, false
		}
		m.Secure = SecureFlagValue

		retAdded = true
	}

	return nil, retAdded
}
