// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for ClusterInfo

// register flags to command
func registerModelClusterInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerClusterInfoCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterInfoDataPathPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterInfoDefaultAddrPool(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterInfoID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterInfoRootRotationInProgress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterInfoSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterInfoSubnetSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterInfoTLSInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterInfoUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerClusterInfoVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerClusterInfoCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedAtDescription := `Date and time at which the swarm was initialised in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
`

	var CreatedAtFlagName string
	if cmdPrefix == "" {
		CreatedAtFlagName = "CreatedAt"
	} else {
		CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	var CreatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(CreatedAtFlagName, CreatedAtFlagDefault, CreatedAtDescription)

	return nil
}

func registerClusterInfoDataPathPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive DataPathPort uint32 is not supported by go-swagger cli yet

	return nil
}

func registerClusterInfoDefaultAddrPool(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: DefaultAddrPool []string array type is not supported by go-swagger cli yet

	return nil
}

func registerClusterInfoID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := `The ID of the swarm.`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "ID"
	} else {
		IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerClusterInfoRootRotationInProgress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RootRotationInProgressDescription := `Whether there is currently a root CA rotation in progress for the swarm`

	var RootRotationInProgressFlagName string
	if cmdPrefix == "" {
		RootRotationInProgressFlagName = "RootRotationInProgress"
	} else {
		RootRotationInProgressFlagName = fmt.Sprintf("%v.RootRotationInProgress", cmdPrefix)
	}

	var RootRotationInProgressFlagDefault bool

	_ = cmd.PersistentFlags().Bool(RootRotationInProgressFlagName, RootRotationInProgressFlagDefault, RootRotationInProgressDescription)

	return nil
}

func registerClusterInfoSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var SpecFlagName string
	if cmdPrefix == "" {
		SpecFlagName = "Spec"
	} else {
		SpecFlagName = fmt.Sprintf("%v.Spec", cmdPrefix)
	}

	if err := registerModelSwarmSpecFlags(depth+1, SpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerClusterInfoSubnetSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive SubnetSize uint32 is not supported by go-swagger cli yet

	return nil
}

func registerClusterInfoTLSInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var TLSInfoFlagName string
	if cmdPrefix == "" {
		TLSInfoFlagName = "TLSInfo"
	} else {
		TLSInfoFlagName = fmt.Sprintf("%v.TLSInfo", cmdPrefix)
	}

	if err := registerModelTLSInfoFlags(depth+1, TLSInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerClusterInfoUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UpdatedAtDescription := `Date and time at which the swarm was last updated in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
`

	var UpdatedAtFlagName string
	if cmdPrefix == "" {
		UpdatedAtFlagName = "UpdatedAt"
	} else {
		UpdatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	}

	var UpdatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(UpdatedAtFlagName, UpdatedAtFlagDefault, UpdatedAtDescription)

	return nil
}

func registerClusterInfoVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var VersionFlagName string
	if cmdPrefix == "" {
		VersionFlagName = "Version"
	} else {
		VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	if err := registerModelObjectVersionFlags(depth+1, VersionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelClusterInfoFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CreatedAtAdded := retrieveClusterInfoCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAtAdded

	err, DataPathPortAdded := retrieveClusterInfoDataPathPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataPathPortAdded

	err, DefaultAddrPoolAdded := retrieveClusterInfoDefaultAddrPoolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DefaultAddrPoolAdded

	err, IDAdded := retrieveClusterInfoIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, RootRotationInProgressAdded := retrieveClusterInfoRootRotationInProgressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RootRotationInProgressAdded

	err, SpecAdded := retrieveClusterInfoSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpecAdded

	err, SubnetSizeAdded := retrieveClusterInfoSubnetSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubnetSizeAdded

	err, TLSInfoAdded := retrieveClusterInfoTLSInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TLSInfoAdded

	err, UpdatedAtAdded := retrieveClusterInfoUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdatedAtAdded

	err, VersionAdded := retrieveClusterInfoVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveClusterInfoCreatedAtFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(CreatedAtFlagName) {

		var CreatedAtFlagName string
		if cmdPrefix == "" {
			CreatedAtFlagName = "CreatedAt"
		} else {
			CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		CreatedAtFlagValue, err := cmd.Flags().GetString(CreatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = CreatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveClusterInfoDataPathPortFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DataPathPortFlagName := fmt.Sprintf("%v.DataPathPort", cmdPrefix)
	if cmd.Flags().Changed(DataPathPortFlagName) {

		// warning: primitive DataPathPort uint32 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveClusterInfoDefaultAddrPoolFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DefaultAddrPoolFlagName := fmt.Sprintf("%v.DefaultAddrPool", cmdPrefix)
	if cmd.Flags().Changed(DefaultAddrPoolFlagName) {
		// warning: DefaultAddrPool array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveClusterInfoIDFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "ID"
		} else {
			IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveClusterInfoRootRotationInProgressFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RootRotationInProgressFlagName := fmt.Sprintf("%v.RootRotationInProgress", cmdPrefix)
	if cmd.Flags().Changed(RootRotationInProgressFlagName) {

		var RootRotationInProgressFlagName string
		if cmdPrefix == "" {
			RootRotationInProgressFlagName = "RootRotationInProgress"
		} else {
			RootRotationInProgressFlagName = fmt.Sprintf("%v.RootRotationInProgress", cmdPrefix)
		}

		RootRotationInProgressFlagValue, err := cmd.Flags().GetBool(RootRotationInProgressFlagName)
		if err != nil {
			return err, false
		}
		m.RootRotationInProgress = RootRotationInProgressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveClusterInfoSpecFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SpecFlagName := fmt.Sprintf("%v.Spec", cmdPrefix)
	if cmd.Flags().Changed(SpecFlagName) {
		// info: complex object Spec SwarmSpec is retrieved outside this Changed() block
	}
	SpecFlagValue := m.Spec
	if swag.IsZero(SpecFlagValue) {
		SpecFlagValue = &models.SwarmSpec{}
	}

	err, SpecAdded := retrieveModelSwarmSpecFlags(depth+1, SpecFlagValue, SpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpecAdded
	if SpecAdded {
		m.Spec = SpecFlagValue
	}

	return nil, retAdded
}

func retrieveClusterInfoSubnetSizeFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SubnetSizeFlagName := fmt.Sprintf("%v.SubnetSize", cmdPrefix)
	if cmd.Flags().Changed(SubnetSizeFlagName) {

		// warning: primitive SubnetSize uint32 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveClusterInfoTLSInfoFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TLSInfoFlagName := fmt.Sprintf("%v.TLSInfo", cmdPrefix)
	if cmd.Flags().Changed(TLSInfoFlagName) {
		// info: complex object TLSInfo TLSInfo is retrieved outside this Changed() block
	}
	TLSInfoFlagValue := m.TLSInfo
	if swag.IsZero(TLSInfoFlagValue) {
		TLSInfoFlagValue = &models.TLSInfo{}
	}

	err, TLSInfoAdded := retrieveModelTLSInfoFlags(depth+1, TLSInfoFlagValue, TLSInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TLSInfoAdded
	if TLSInfoAdded {
		m.TLSInfo = TLSInfoFlagValue
	}

	return nil, retAdded
}

func retrieveClusterInfoUpdatedAtFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UpdatedAtFlagName := fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	if cmd.Flags().Changed(UpdatedAtFlagName) {

		var UpdatedAtFlagName string
		if cmdPrefix == "" {
			UpdatedAtFlagName = "UpdatedAt"
		} else {
			UpdatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
		}

		UpdatedAtFlagValue, err := cmd.Flags().GetString(UpdatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = UpdatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveClusterInfoVersionFlags(depth int, m *models.ClusterInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VersionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(VersionFlagName) {
		// info: complex object Version ObjectVersion is retrieved outside this Changed() block
	}
	VersionFlagValue := m.Version
	if swag.IsZero(VersionFlagValue) {
		VersionFlagValue = &models.ObjectVersion{}
	}

	err, VersionAdded := retrieveModelObjectVersionFlags(depth+1, VersionFlagValue, VersionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded
	if VersionAdded {
		m.Version = VersionFlagValue
	}

	return nil, retAdded
}
