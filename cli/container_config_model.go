// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for ContainerConfig

// register flags to command
func registerModelContainerConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerConfigArgsEscaped(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigAttachStderr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigAttachStdin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigAttachStdout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigCmd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigDomainname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigEntrypoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigExposedPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigHealthcheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigMacAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigNetworkDisabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigOnBuild(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigOpenStdin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigShell(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigStdinOnce(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigStopSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigStopTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigTty(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigVolumes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigWorkingDir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerConfigArgsEscaped(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ArgsEscapedDescription := `Command is already escaped (Windows only)`

	var ArgsEscapedFlagName string
	if cmdPrefix == "" {
		ArgsEscapedFlagName = "ArgsEscaped"
	} else {
		ArgsEscapedFlagName = fmt.Sprintf("%v.ArgsEscaped", cmdPrefix)
	}

	var ArgsEscapedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ArgsEscapedFlagName, ArgsEscapedFlagDefault, ArgsEscapedDescription)

	return nil
}

func registerContainerConfigAttachStderr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AttachStderrDescription := `Whether to attach to ` + "`" + `stderr` + "`" + `.`

	var AttachStderrFlagName string
	if cmdPrefix == "" {
		AttachStderrFlagName = "AttachStderr"
	} else {
		AttachStderrFlagName = fmt.Sprintf("%v.AttachStderr", cmdPrefix)
	}

	var AttachStderrFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(AttachStderrFlagName, AttachStderrFlagDefault, AttachStderrDescription)

	return nil
}

func registerContainerConfigAttachStdin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AttachStdinDescription := `Whether to attach to ` + "`" + `stdin` + "`" + `.`

	var AttachStdinFlagName string
	if cmdPrefix == "" {
		AttachStdinFlagName = "AttachStdin"
	} else {
		AttachStdinFlagName = fmt.Sprintf("%v.AttachStdin", cmdPrefix)
	}

	var AttachStdinFlagDefault bool

	_ = cmd.PersistentFlags().Bool(AttachStdinFlagName, AttachStdinFlagDefault, AttachStdinDescription)

	return nil
}

func registerContainerConfigAttachStdout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AttachStdoutDescription := `Whether to attach to ` + "`" + `stdout` + "`" + `.`

	var AttachStdoutFlagName string
	if cmdPrefix == "" {
		AttachStdoutFlagName = "AttachStdout"
	} else {
		AttachStdoutFlagName = fmt.Sprintf("%v.AttachStdout", cmdPrefix)
	}

	var AttachStdoutFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(AttachStdoutFlagName, AttachStdoutFlagDefault, AttachStdoutDescription)

	return nil
}

func registerContainerConfigCmd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Cmd []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigDomainname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DomainnameDescription := `The domain name to use for the container.`

	var DomainnameFlagName string
	if cmdPrefix == "" {
		DomainnameFlagName = "Domainname"
	} else {
		DomainnameFlagName = fmt.Sprintf("%v.Domainname", cmdPrefix)
	}

	var DomainnameFlagDefault string

	_ = cmd.PersistentFlags().String(DomainnameFlagName, DomainnameFlagDefault, DomainnameDescription)

	return nil
}

func registerContainerConfigEntrypoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Entrypoint []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Env []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigExposedPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ExposedPorts map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigHealthcheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var HealthcheckFlagName string
	if cmdPrefix == "" {
		HealthcheckFlagName = "Healthcheck"
	} else {
		HealthcheckFlagName = fmt.Sprintf("%v.Healthcheck", cmdPrefix)
	}

	if err := registerModelHealthConfigFlags(depth+1, HealthcheckFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerConfigHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HostnameDescription := `The hostname to use for the container, as a valid RFC 1123 hostname.`

	var HostnameFlagName string
	if cmdPrefix == "" {
		HostnameFlagName = "Hostname"
	} else {
		HostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
	}

	var HostnameFlagDefault string

	_ = cmd.PersistentFlags().String(HostnameFlagName, HostnameFlagDefault, HostnameDescription)

	return nil
}

func registerContainerConfigImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ImageDescription := `The name of the image to use when creating the container`

	var ImageFlagName string
	if cmdPrefix == "" {
		ImageFlagName = "Image"
	} else {
		ImageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
	}

	var ImageFlagDefault string

	_ = cmd.PersistentFlags().String(ImageFlagName, ImageFlagDefault, ImageDescription)

	return nil
}

func registerContainerConfigLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigMacAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MacAddressDescription := `MAC address of the container.`

	var MacAddressFlagName string
	if cmdPrefix == "" {
		MacAddressFlagName = "MacAddress"
	} else {
		MacAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
	}

	var MacAddressFlagDefault string

	_ = cmd.PersistentFlags().String(MacAddressFlagName, MacAddressFlagDefault, MacAddressDescription)

	return nil
}

func registerContainerConfigNetworkDisabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NetworkDisabledDescription := `Disable networking for the container.`

	var NetworkDisabledFlagName string
	if cmdPrefix == "" {
		NetworkDisabledFlagName = "NetworkDisabled"
	} else {
		NetworkDisabledFlagName = fmt.Sprintf("%v.NetworkDisabled", cmdPrefix)
	}

	var NetworkDisabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(NetworkDisabledFlagName, NetworkDisabledFlagDefault, NetworkDisabledDescription)

	return nil
}

func registerContainerConfigOnBuild(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: OnBuild []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigOpenStdin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OpenStdinDescription := `Open ` + "`" + `stdin` + "`" + ``

	var OpenStdinFlagName string
	if cmdPrefix == "" {
		OpenStdinFlagName = "OpenStdin"
	} else {
		OpenStdinFlagName = fmt.Sprintf("%v.OpenStdin", cmdPrefix)
	}

	var OpenStdinFlagDefault bool

	_ = cmd.PersistentFlags().Bool(OpenStdinFlagName, OpenStdinFlagDefault, OpenStdinDescription)

	return nil
}

func registerContainerConfigShell(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Shell []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigStdinOnce(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StdinOnceDescription := `Close ` + "`" + `stdin` + "`" + ` after one attached client disconnects`

	var StdinOnceFlagName string
	if cmdPrefix == "" {
		StdinOnceFlagName = "StdinOnce"
	} else {
		StdinOnceFlagName = fmt.Sprintf("%v.StdinOnce", cmdPrefix)
	}

	var StdinOnceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StdinOnceFlagName, StdinOnceFlagDefault, StdinOnceDescription)

	return nil
}

func registerContainerConfigStopSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StopSignalDescription := `Signal to stop a container as a string or unsigned integer.`

	var StopSignalFlagName string
	if cmdPrefix == "" {
		StopSignalFlagName = "StopSignal"
	} else {
		StopSignalFlagName = fmt.Sprintf("%v.StopSignal", cmdPrefix)
	}

	var StopSignalFlagDefault string = "SIGTERM"

	_ = cmd.PersistentFlags().String(StopSignalFlagName, StopSignalFlagDefault, StopSignalDescription)

	return nil
}

func registerContainerConfigStopTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StopTimeoutDescription := `Timeout to stop a container in seconds.`

	var StopTimeoutFlagName string
	if cmdPrefix == "" {
		StopTimeoutFlagName = "StopTimeout"
	} else {
		StopTimeoutFlagName = fmt.Sprintf("%v.StopTimeout", cmdPrefix)
	}

	var StopTimeoutFlagDefault int64 = 10

	_ = cmd.PersistentFlags().Int64(StopTimeoutFlagName, StopTimeoutFlagDefault, StopTimeoutDescription)

	return nil
}

func registerContainerConfigTty(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TtyDescription := `Attach standard streams to a TTY, including ` + "`" + `stdin` + "`" + ` if it is not closed.`

	var TtyFlagName string
	if cmdPrefix == "" {
		TtyFlagName = "Tty"
	} else {
		TtyFlagName = fmt.Sprintf("%v.Tty", cmdPrefix)
	}

	var TtyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(TtyFlagName, TtyFlagDefault, TtyDescription)

	return nil
}

func registerContainerConfigUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UserDescription := `The user that commands are run as inside the container.`

	var UserFlagName string
	if cmdPrefix == "" {
		UserFlagName = "User"
	} else {
		UserFlagName = fmt.Sprintf("%v.User", cmdPrefix)
	}

	var UserFlagDefault string

	_ = cmd.PersistentFlags().String(UserFlagName, UserFlagDefault, UserDescription)

	return nil
}

func registerContainerConfigVolumes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Volumes map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigWorkingDir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	WorkingDirDescription := `The working directory for commands to run in.`

	var WorkingDirFlagName string
	if cmdPrefix == "" {
		WorkingDirFlagName = "WorkingDir"
	} else {
		WorkingDirFlagName = fmt.Sprintf("%v.WorkingDir", cmdPrefix)
	}

	var WorkingDirFlagDefault string

	_ = cmd.PersistentFlags().String(WorkingDirFlagName, WorkingDirFlagDefault, WorkingDirDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerConfigFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ArgsEscapedAdded := retrieveContainerConfigArgsEscapedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArgsEscapedAdded

	err, AttachStderrAdded := retrieveContainerConfigAttachStderrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttachStderrAdded

	err, AttachStdinAdded := retrieveContainerConfigAttachStdinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttachStdinAdded

	err, AttachStdoutAdded := retrieveContainerConfigAttachStdoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttachStdoutAdded

	err, CmdAdded := retrieveContainerConfigCmdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CmdAdded

	err, DomainnameAdded := retrieveContainerConfigDomainnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DomainnameAdded

	err, EntrypointAdded := retrieveContainerConfigEntrypointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EntrypointAdded

	err, EnvAdded := retrieveContainerConfigEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnvAdded

	err, ExposedPortsAdded := retrieveContainerConfigExposedPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExposedPortsAdded

	err, HealthcheckAdded := retrieveContainerConfigHealthcheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HealthcheckAdded

	err, HostnameAdded := retrieveContainerConfigHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostnameAdded

	err, ImageAdded := retrieveContainerConfigImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ImageAdded

	err, LabelsAdded := retrieveContainerConfigLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, MacAddressAdded := retrieveContainerConfigMacAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MacAddressAdded

	err, NetworkDisabledAdded := retrieveContainerConfigNetworkDisabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkDisabledAdded

	err, OnBuildAdded := retrieveContainerConfigOnBuildFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OnBuildAdded

	err, OpenStdinAdded := retrieveContainerConfigOpenStdinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OpenStdinAdded

	err, ShellAdded := retrieveContainerConfigShellFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ShellAdded

	err, StdinOnceAdded := retrieveContainerConfigStdinOnceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StdinOnceAdded

	err, StopSignalAdded := retrieveContainerConfigStopSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StopSignalAdded

	err, StopTimeoutAdded := retrieveContainerConfigStopTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StopTimeoutAdded

	err, TtyAdded := retrieveContainerConfigTtyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TtyAdded

	err, UserAdded := retrieveContainerConfigUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UserAdded

	err, VolumesAdded := retrieveContainerConfigVolumesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumesAdded

	err, WorkingDirAdded := retrieveContainerConfigWorkingDirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WorkingDirAdded

	return nil, retAdded
}

func retrieveContainerConfigArgsEscapedFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ArgsEscapedFlagName := fmt.Sprintf("%v.ArgsEscaped", cmdPrefix)
	if cmd.Flags().Changed(ArgsEscapedFlagName) {

		var ArgsEscapedFlagName string
		if cmdPrefix == "" {
			ArgsEscapedFlagName = "ArgsEscaped"
		} else {
			ArgsEscapedFlagName = fmt.Sprintf("%v.ArgsEscaped", cmdPrefix)
		}

		ArgsEscapedFlagValue, err := cmd.Flags().GetBool(ArgsEscapedFlagName)
		if err != nil {
			return err, false
		}
		m.ArgsEscaped = ArgsEscapedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigAttachStderrFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AttachStderrFlagName := fmt.Sprintf("%v.AttachStderr", cmdPrefix)
	if cmd.Flags().Changed(AttachStderrFlagName) {

		var AttachStderrFlagName string
		if cmdPrefix == "" {
			AttachStderrFlagName = "AttachStderr"
		} else {
			AttachStderrFlagName = fmt.Sprintf("%v.AttachStderr", cmdPrefix)
		}

		AttachStderrFlagValue, err := cmd.Flags().GetBool(AttachStderrFlagName)
		if err != nil {
			return err, false
		}
		m.AttachStderr = &AttachStderrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigAttachStdinFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AttachStdinFlagName := fmt.Sprintf("%v.AttachStdin", cmdPrefix)
	if cmd.Flags().Changed(AttachStdinFlagName) {

		var AttachStdinFlagName string
		if cmdPrefix == "" {
			AttachStdinFlagName = "AttachStdin"
		} else {
			AttachStdinFlagName = fmt.Sprintf("%v.AttachStdin", cmdPrefix)
		}

		AttachStdinFlagValue, err := cmd.Flags().GetBool(AttachStdinFlagName)
		if err != nil {
			return err, false
		}
		m.AttachStdin = &AttachStdinFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigAttachStdoutFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AttachStdoutFlagName := fmt.Sprintf("%v.AttachStdout", cmdPrefix)
	if cmd.Flags().Changed(AttachStdoutFlagName) {

		var AttachStdoutFlagName string
		if cmdPrefix == "" {
			AttachStdoutFlagName = "AttachStdout"
		} else {
			AttachStdoutFlagName = fmt.Sprintf("%v.AttachStdout", cmdPrefix)
		}

		AttachStdoutFlagValue, err := cmd.Flags().GetBool(AttachStdoutFlagName)
		if err != nil {
			return err, false
		}
		m.AttachStdout = &AttachStdoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigCmdFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CmdFlagName := fmt.Sprintf("%v.Cmd", cmdPrefix)
	if cmd.Flags().Changed(CmdFlagName) {
		// warning: Cmd array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigDomainnameFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DomainnameFlagName := fmt.Sprintf("%v.Domainname", cmdPrefix)
	if cmd.Flags().Changed(DomainnameFlagName) {

		var DomainnameFlagName string
		if cmdPrefix == "" {
			DomainnameFlagName = "Domainname"
		} else {
			DomainnameFlagName = fmt.Sprintf("%v.Domainname", cmdPrefix)
		}

		DomainnameFlagValue, err := cmd.Flags().GetString(DomainnameFlagName)
		if err != nil {
			return err, false
		}
		m.Domainname = DomainnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigEntrypointFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EntrypointFlagName := fmt.Sprintf("%v.Entrypoint", cmdPrefix)
	if cmd.Flags().Changed(EntrypointFlagName) {
		// warning: Entrypoint array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigEnvFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EnvFlagName := fmt.Sprintf("%v.Env", cmdPrefix)
	if cmd.Flags().Changed(EnvFlagName) {
		// warning: Env array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigExposedPortsFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ExposedPortsFlagName := fmt.Sprintf("%v.ExposedPorts", cmdPrefix)
	if cmd.Flags().Changed(ExposedPortsFlagName) {
		// warning: ExposedPorts map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigHealthcheckFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HealthcheckFlagName := fmt.Sprintf("%v.Healthcheck", cmdPrefix)
	if cmd.Flags().Changed(HealthcheckFlagName) {
		// info: complex object Healthcheck HealthConfig is retrieved outside this Changed() block
	}
	HealthcheckFlagValue := m.Healthcheck
	if swag.IsZero(HealthcheckFlagValue) {
		HealthcheckFlagValue = &models.HealthConfig{}
	}

	err, HealthcheckAdded := retrieveModelHealthConfigFlags(depth+1, HealthcheckFlagValue, HealthcheckFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HealthcheckAdded
	if HealthcheckAdded {
		m.Healthcheck = HealthcheckFlagValue
	}

	return nil, retAdded
}

func retrieveContainerConfigHostnameFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostnameFlagName := fmt.Sprintf("%v.Hostname", cmdPrefix)
	if cmd.Flags().Changed(HostnameFlagName) {

		var HostnameFlagName string
		if cmdPrefix == "" {
			HostnameFlagName = "Hostname"
		} else {
			HostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
		}

		HostnameFlagValue, err := cmd.Flags().GetString(HostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = HostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigImageFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ImageFlagName := fmt.Sprintf("%v.Image", cmdPrefix)
	if cmd.Flags().Changed(ImageFlagName) {

		var ImageFlagName string
		if cmdPrefix == "" {
			ImageFlagName = "Image"
		} else {
			ImageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
		}

		ImageFlagValue, err := cmd.Flags().GetString(ImageFlagName)
		if err != nil {
			return err, false
		}
		m.Image = ImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigLabelsFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigMacAddressFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MacAddressFlagName := fmt.Sprintf("%v.MacAddress", cmdPrefix)
	if cmd.Flags().Changed(MacAddressFlagName) {

		var MacAddressFlagName string
		if cmdPrefix == "" {
			MacAddressFlagName = "MacAddress"
		} else {
			MacAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
		}

		MacAddressFlagValue, err := cmd.Flags().GetString(MacAddressFlagName)
		if err != nil {
			return err, false
		}
		m.MacAddress = MacAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigNetworkDisabledFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworkDisabledFlagName := fmt.Sprintf("%v.NetworkDisabled", cmdPrefix)
	if cmd.Flags().Changed(NetworkDisabledFlagName) {

		var NetworkDisabledFlagName string
		if cmdPrefix == "" {
			NetworkDisabledFlagName = "NetworkDisabled"
		} else {
			NetworkDisabledFlagName = fmt.Sprintf("%v.NetworkDisabled", cmdPrefix)
		}

		NetworkDisabledFlagValue, err := cmd.Flags().GetBool(NetworkDisabledFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkDisabled = NetworkDisabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigOnBuildFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OnBuildFlagName := fmt.Sprintf("%v.OnBuild", cmdPrefix)
	if cmd.Flags().Changed(OnBuildFlagName) {
		// warning: OnBuild array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigOpenStdinFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OpenStdinFlagName := fmt.Sprintf("%v.OpenStdin", cmdPrefix)
	if cmd.Flags().Changed(OpenStdinFlagName) {

		var OpenStdinFlagName string
		if cmdPrefix == "" {
			OpenStdinFlagName = "OpenStdin"
		} else {
			OpenStdinFlagName = fmt.Sprintf("%v.OpenStdin", cmdPrefix)
		}

		OpenStdinFlagValue, err := cmd.Flags().GetBool(OpenStdinFlagName)
		if err != nil {
			return err, false
		}
		m.OpenStdin = &OpenStdinFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigShellFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ShellFlagName := fmt.Sprintf("%v.Shell", cmdPrefix)
	if cmd.Flags().Changed(ShellFlagName) {
		// warning: Shell array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigStdinOnceFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StdinOnceFlagName := fmt.Sprintf("%v.StdinOnce", cmdPrefix)
	if cmd.Flags().Changed(StdinOnceFlagName) {

		var StdinOnceFlagName string
		if cmdPrefix == "" {
			StdinOnceFlagName = "StdinOnce"
		} else {
			StdinOnceFlagName = fmt.Sprintf("%v.StdinOnce", cmdPrefix)
		}

		StdinOnceFlagValue, err := cmd.Flags().GetBool(StdinOnceFlagName)
		if err != nil {
			return err, false
		}
		m.StdinOnce = &StdinOnceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigStopSignalFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StopSignalFlagName := fmt.Sprintf("%v.StopSignal", cmdPrefix)
	if cmd.Flags().Changed(StopSignalFlagName) {

		var StopSignalFlagName string
		if cmdPrefix == "" {
			StopSignalFlagName = "StopSignal"
		} else {
			StopSignalFlagName = fmt.Sprintf("%v.StopSignal", cmdPrefix)
		}

		StopSignalFlagValue, err := cmd.Flags().GetString(StopSignalFlagName)
		if err != nil {
			return err, false
		}
		m.StopSignal = &StopSignalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigStopTimeoutFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StopTimeoutFlagName := fmt.Sprintf("%v.StopTimeout", cmdPrefix)
	if cmd.Flags().Changed(StopTimeoutFlagName) {

		var StopTimeoutFlagName string
		if cmdPrefix == "" {
			StopTimeoutFlagName = "StopTimeout"
		} else {
			StopTimeoutFlagName = fmt.Sprintf("%v.StopTimeout", cmdPrefix)
		}

		StopTimeoutFlagValue, err := cmd.Flags().GetInt64(StopTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.StopTimeout = &StopTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigTtyFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TtyFlagName := fmt.Sprintf("%v.Tty", cmdPrefix)
	if cmd.Flags().Changed(TtyFlagName) {

		var TtyFlagName string
		if cmdPrefix == "" {
			TtyFlagName = "Tty"
		} else {
			TtyFlagName = fmt.Sprintf("%v.Tty", cmdPrefix)
		}

		TtyFlagValue, err := cmd.Flags().GetBool(TtyFlagName)
		if err != nil {
			return err, false
		}
		m.Tty = &TtyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigUserFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UserFlagName := fmt.Sprintf("%v.User", cmdPrefix)
	if cmd.Flags().Changed(UserFlagName) {

		var UserFlagName string
		if cmdPrefix == "" {
			UserFlagName = "User"
		} else {
			UserFlagName = fmt.Sprintf("%v.User", cmdPrefix)
		}

		UserFlagValue, err := cmd.Flags().GetString(UserFlagName)
		if err != nil {
			return err, false
		}
		m.User = UserFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigVolumesFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VolumesFlagName := fmt.Sprintf("%v.Volumes", cmdPrefix)
	if cmd.Flags().Changed(VolumesFlagName) {
		// warning: Volumes map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigWorkingDirFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	WorkingDirFlagName := fmt.Sprintf("%v.WorkingDir", cmdPrefix)
	if cmd.Flags().Changed(WorkingDirFlagName) {

		var WorkingDirFlagName string
		if cmdPrefix == "" {
			WorkingDirFlagName = "WorkingDir"
		} else {
			WorkingDirFlagName = fmt.Sprintf("%v.WorkingDir", cmdPrefix)
		}

		WorkingDirFlagValue, err := cmd.Flags().GetString(WorkingDirFlagName)
		if err != nil {
			return err, false
		}
		m.WorkingDir = WorkingDirFlagValue

		retAdded = true
	}

	return nil, retAdded
}
