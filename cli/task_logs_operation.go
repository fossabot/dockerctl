// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/task"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTaskTaskLogsCmd returns a cmd to handle operation taskLogs
func makeOperationTaskTaskLogsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "TaskLogs",
		Short: `Get ` + "`" + `stdout` + "`" + ` and ` + "`" + `stderr` + "`" + ` logs from a task. See also [` + "`" + `/containers/{id}/logs` + "`" + `](#operation/ContainerLogs).

**Note**: This endpoint works only for services with the ` + "`" + `local` + "`" + `, ` + "`" + `json-file` + "`" + ` or ` + "`" + `journald` + "`" + ` logging drivers.
`,
		RunE: runOperationTaskTaskLogs,
	}

	if err := registerOperationTaskTaskLogsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTaskTaskLogs uses cmd flags to call endpoint api
func runOperationTaskTaskLogs(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := task.NewTaskLogsParams()
	if err, _ := retrieveOperationTaskTaskLogsDetailsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskTaskLogsFollowFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskTaskLogsIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskTaskLogsSinceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskTaskLogsStderrFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskTaskLogsStdoutFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskTaskLogsTailFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTaskTaskLogsTimestampsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTaskTaskLogsResult(appCli.Task.TaskLogs(params, &bytes.Buffer{}))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTaskTaskLogsParamFlags registers all flags needed to fill params
func registerOperationTaskTaskLogsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTaskTaskLogsDetailsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskTaskLogsFollowParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskTaskLogsIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskTaskLogsSinceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskTaskLogsStderrParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskTaskLogsStdoutParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskTaskLogsTailParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTaskTaskLogsTimestampsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTaskTaskLogsDetailsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	DetailsDescription := `Show task context and extra details provided to logs.`

	var DetailsFlagName string
	if cmdPrefix == "" {
		DetailsFlagName = "details"
	} else {
		DetailsFlagName = fmt.Sprintf("%v.details", cmdPrefix)
	}

	var DetailsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(DetailsFlagName, DetailsFlagDefault, DetailsDescription)

	return nil
}
func registerOperationTaskTaskLogsFollowParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	FollowDescription := `Keep connection after returning logs.`

	var FollowFlagName string
	if cmdPrefix == "" {
		FollowFlagName = "follow"
	} else {
		FollowFlagName = fmt.Sprintf("%v.follow", cmdPrefix)
	}

	var FollowFlagDefault bool

	_ = cmd.PersistentFlags().Bool(FollowFlagName, FollowFlagDefault, FollowDescription)

	return nil
}
func registerOperationTaskTaskLogsIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	IDDescription := `Required. ID of the task`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}
func registerOperationTaskTaskLogsSinceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	SinceDescription := `Only return logs since this time, as a UNIX timestamp`

	var SinceFlagName string
	if cmdPrefix == "" {
		SinceFlagName = "since"
	} else {
		SinceFlagName = fmt.Sprintf("%v.since", cmdPrefix)
	}

	var SinceFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SinceFlagName, SinceFlagDefault, SinceDescription)

	return nil
}
func registerOperationTaskTaskLogsStderrParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StderrDescription := `Return logs from ` + "`" + `stderr` + "`" + ``

	var StderrFlagName string
	if cmdPrefix == "" {
		StderrFlagName = "stderr"
	} else {
		StderrFlagName = fmt.Sprintf("%v.stderr", cmdPrefix)
	}

	var StderrFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StderrFlagName, StderrFlagDefault, StderrDescription)

	return nil
}
func registerOperationTaskTaskLogsStdoutParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StdoutDescription := `Return logs from ` + "`" + `stdout` + "`" + ``

	var StdoutFlagName string
	if cmdPrefix == "" {
		StdoutFlagName = "stdout"
	} else {
		StdoutFlagName = fmt.Sprintf("%v.stdout", cmdPrefix)
	}

	var StdoutFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StdoutFlagName, StdoutFlagDefault, StdoutDescription)

	return nil
}
func registerOperationTaskTaskLogsTailParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	TailDescription := `Only return this number of log lines from the end of the logs. Specify as an integer or ` + "`" + `all` + "`" + ` to output all log lines.`

	var TailFlagName string
	if cmdPrefix == "" {
		TailFlagName = "tail"
	} else {
		TailFlagName = fmt.Sprintf("%v.tail", cmdPrefix)
	}

	var TailFlagDefault string = "all"

	_ = cmd.PersistentFlags().String(TailFlagName, TailFlagDefault, TailDescription)

	return nil
}
func registerOperationTaskTaskLogsTimestampsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	TimestampsDescription := `Add timestamps to every log line`

	var TimestampsFlagName string
	if cmdPrefix == "" {
		TimestampsFlagName = "timestamps"
	} else {
		TimestampsFlagName = fmt.Sprintf("%v.timestamps", cmdPrefix)
	}

	var TimestampsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(TimestampsFlagName, TimestampsFlagDefault, TimestampsDescription)

	return nil
}

func retrieveOperationTaskTaskLogsDetailsFlag(m *task.TaskLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("details") {

		var DetailsFlagName string
		if cmdPrefix == "" {
			DetailsFlagName = "details"
		} else {
			DetailsFlagName = fmt.Sprintf("%v.details", cmdPrefix)
		}

		DetailsFlagValue, err := cmd.Flags().GetBool(DetailsFlagName)
		if err != nil {
			return err, false
		}
		m.Details = &DetailsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskTaskLogsFollowFlag(m *task.TaskLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("follow") {

		var FollowFlagName string
		if cmdPrefix == "" {
			FollowFlagName = "follow"
		} else {
			FollowFlagName = fmt.Sprintf("%v.follow", cmdPrefix)
		}

		FollowFlagValue, err := cmd.Flags().GetBool(FollowFlagName)
		if err != nil {
			return err, false
		}
		m.Follow = &FollowFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskTaskLogsIDFlag(m *task.TaskLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskTaskLogsSinceFlag(m *task.TaskLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("since") {

		var SinceFlagName string
		if cmdPrefix == "" {
			SinceFlagName = "since"
		} else {
			SinceFlagName = fmt.Sprintf("%v.since", cmdPrefix)
		}

		SinceFlagValue, err := cmd.Flags().GetInt64(SinceFlagName)
		if err != nil {
			return err, false
		}
		m.Since = &SinceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskTaskLogsStderrFlag(m *task.TaskLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stderr") {

		var StderrFlagName string
		if cmdPrefix == "" {
			StderrFlagName = "stderr"
		} else {
			StderrFlagName = fmt.Sprintf("%v.stderr", cmdPrefix)
		}

		StderrFlagValue, err := cmd.Flags().GetBool(StderrFlagName)
		if err != nil {
			return err, false
		}
		m.Stderr = &StderrFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskTaskLogsStdoutFlag(m *task.TaskLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stdout") {

		var StdoutFlagName string
		if cmdPrefix == "" {
			StdoutFlagName = "stdout"
		} else {
			StdoutFlagName = fmt.Sprintf("%v.stdout", cmdPrefix)
		}

		StdoutFlagValue, err := cmd.Flags().GetBool(StdoutFlagName)
		if err != nil {
			return err, false
		}
		m.Stdout = &StdoutFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskTaskLogsTailFlag(m *task.TaskLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tail") {

		var TailFlagName string
		if cmdPrefix == "" {
			TailFlagName = "tail"
		} else {
			TailFlagName = fmt.Sprintf("%v.tail", cmdPrefix)
		}

		TailFlagValue, err := cmd.Flags().GetString(TailFlagName)
		if err != nil {
			return err, false
		}
		m.Tail = &TailFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTaskTaskLogsTimestampsFlag(m *task.TaskLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("timestamps") {

		var TimestampsFlagName string
		if cmdPrefix == "" {
			TimestampsFlagName = "timestamps"
		} else {
			TimestampsFlagName = fmt.Sprintf("%v.timestamps", cmdPrefix)
		}

		TimestampsFlagValue, err := cmd.Flags().GetBool(TimestampsFlagName)
		if err != nil {
			return err, false
		}
		m.Timestamps = &TimestampsFlagValue

	}
	return nil, retAdded
}

// parseOperationTaskTaskLogsResult parses request result and return the string content
func parseOperationTaskTaskLogsResult(resp0 *task.TaskLogsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*task.TaskLogsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*task.TaskLogsNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*task.TaskLogsInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*task.TaskLogsServiceUnavailable)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
