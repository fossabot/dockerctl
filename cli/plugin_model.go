// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for Plugin

// register flags to command
func registerModelPluginFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginPluginReference(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ConfigFlagName string
	if cmdPrefix == "" {
		ConfigFlagName = "Config"
	} else {
		ConfigFlagName = fmt.Sprintf("%v.Config", cmdPrefix)
	}

	if err := registerModelPluginConfigFlags(depth+1, ConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	EnabledDescription := `Required. True if the plugin is running. False if the plugin is not running, only installed.`

	var EnabledFlagName string
	if cmdPrefix == "" {
		EnabledFlagName = "Enabled"
	} else {
		EnabledFlagName = fmt.Sprintf("%v.Enabled", cmdPrefix)
	}

	var EnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(EnabledFlagName, EnabledFlagDefault, EnabledDescription)

	return nil
}

func registerPluginID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := ``

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "Id"
	} else {
		IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerPluginName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Required. `

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerPluginPluginReference(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PluginReferenceDescription := `plugin remote reference used to push/pull the plugin`

	var PluginReferenceFlagName string
	if cmdPrefix == "" {
		PluginReferenceFlagName = "PluginReference"
	} else {
		PluginReferenceFlagName = fmt.Sprintf("%v.PluginReference", cmdPrefix)
	}

	var PluginReferenceFlagDefault string

	_ = cmd.PersistentFlags().String(PluginReferenceFlagName, PluginReferenceFlagDefault, PluginReferenceDescription)

	return nil
}

func registerPluginSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var SettingsFlagName string
	if cmdPrefix == "" {
		SettingsFlagName = "Settings"
	} else {
		SettingsFlagName = fmt.Sprintf("%v.Settings", cmdPrefix)
	}

	if err := registerModelPluginSettingsFlags(depth+1, SettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ConfigAdded := retrievePluginConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConfigAdded

	err, EnabledAdded := retrievePluginEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnabledAdded

	err, IDAdded := retrievePluginIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, NameAdded := retrievePluginNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, PluginReferenceAdded := retrievePluginPluginReferenceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PluginReferenceAdded

	err, SettingsAdded := retrievePluginSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SettingsAdded

	return nil, retAdded
}

func retrievePluginConfigFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConfigFlagName := fmt.Sprintf("%v.Config", cmdPrefix)
	if cmd.Flags().Changed(ConfigFlagName) {
		// info: complex object Config PluginConfig is retrieved outside this Changed() block
	}
	ConfigFlagValue := m.Config
	if swag.IsZero(ConfigFlagValue) {
		ConfigFlagValue = models.PluginConfig{}
	}

	err, ConfigAdded := retrieveModelPluginConfigFlags(depth+1, &ConfigFlagValue, ConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConfigAdded
	if ConfigAdded {
		m.Config = ConfigFlagValue
	}

	return nil, retAdded
}

func retrievePluginEnabledFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EnabledFlagName := fmt.Sprintf("%v.Enabled", cmdPrefix)
	if cmd.Flags().Changed(EnabledFlagName) {

		var EnabledFlagName string
		if cmdPrefix == "" {
			EnabledFlagName = "Enabled"
		} else {
			EnabledFlagName = fmt.Sprintf("%v.Enabled", cmdPrefix)
		}

		EnabledFlagValue, err := cmd.Flags().GetBool(EnabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = EnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginIDFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "Id"
		} else {
			IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginNameFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginPluginReferenceFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PluginReferenceFlagName := fmt.Sprintf("%v.PluginReference", cmdPrefix)
	if cmd.Flags().Changed(PluginReferenceFlagName) {

		var PluginReferenceFlagName string
		if cmdPrefix == "" {
			PluginReferenceFlagName = "PluginReference"
		} else {
			PluginReferenceFlagName = fmt.Sprintf("%v.PluginReference", cmdPrefix)
		}

		PluginReferenceFlagValue, err := cmd.Flags().GetString(PluginReferenceFlagName)
		if err != nil {
			return err, false
		}
		m.PluginReference = PluginReferenceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginSettingsFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SettingsFlagName := fmt.Sprintf("%v.Settings", cmdPrefix)
	if cmd.Flags().Changed(SettingsFlagName) {
		// info: complex object Settings PluginSettings is retrieved outside this Changed() block
	}
	SettingsFlagValue := m.Settings
	if swag.IsZero(SettingsFlagValue) {
		SettingsFlagValue = models.PluginSettings{}
	}

	err, SettingsAdded := retrieveModelPluginSettingsFlags(depth+1, &SettingsFlagValue, SettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SettingsAdded
	if SettingsAdded {
		m.Settings = SettingsFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for PluginConfig

// register flags to command
func registerModelPluginConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginConfigArgs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigDockerVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigDocumentation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigEntrypoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigInterface(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigIpcHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigLinux(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigMounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigNetwork(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigPidHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigPropagatedMount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigWorkDir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigRootfs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigArgs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ArgsFlagName string
	if cmdPrefix == "" {
		ArgsFlagName = "Args"
	} else {
		ArgsFlagName = fmt.Sprintf("%v.Args", cmdPrefix)
	}

	if err := registerModelPluginConfigArgsFlags(depth+1, ArgsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := `Required. `

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "Description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerPluginConfigDockerVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DockerVersionDescription := `Docker Version used to create the plugin`

	var DockerVersionFlagName string
	if cmdPrefix == "" {
		DockerVersionFlagName = "DockerVersion"
	} else {
		DockerVersionFlagName = fmt.Sprintf("%v.DockerVersion", cmdPrefix)
	}

	var DockerVersionFlagDefault string

	_ = cmd.PersistentFlags().String(DockerVersionFlagName, DockerVersionFlagDefault, DockerVersionDescription)

	return nil
}

func registerPluginConfigDocumentation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DocumentationDescription := `Required. `

	var DocumentationFlagName string
	if cmdPrefix == "" {
		DocumentationFlagName = "Documentation"
	} else {
		DocumentationFlagName = fmt.Sprintf("%v.Documentation", cmdPrefix)
	}

	var DocumentationFlagDefault string

	_ = cmd.PersistentFlags().String(DocumentationFlagName, DocumentationFlagDefault, DocumentationDescription)

	return nil
}

func registerPluginConfigEntrypoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Entrypoint []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginConfigEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Env []PluginEnv array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginConfigInterface(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var InterfaceFlagName string
	if cmdPrefix == "" {
		InterfaceFlagName = "Interface"
	} else {
		InterfaceFlagName = fmt.Sprintf("%v.Interface", cmdPrefix)
	}

	if err := registerModelPluginConfigInterfaceFlags(depth+1, InterfaceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigIpcHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IpcHostDescription := `Required. `

	var IpcHostFlagName string
	if cmdPrefix == "" {
		IpcHostFlagName = "IpcHost"
	} else {
		IpcHostFlagName = fmt.Sprintf("%v.IpcHost", cmdPrefix)
	}

	var IpcHostFlagDefault bool

	_ = cmd.PersistentFlags().Bool(IpcHostFlagName, IpcHostFlagDefault, IpcHostDescription)

	return nil
}

func registerPluginConfigLinux(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var LinuxFlagName string
	if cmdPrefix == "" {
		LinuxFlagName = "Linux"
	} else {
		LinuxFlagName = fmt.Sprintf("%v.Linux", cmdPrefix)
	}

	if err := registerModelPluginConfigLinuxFlags(depth+1, LinuxFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigMounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Mounts []PluginMount array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginConfigNetwork(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var NetworkFlagName string
	if cmdPrefix == "" {
		NetworkFlagName = "Network"
	} else {
		NetworkFlagName = fmt.Sprintf("%v.Network", cmdPrefix)
	}

	if err := registerModelPluginConfigNetworkFlags(depth+1, NetworkFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigPidHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PidHostDescription := `Required. `

	var PidHostFlagName string
	if cmdPrefix == "" {
		PidHostFlagName = "PidHost"
	} else {
		PidHostFlagName = fmt.Sprintf("%v.PidHost", cmdPrefix)
	}

	var PidHostFlagDefault bool

	_ = cmd.PersistentFlags().Bool(PidHostFlagName, PidHostFlagDefault, PidHostDescription)

	return nil
}

func registerPluginConfigPropagatedMount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PropagatedMountDescription := `Required. `

	var PropagatedMountFlagName string
	if cmdPrefix == "" {
		PropagatedMountFlagName = "PropagatedMount"
	} else {
		PropagatedMountFlagName = fmt.Sprintf("%v.PropagatedMount", cmdPrefix)
	}

	var PropagatedMountFlagDefault string

	_ = cmd.PersistentFlags().String(PropagatedMountFlagName, PropagatedMountFlagDefault, PropagatedMountDescription)

	return nil
}

func registerPluginConfigUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var UserFlagName string
	if cmdPrefix == "" {
		UserFlagName = "User"
	} else {
		UserFlagName = fmt.Sprintf("%v.User", cmdPrefix)
	}

	if err := registerModelPluginConfigUserFlags(depth+1, UserFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigWorkDir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	WorkDirDescription := `Required. `

	var WorkDirFlagName string
	if cmdPrefix == "" {
		WorkDirFlagName = "WorkDir"
	} else {
		WorkDirFlagName = fmt.Sprintf("%v.WorkDir", cmdPrefix)
	}

	var WorkDirFlagDefault string

	_ = cmd.PersistentFlags().String(WorkDirFlagName, WorkDirFlagDefault, WorkDirDescription)

	return nil
}

func registerPluginConfigRootfs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var RootfsFlagName string
	if cmdPrefix == "" {
		RootfsFlagName = "rootfs"
	} else {
		RootfsFlagName = fmt.Sprintf("%v.rootfs", cmdPrefix)
	}

	if err := registerModelPluginConfigRootfsFlags(depth+1, RootfsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginConfigFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ArgsAdded := retrievePluginConfigArgsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArgsAdded

	err, DescriptionAdded := retrievePluginConfigDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, DockerVersionAdded := retrievePluginConfigDockerVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DockerVersionAdded

	err, DocumentationAdded := retrievePluginConfigDocumentationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DocumentationAdded

	err, EntrypointAdded := retrievePluginConfigEntrypointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EntrypointAdded

	err, EnvAdded := retrievePluginConfigEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnvAdded

	err, InterfaceAdded := retrievePluginConfigInterfaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InterfaceAdded

	err, IpcHostAdded := retrievePluginConfigIpcHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IpcHostAdded

	err, LinuxAdded := retrievePluginConfigLinuxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinuxAdded

	err, MountsAdded := retrievePluginConfigMountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MountsAdded

	err, NetworkAdded := retrievePluginConfigNetworkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkAdded

	err, PidHostAdded := retrievePluginConfigPidHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PidHostAdded

	err, PropagatedMountAdded := retrievePluginConfigPropagatedMountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PropagatedMountAdded

	err, UserAdded := retrievePluginConfigUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UserAdded

	err, WorkDirAdded := retrievePluginConfigWorkDirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WorkDirAdded

	err, RootfsAdded := retrievePluginConfigRootfsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RootfsAdded

	return nil, retAdded
}

func retrievePluginConfigArgsFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ArgsFlagName := fmt.Sprintf("%v.Args", cmdPrefix)
	if cmd.Flags().Changed(ArgsFlagName) {
		// info: complex object Args PluginConfigArgs is retrieved outside this Changed() block
	}
	ArgsFlagValue := m.Args
	if swag.IsZero(ArgsFlagValue) {
		ArgsFlagValue = models.PluginConfigArgs{}
	}

	err, ArgsAdded := retrieveModelPluginConfigArgsFlags(depth+1, &ArgsFlagValue, ArgsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArgsAdded
	if ArgsAdded {
		m.Args = ArgsFlagValue
	}

	return nil, retAdded
}

func retrievePluginConfigDescriptionFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "Description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigDockerVersionFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DockerVersionFlagName := fmt.Sprintf("%v.DockerVersion", cmdPrefix)
	if cmd.Flags().Changed(DockerVersionFlagName) {

		var DockerVersionFlagName string
		if cmdPrefix == "" {
			DockerVersionFlagName = "DockerVersion"
		} else {
			DockerVersionFlagName = fmt.Sprintf("%v.DockerVersion", cmdPrefix)
		}

		DockerVersionFlagValue, err := cmd.Flags().GetString(DockerVersionFlagName)
		if err != nil {
			return err, false
		}
		m.DockerVersion = DockerVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigDocumentationFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DocumentationFlagName := fmt.Sprintf("%v.Documentation", cmdPrefix)
	if cmd.Flags().Changed(DocumentationFlagName) {

		var DocumentationFlagName string
		if cmdPrefix == "" {
			DocumentationFlagName = "Documentation"
		} else {
			DocumentationFlagName = fmt.Sprintf("%v.Documentation", cmdPrefix)
		}

		DocumentationFlagValue, err := cmd.Flags().GetString(DocumentationFlagName)
		if err != nil {
			return err, false
		}
		m.Documentation = DocumentationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigEntrypointFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EntrypointFlagName := fmt.Sprintf("%v.Entrypoint", cmdPrefix)
	if cmd.Flags().Changed(EntrypointFlagName) {
		// warning: Entrypoint array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginConfigEnvFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EnvFlagName := fmt.Sprintf("%v.Env", cmdPrefix)
	if cmd.Flags().Changed(EnvFlagName) {
		// warning: Env array type []PluginEnv is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginConfigInterfaceFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	InterfaceFlagName := fmt.Sprintf("%v.Interface", cmdPrefix)
	if cmd.Flags().Changed(InterfaceFlagName) {
		// info: complex object Interface PluginConfigInterface is retrieved outside this Changed() block
	}
	InterfaceFlagValue := m.Interface
	if swag.IsZero(InterfaceFlagValue) {
		InterfaceFlagValue = models.PluginConfigInterface{}
	}

	err, InterfaceAdded := retrieveModelPluginConfigInterfaceFlags(depth+1, &InterfaceFlagValue, InterfaceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InterfaceAdded
	if InterfaceAdded {
		m.Interface = InterfaceFlagValue
	}

	return nil, retAdded
}

func retrievePluginConfigIpcHostFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IpcHostFlagName := fmt.Sprintf("%v.IpcHost", cmdPrefix)
	if cmd.Flags().Changed(IpcHostFlagName) {

		var IpcHostFlagName string
		if cmdPrefix == "" {
			IpcHostFlagName = "IpcHost"
		} else {
			IpcHostFlagName = fmt.Sprintf("%v.IpcHost", cmdPrefix)
		}

		IpcHostFlagValue, err := cmd.Flags().GetBool(IpcHostFlagName)
		if err != nil {
			return err, false
		}
		m.IpcHost = IpcHostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigLinuxFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LinuxFlagName := fmt.Sprintf("%v.Linux", cmdPrefix)
	if cmd.Flags().Changed(LinuxFlagName) {
		// info: complex object Linux PluginConfigLinux is retrieved outside this Changed() block
	}
	LinuxFlagValue := m.Linux
	if swag.IsZero(LinuxFlagValue) {
		LinuxFlagValue = models.PluginConfigLinux{}
	}

	err, LinuxAdded := retrieveModelPluginConfigLinuxFlags(depth+1, &LinuxFlagValue, LinuxFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinuxAdded
	if LinuxAdded {
		m.Linux = LinuxFlagValue
	}

	return nil, retAdded
}

func retrievePluginConfigMountsFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MountsFlagName := fmt.Sprintf("%v.Mounts", cmdPrefix)
	if cmd.Flags().Changed(MountsFlagName) {
		// warning: Mounts array type []PluginMount is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginConfigNetworkFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworkFlagName := fmt.Sprintf("%v.Network", cmdPrefix)
	if cmd.Flags().Changed(NetworkFlagName) {
		// info: complex object Network PluginConfigNetwork is retrieved outside this Changed() block
	}
	NetworkFlagValue := m.Network
	if swag.IsZero(NetworkFlagValue) {
		NetworkFlagValue = models.PluginConfigNetwork{}
	}

	err, NetworkAdded := retrieveModelPluginConfigNetworkFlags(depth+1, &NetworkFlagValue, NetworkFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkAdded
	if NetworkAdded {
		m.Network = NetworkFlagValue
	}

	return nil, retAdded
}

func retrievePluginConfigPidHostFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PidHostFlagName := fmt.Sprintf("%v.PidHost", cmdPrefix)
	if cmd.Flags().Changed(PidHostFlagName) {

		var PidHostFlagName string
		if cmdPrefix == "" {
			PidHostFlagName = "PidHost"
		} else {
			PidHostFlagName = fmt.Sprintf("%v.PidHost", cmdPrefix)
		}

		PidHostFlagValue, err := cmd.Flags().GetBool(PidHostFlagName)
		if err != nil {
			return err, false
		}
		m.PidHost = PidHostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigPropagatedMountFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PropagatedMountFlagName := fmt.Sprintf("%v.PropagatedMount", cmdPrefix)
	if cmd.Flags().Changed(PropagatedMountFlagName) {

		var PropagatedMountFlagName string
		if cmdPrefix == "" {
			PropagatedMountFlagName = "PropagatedMount"
		} else {
			PropagatedMountFlagName = fmt.Sprintf("%v.PropagatedMount", cmdPrefix)
		}

		PropagatedMountFlagValue, err := cmd.Flags().GetString(PropagatedMountFlagName)
		if err != nil {
			return err, false
		}
		m.PropagatedMount = PropagatedMountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigUserFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UserFlagName := fmt.Sprintf("%v.User", cmdPrefix)
	if cmd.Flags().Changed(UserFlagName) {
		// info: complex object User PluginConfigUser is retrieved outside this Changed() block
	}
	UserFlagValue := m.User
	if swag.IsZero(UserFlagValue) {
		UserFlagValue = models.PluginConfigUser{}
	}

	err, UserAdded := retrieveModelPluginConfigUserFlags(depth+1, &UserFlagValue, UserFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UserAdded
	if UserAdded {
		m.User = UserFlagValue
	}

	return nil, retAdded
}

func retrievePluginConfigWorkDirFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	WorkDirFlagName := fmt.Sprintf("%v.WorkDir", cmdPrefix)
	if cmd.Flags().Changed(WorkDirFlagName) {

		var WorkDirFlagName string
		if cmdPrefix == "" {
			WorkDirFlagName = "WorkDir"
		} else {
			WorkDirFlagName = fmt.Sprintf("%v.WorkDir", cmdPrefix)
		}

		WorkDirFlagValue, err := cmd.Flags().GetString(WorkDirFlagName)
		if err != nil {
			return err, false
		}
		m.WorkDir = WorkDirFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigRootfsFlags(depth int, m *models.PluginConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RootfsFlagName := fmt.Sprintf("%v.rootfs", cmdPrefix)
	if cmd.Flags().Changed(RootfsFlagName) {
		// info: complex object rootfs PluginConfigRootfs is retrieved outside this Changed() block
	}
	RootfsFlagValue := m.Rootfs
	if swag.IsZero(RootfsFlagValue) {
		RootfsFlagValue = &models.PluginConfigRootfs{}
	}

	err, RootfsAdded := retrieveModelPluginConfigRootfsFlags(depth+1, RootfsFlagValue, RootfsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RootfsAdded
	if RootfsAdded {
		m.Rootfs = RootfsFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for PluginConfigArgs

// register flags to command
func registerModelPluginConfigArgsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginConfigArgsDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigArgsName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigArgsSettable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigArgsValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigArgsDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := `Required. `

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "Description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerPluginConfigArgsName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Required. `

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerPluginConfigArgsSettable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Settable []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginConfigArgsValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Value []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginConfigArgsFlags(depth int, m *models.PluginConfigArgs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptionAdded := retrievePluginConfigArgsDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, NameAdded := retrievePluginConfigArgsNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, SettableAdded := retrievePluginConfigArgsSettableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SettableAdded

	err, ValueAdded := retrievePluginConfigArgsValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValueAdded

	return nil, retAdded
}

func retrievePluginConfigArgsDescriptionFlags(depth int, m *models.PluginConfigArgs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "Description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigArgsNameFlags(depth int, m *models.PluginConfigArgs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigArgsSettableFlags(depth int, m *models.PluginConfigArgs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SettableFlagName := fmt.Sprintf("%v.Settable", cmdPrefix)
	if cmd.Flags().Changed(SettableFlagName) {
		// warning: Settable array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginConfigArgsValueFlags(depth int, m *models.PluginConfigArgs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ValueFlagName := fmt.Sprintf("%v.Value", cmdPrefix)
	if cmd.Flags().Changed(ValueFlagName) {
		// warning: Value array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for PluginConfigInterface

// register flags to command
func registerModelPluginConfigInterfaceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginConfigInterfaceProtocolScheme(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigInterfaceSocket(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigInterfaceTypes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigInterfaceProtocolScheme(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ProtocolSchemeDescription := `Enum: ["","moby.plugins.http/v1"]. Protocol to use for clients connecting to the plugin.`

	var ProtocolSchemeFlagName string
	if cmdPrefix == "" {
		ProtocolSchemeFlagName = "ProtocolScheme"
	} else {
		ProtocolSchemeFlagName = fmt.Sprintf("%v.ProtocolScheme", cmdPrefix)
	}

	var ProtocolSchemeFlagDefault string

	_ = cmd.PersistentFlags().String(ProtocolSchemeFlagName, ProtocolSchemeFlagDefault, ProtocolSchemeDescription)

	if err := cmd.RegisterFlagCompletionFunc(ProtocolSchemeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["","moby.plugins.http/v1"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigInterfaceSocket(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SocketDescription := `Required. `

	var SocketFlagName string
	if cmdPrefix == "" {
		SocketFlagName = "Socket"
	} else {
		SocketFlagName = fmt.Sprintf("%v.Socket", cmdPrefix)
	}

	var SocketFlagDefault string

	_ = cmd.PersistentFlags().String(SocketFlagName, SocketFlagDefault, SocketDescription)

	return nil
}

func registerPluginConfigInterfaceTypes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Types []PluginInterfaceType array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginConfigInterfaceFlags(depth int, m *models.PluginConfigInterface, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ProtocolSchemeAdded := retrievePluginConfigInterfaceProtocolSchemeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProtocolSchemeAdded

	err, SocketAdded := retrievePluginConfigInterfaceSocketFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SocketAdded

	err, TypesAdded := retrievePluginConfigInterfaceTypesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypesAdded

	return nil, retAdded
}

func retrievePluginConfigInterfaceProtocolSchemeFlags(depth int, m *models.PluginConfigInterface, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ProtocolSchemeFlagName := fmt.Sprintf("%v.ProtocolScheme", cmdPrefix)
	if cmd.Flags().Changed(ProtocolSchemeFlagName) {

		var ProtocolSchemeFlagName string
		if cmdPrefix == "" {
			ProtocolSchemeFlagName = "ProtocolScheme"
		} else {
			ProtocolSchemeFlagName = fmt.Sprintf("%v.ProtocolScheme", cmdPrefix)
		}

		ProtocolSchemeFlagValue, err := cmd.Flags().GetString(ProtocolSchemeFlagName)
		if err != nil {
			return err, false
		}
		m.ProtocolScheme = ProtocolSchemeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigInterfaceSocketFlags(depth int, m *models.PluginConfigInterface, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SocketFlagName := fmt.Sprintf("%v.Socket", cmdPrefix)
	if cmd.Flags().Changed(SocketFlagName) {

		var SocketFlagName string
		if cmdPrefix == "" {
			SocketFlagName = "Socket"
		} else {
			SocketFlagName = fmt.Sprintf("%v.Socket", cmdPrefix)
		}

		SocketFlagValue, err := cmd.Flags().GetString(SocketFlagName)
		if err != nil {
			return err, false
		}
		m.Socket = SocketFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigInterfaceTypesFlags(depth int, m *models.PluginConfigInterface, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypesFlagName := fmt.Sprintf("%v.Types", cmdPrefix)
	if cmd.Flags().Changed(TypesFlagName) {
		// warning: Types array type []PluginInterfaceType is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for PluginConfigLinux

// register flags to command
func registerModelPluginConfigLinuxFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginConfigLinuxAllowAllDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigLinuxCapabilities(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigLinuxDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigLinuxAllowAllDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AllowAllDevicesDescription := `Required. `

	var AllowAllDevicesFlagName string
	if cmdPrefix == "" {
		AllowAllDevicesFlagName = "AllowAllDevices"
	} else {
		AllowAllDevicesFlagName = fmt.Sprintf("%v.AllowAllDevices", cmdPrefix)
	}

	var AllowAllDevicesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(AllowAllDevicesFlagName, AllowAllDevicesFlagDefault, AllowAllDevicesDescription)

	return nil
}

func registerPluginConfigLinuxCapabilities(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Capabilities []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginConfigLinuxDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Devices []PluginDevice array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginConfigLinuxFlags(depth int, m *models.PluginConfigLinux, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AllowAllDevicesAdded := retrievePluginConfigLinuxAllowAllDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AllowAllDevicesAdded

	err, CapabilitiesAdded := retrievePluginConfigLinuxCapabilitiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapabilitiesAdded

	err, DevicesAdded := retrievePluginConfigLinuxDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DevicesAdded

	return nil, retAdded
}

func retrievePluginConfigLinuxAllowAllDevicesFlags(depth int, m *models.PluginConfigLinux, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AllowAllDevicesFlagName := fmt.Sprintf("%v.AllowAllDevices", cmdPrefix)
	if cmd.Flags().Changed(AllowAllDevicesFlagName) {

		var AllowAllDevicesFlagName string
		if cmdPrefix == "" {
			AllowAllDevicesFlagName = "AllowAllDevices"
		} else {
			AllowAllDevicesFlagName = fmt.Sprintf("%v.AllowAllDevices", cmdPrefix)
		}

		AllowAllDevicesFlagValue, err := cmd.Flags().GetBool(AllowAllDevicesFlagName)
		if err != nil {
			return err, false
		}
		m.AllowAllDevices = AllowAllDevicesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigLinuxCapabilitiesFlags(depth int, m *models.PluginConfigLinux, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CapabilitiesFlagName := fmt.Sprintf("%v.Capabilities", cmdPrefix)
	if cmd.Flags().Changed(CapabilitiesFlagName) {
		// warning: Capabilities array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginConfigLinuxDevicesFlags(depth int, m *models.PluginConfigLinux, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DevicesFlagName := fmt.Sprintf("%v.Devices", cmdPrefix)
	if cmd.Flags().Changed(DevicesFlagName) {
		// warning: Devices array type []PluginDevice is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for PluginConfigNetwork

// register flags to command
func registerModelPluginConfigNetworkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginConfigNetworkType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigNetworkType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := `Required. `

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "Type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginConfigNetworkFlags(depth int, m *models.PluginConfigNetwork, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, TypeAdded := retrievePluginConfigNetworkTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrievePluginConfigNetworkTypeFlags(depth int, m *models.PluginConfigNetwork, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "Type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PluginConfigRootfs

// register flags to command
func registerModelPluginConfigRootfsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginConfigRootfsDiffIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigRootfsType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigRootfsDiffIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: diff_ids []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginConfigRootfsType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := ``

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginConfigRootfsFlags(depth int, m *models.PluginConfigRootfs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DiffIdsAdded := retrievePluginConfigRootfsDiffIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DiffIdsAdded

	err, TypeAdded := retrievePluginConfigRootfsTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrievePluginConfigRootfsDiffIdsFlags(depth int, m *models.PluginConfigRootfs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DiffIdsFlagName := fmt.Sprintf("%v.diff_ids", cmdPrefix)
	if cmd.Flags().Changed(DiffIdsFlagName) {
		// warning: diff_ids array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginConfigRootfsTypeFlags(depth int, m *models.PluginConfigRootfs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PluginConfigUser

// register flags to command
func registerModelPluginConfigUserFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginConfigUserGID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginConfigUserUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfigUserGID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive GID uint32 is not supported by go-swagger cli yet

	return nil
}

func registerPluginConfigUserUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive UID uint32 is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginConfigUserFlags(depth int, m *models.PluginConfigUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, GIDAdded := retrievePluginConfigUserGIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GIDAdded

	err, UIDAdded := retrievePluginConfigUserUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UIDAdded

	return nil, retAdded
}

func retrievePluginConfigUserGIDFlags(depth int, m *models.PluginConfigUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GIDFlagName := fmt.Sprintf("%v.GID", cmdPrefix)
	if cmd.Flags().Changed(GIDFlagName) {

		// warning: primitive GID uint32 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginConfigUserUIDFlags(depth int, m *models.PluginConfigUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UIDFlagName := fmt.Sprintf("%v.UID", cmdPrefix)
	if cmd.Flags().Changed(UIDFlagName) {

		// warning: primitive UID uint32 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PluginSettings

// register flags to command
func registerModelPluginSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginSettingsArgs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginSettingsDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginSettingsEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginSettingsMounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginSettingsArgs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Args []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginSettingsDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Devices []PluginDevice array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginSettingsEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Env []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginSettingsMounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Mounts []PluginMount array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginSettingsFlags(depth int, m *models.PluginSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ArgsAdded := retrievePluginSettingsArgsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArgsAdded

	err, DevicesAdded := retrievePluginSettingsDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DevicesAdded

	err, EnvAdded := retrievePluginSettingsEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnvAdded

	err, MountsAdded := retrievePluginSettingsMountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MountsAdded

	return nil, retAdded
}

func retrievePluginSettingsArgsFlags(depth int, m *models.PluginSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ArgsFlagName := fmt.Sprintf("%v.Args", cmdPrefix)
	if cmd.Flags().Changed(ArgsFlagName) {
		// warning: Args array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginSettingsDevicesFlags(depth int, m *models.PluginSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DevicesFlagName := fmt.Sprintf("%v.Devices", cmdPrefix)
	if cmd.Flags().Changed(DevicesFlagName) {
		// warning: Devices array type []PluginDevice is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginSettingsEnvFlags(depth int, m *models.PluginSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EnvFlagName := fmt.Sprintf("%v.Env", cmdPrefix)
	if cmd.Flags().Changed(EnvFlagName) {
		// warning: Env array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginSettingsMountsFlags(depth int, m *models.PluginSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MountsFlagName := fmt.Sprintf("%v.Mounts", cmdPrefix)
	if cmd.Flags().Changed(MountsFlagName) {
		// warning: Mounts array type []PluginMount is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
