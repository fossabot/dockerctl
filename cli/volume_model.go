// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for Volume

// register flags to command
func registerModelVolumeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeMountpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeUsageData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedAtDescription := `Date/Time the volume was created.`

	var CreatedAtFlagName string
	if cmdPrefix == "" {
		CreatedAtFlagName = "CreatedAt"
	} else {
		CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	var CreatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(CreatedAtFlagName, CreatedAtFlagDefault, CreatedAtDescription)

	return nil
}

func registerVolumeDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DriverDescription := `Required. Name of the volume driver used by the volume.`

	var DriverFlagName string
	if cmdPrefix == "" {
		DriverFlagName = "Driver"
	} else {
		DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
	}

	var DriverFlagDefault string

	_ = cmd.PersistentFlags().String(DriverFlagName, DriverFlagDefault, DriverDescription)

	return nil
}

func registerVolumeLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeMountpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MountpointDescription := `Required. Mount path of the volume on the host.`

	var MountpointFlagName string
	if cmdPrefix == "" {
		MountpointFlagName = "Mountpoint"
	} else {
		MountpointFlagName = fmt.Sprintf("%v.Mountpoint", cmdPrefix)
	}

	var MountpointFlagDefault string

	_ = cmd.PersistentFlags().String(MountpointFlagName, MountpointFlagDefault, MountpointDescription)

	return nil
}

func registerVolumeName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Required. Name of the volume.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerVolumeOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ScopeDescription := `Enum: ["local","global"]. Required. The level at which the volume exists. Either ` + "`" + `global` + "`" + ` for cluster-wide, or ` + "`" + `local` + "`" + ` for machine level.`

	var ScopeFlagName string
	if cmdPrefix == "" {
		ScopeFlagName = "Scope"
	} else {
		ScopeFlagName = fmt.Sprintf("%v.Scope", cmdPrefix)
	}

	var ScopeFlagDefault string = "local"

	_ = cmd.PersistentFlags().String(ScopeFlagName, ScopeFlagDefault, ScopeDescription)

	if err := cmd.RegisterFlagCompletionFunc(ScopeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["local","global"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVolumeStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Status map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerVolumeUsageData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var UsageDataFlagName string
	if cmdPrefix == "" {
		UsageDataFlagName = "UsageData"
	} else {
		UsageDataFlagName = fmt.Sprintf("%v.UsageData", cmdPrefix)
	}

	if err := registerModelVolumeUsageDataFlags(depth+1, UsageDataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CreatedAtAdded := retrieveVolumeCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAtAdded

	err, DriverAdded := retrieveVolumeDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverAdded

	err, LabelsAdded := retrieveVolumeLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, MountpointAdded := retrieveVolumeMountpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MountpointAdded

	err, NameAdded := retrieveVolumeNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OptionsAdded := retrieveVolumeOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	err, ScopeAdded := retrieveVolumeScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScopeAdded

	err, StatusAdded := retrieveVolumeStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, UsageDataAdded := retrieveVolumeUsageDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsageDataAdded

	return nil, retAdded
}

func retrieveVolumeCreatedAtFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(CreatedAtFlagName) {

		var CreatedAtFlagName string
		if cmdPrefix == "" {
			CreatedAtFlagName = "CreatedAt"
		} else {
			CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		CreatedAtFlagValue, err := cmd.Flags().GetString(CreatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = CreatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeDriverFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DriverFlagName := fmt.Sprintf("%v.Driver", cmdPrefix)
	if cmd.Flags().Changed(DriverFlagName) {

		var DriverFlagName string
		if cmdPrefix == "" {
			DriverFlagName = "Driver"
		} else {
			DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
		}

		DriverFlagValue, err := cmd.Flags().GetString(DriverFlagName)
		if err != nil {
			return err, false
		}
		m.Driver = DriverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeLabelsFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeMountpointFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MountpointFlagName := fmt.Sprintf("%v.Mountpoint", cmdPrefix)
	if cmd.Flags().Changed(MountpointFlagName) {

		var MountpointFlagName string
		if cmdPrefix == "" {
			MountpointFlagName = "Mountpoint"
		} else {
			MountpointFlagName = fmt.Sprintf("%v.Mountpoint", cmdPrefix)
		}

		MountpointFlagValue, err := cmd.Flags().GetString(MountpointFlagName)
		if err != nil {
			return err, false
		}
		m.Mountpoint = MountpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeNameFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeOptionsFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeScopeFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ScopeFlagName := fmt.Sprintf("%v.Scope", cmdPrefix)
	if cmd.Flags().Changed(ScopeFlagName) {

		var ScopeFlagName string
		if cmdPrefix == "" {
			ScopeFlagName = "Scope"
		} else {
			ScopeFlagName = fmt.Sprintf("%v.Scope", cmdPrefix)
		}

		ScopeFlagValue, err := cmd.Flags().GetString(ScopeFlagName)
		if err != nil {
			return err, false
		}
		m.Scope = ScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeStatusFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StatusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(StatusFlagName) {
		// warning: Status map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVolumeUsageDataFlags(depth int, m *models.Volume, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UsageDataFlagName := fmt.Sprintf("%v.UsageData", cmdPrefix)
	if cmd.Flags().Changed(UsageDataFlagName) {
		// info: complex object UsageData VolumeUsageData is retrieved outside this Changed() block
	}
	UsageDataFlagValue := m.UsageData
	if swag.IsZero(UsageDataFlagValue) {
		UsageDataFlagValue = &models.VolumeUsageData{}
	}

	err, UsageDataAdded := retrieveModelVolumeUsageDataFlags(depth+1, UsageDataFlagValue, UsageDataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsageDataAdded
	if UsageDataAdded {
		m.UsageData = UsageDataFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for VolumeUsageData

// register flags to command
func registerModelVolumeUsageDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeUsageDataRefCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeUsageDataSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeUsageDataRefCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RefCountDescription := `Required. The number of containers referencing this volume. This field
is set to ` + "`" + `-1` + "`" + ` if the reference-count is not available.
`

	var RefCountFlagName string
	if cmdPrefix == "" {
		RefCountFlagName = "RefCount"
	} else {
		RefCountFlagName = fmt.Sprintf("%v.RefCount", cmdPrefix)
	}

	var RefCountFlagDefault int64 = -1

	_ = cmd.PersistentFlags().Int64(RefCountFlagName, RefCountFlagDefault, RefCountDescription)

	return nil
}

func registerVolumeUsageDataSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeDescription := `Required. Amount of disk space used by the volume (in bytes). This information
is only available for volumes created with the ` + "`" + `"local"` + "`" + ` volume
driver. For volumes created with other volume drivers, this field
is set to ` + "`" + `-1` + "`" + ` ("not available")
`

	var SizeFlagName string
	if cmdPrefix == "" {
		SizeFlagName = "Size"
	} else {
		SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
	}

	var SizeFlagDefault int64 = -1

	_ = cmd.PersistentFlags().Int64(SizeFlagName, SizeFlagDefault, SizeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeUsageDataFlags(depth int, m *models.VolumeUsageData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, RefCountAdded := retrieveVolumeUsageDataRefCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RefCountAdded

	err, SizeAdded := retrieveVolumeUsageDataSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	return nil, retAdded
}

func retrieveVolumeUsageDataRefCountFlags(depth int, m *models.VolumeUsageData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RefCountFlagName := fmt.Sprintf("%v.RefCount", cmdPrefix)
	if cmd.Flags().Changed(RefCountFlagName) {

		var RefCountFlagName string
		if cmdPrefix == "" {
			RefCountFlagName = "RefCount"
		} else {
			RefCountFlagName = fmt.Sprintf("%v.RefCount", cmdPrefix)
		}

		RefCountFlagValue, err := cmd.Flags().GetInt64(RefCountFlagName)
		if err != nil {
			return err, false
		}
		m.RefCount = RefCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeUsageDataSizeFlags(depth int, m *models.VolumeUsageData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeFlagName := fmt.Sprintf("%v.Size", cmdPrefix)
	if cmd.Flags().Changed(SizeFlagName) {

		var SizeFlagName string
		if cmdPrefix == "" {
			SizeFlagName = "Size"
		} else {
			SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
		}

		SizeFlagValue, err := cmd.Flags().GetInt64(SizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = SizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
