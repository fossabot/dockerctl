// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ThrottleDevice

// register flags to command
func registerModelThrottleDeviceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerThrottleDevicePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerThrottleDeviceRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerThrottleDevicePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PathDescription := `Device path`

	var PathFlagName string
	if cmdPrefix == "" {
		PathFlagName = "Path"
	} else {
		PathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
	}

	var PathFlagDefault string

	_ = cmd.PersistentFlags().String(PathFlagName, PathFlagDefault, PathDescription)

	return nil
}

func registerThrottleDeviceRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RateDescription := `Rate`

	var RateFlagName string
	if cmdPrefix == "" {
		RateFlagName = "Rate"
	} else {
		RateFlagName = fmt.Sprintf("%v.Rate", cmdPrefix)
	}

	var RateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(RateFlagName, RateFlagDefault, RateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelThrottleDeviceFlags(depth int, m *models.ThrottleDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, PathAdded := retrieveThrottleDevicePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PathAdded

	err, RateAdded := retrieveThrottleDeviceRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RateAdded

	return nil, retAdded
}

func retrieveThrottleDevicePathFlags(depth int, m *models.ThrottleDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PathFlagName := fmt.Sprintf("%v.Path", cmdPrefix)
	if cmd.Flags().Changed(PathFlagName) {

		var PathFlagName string
		if cmdPrefix == "" {
			PathFlagName = "Path"
		} else {
			PathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
		}

		PathFlagValue, err := cmd.Flags().GetString(PathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = PathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveThrottleDeviceRateFlags(depth int, m *models.ThrottleDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RateFlagName := fmt.Sprintf("%v.Rate", cmdPrefix)
	if cmd.Flags().Changed(RateFlagName) {

		var RateFlagName string
		if cmdPrefix == "" {
			RateFlagName = "Rate"
		} else {
			RateFlagName = fmt.Sprintf("%v.Rate", cmdPrefix)
		}

		RateFlagValue, err := cmd.Flags().GetInt64(RateFlagName)
		if err != nil {
			return err, false
		}
		m.Rate = &RateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
