// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/swarm"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSwarmSwarmLeaveCmd returns a cmd to handle operation swarmLeave
func makeOperationSwarmSwarmLeaveCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "SwarmLeave",
		Short: ``,
		RunE:  runOperationSwarmSwarmLeave,
	}

	if err := registerOperationSwarmSwarmLeaveParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSwarmSwarmLeave uses cmd flags to call endpoint api
func runOperationSwarmSwarmLeave(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := swarm.NewSwarmLeaveParams()
	if err, _ := retrieveOperationSwarmSwarmLeaveForceFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSwarmSwarmLeaveResult(appCli.Swarm.SwarmLeave(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSwarmSwarmLeaveParamFlags registers all flags needed to fill params
func registerOperationSwarmSwarmLeaveParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSwarmSwarmLeaveForceParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSwarmSwarmLeaveForceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	ForceDescription := `Force leave swarm, even if this is the last manager or that it will break the cluster.`

	var ForceFlagName string
	if cmdPrefix == "" {
		ForceFlagName = "force"
	} else {
		ForceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
	}

	var ForceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ForceFlagName, ForceFlagDefault, ForceDescription)

	return nil
}

func retrieveOperationSwarmSwarmLeaveForceFlag(m *swarm.SwarmLeaveParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force") {

		var ForceFlagName string
		if cmdPrefix == "" {
			ForceFlagName = "force"
		} else {
			ForceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
		}

		ForceFlagValue, err := cmd.Flags().GetBool(ForceFlagName)
		if err != nil {
			return err, false
		}
		m.Force = &ForceFlagValue

	}
	return nil, retAdded
}

// parseOperationSwarmSwarmLeaveResult parses request result and return the string content
func parseOperationSwarmSwarmLeaveResult(resp0 *swarm.SwarmLeaveOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning swarmLeaveOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*swarm.SwarmLeaveInternalServerError)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*swarm.SwarmLeaveServiceUnavailable)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response swarmLeaveOK is not supported by go-swagger cli yet.

	return "", nil
}
