// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for Resources

// register flags to command
func registerModelResourcesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerResourcesBlkioDeviceReadBps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioDeviceReadIOps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioDeviceWriteBps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioDeviceWriteIOps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioWeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioWeightDevice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCgroupParent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUQuota(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPURealtimePeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPURealtimeRuntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUShares(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCpusetCpus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCpusetMems(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesDeviceCgroupRules(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesDeviceRequests(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesIOMaximumBandwidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesIOMaximumIOps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesInit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesKernelMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesKernelMemoryTCP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesMemoryReservation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesMemorySwap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesMemorySwappiness(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesNanoCPUs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesOomKillDisable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesPidsLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesUlimits(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerResourcesBlkioDeviceReadBps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: BlkioDeviceReadBps []*ThrottleDevice array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesBlkioDeviceReadIOps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: BlkioDeviceReadIOps []*ThrottleDevice array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesBlkioDeviceWriteBps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: BlkioDeviceWriteBps []*ThrottleDevice array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesBlkioDeviceWriteIOps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: BlkioDeviceWriteIOps []*ThrottleDevice array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesBlkioWeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	BlkioWeightDescription := `Block IO weight (relative weight).`

	var BlkioWeightFlagName string
	if cmdPrefix == "" {
		BlkioWeightFlagName = "BlkioWeight"
	} else {
		BlkioWeightFlagName = fmt.Sprintf("%v.BlkioWeight", cmdPrefix)
	}

	var BlkioWeightFlagDefault int64

	_ = cmd.PersistentFlags().Int64(BlkioWeightFlagName, BlkioWeightFlagDefault, BlkioWeightDescription)

	return nil
}

func registerResourcesBlkioWeightDevice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: BlkioWeightDevice []*ResourcesBlkioWeightDeviceItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesCgroupParent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CgroupParentDescription := `Path to ` + "`" + `cgroups` + "`" + ` under which the container's ` + "`" + `cgroup` + "`" + ` is created. If the path is not absolute, the path is considered to be relative to the ` + "`" + `cgroups` + "`" + ` path of the init process. Cgroups are created if they do not already exist.`

	var CgroupParentFlagName string
	if cmdPrefix == "" {
		CgroupParentFlagName = "CgroupParent"
	} else {
		CgroupParentFlagName = fmt.Sprintf("%v.CgroupParent", cmdPrefix)
	}

	var CgroupParentFlagDefault string

	_ = cmd.PersistentFlags().String(CgroupParentFlagName, CgroupParentFlagDefault, CgroupParentDescription)

	return nil
}

func registerResourcesCPUCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CPUCountDescription := `The number of usable CPUs (Windows only).

On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is ` + "`" + `CPUCount` + "`" + ` first, then ` + "`" + `CPUShares` + "`" + `, and ` + "`" + `CPUPercent` + "`" + ` last.
`

	var CPUCountFlagName string
	if cmdPrefix == "" {
		CPUCountFlagName = "CpuCount"
	} else {
		CPUCountFlagName = fmt.Sprintf("%v.CpuCount", cmdPrefix)
	}

	var CPUCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CPUCountFlagName, CPUCountFlagDefault, CPUCountDescription)

	return nil
}

func registerResourcesCPUPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CPUPercentDescription := `The usable percentage of the available CPUs (Windows only).

On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is ` + "`" + `CPUCount` + "`" + ` first, then ` + "`" + `CPUShares` + "`" + `, and ` + "`" + `CPUPercent` + "`" + ` last.
`

	var CPUPercentFlagName string
	if cmdPrefix == "" {
		CPUPercentFlagName = "CpuPercent"
	} else {
		CPUPercentFlagName = fmt.Sprintf("%v.CpuPercent", cmdPrefix)
	}

	var CPUPercentFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CPUPercentFlagName, CPUPercentFlagDefault, CPUPercentDescription)

	return nil
}

func registerResourcesCPUPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CPUPeriodDescription := `The length of a CPU period in microseconds.`

	var CPUPeriodFlagName string
	if cmdPrefix == "" {
		CPUPeriodFlagName = "CpuPeriod"
	} else {
		CPUPeriodFlagName = fmt.Sprintf("%v.CpuPeriod", cmdPrefix)
	}

	var CPUPeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CPUPeriodFlagName, CPUPeriodFlagDefault, CPUPeriodDescription)

	return nil
}

func registerResourcesCPUQuota(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CPUQuotaDescription := `Microseconds of CPU time that the container can get in a CPU period.`

	var CPUQuotaFlagName string
	if cmdPrefix == "" {
		CPUQuotaFlagName = "CpuQuota"
	} else {
		CPUQuotaFlagName = fmt.Sprintf("%v.CpuQuota", cmdPrefix)
	}

	var CPUQuotaFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CPUQuotaFlagName, CPUQuotaFlagDefault, CPUQuotaDescription)

	return nil
}

func registerResourcesCPURealtimePeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CPURealtimePeriodDescription := `The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.`

	var CPURealtimePeriodFlagName string
	if cmdPrefix == "" {
		CPURealtimePeriodFlagName = "CpuRealtimePeriod"
	} else {
		CPURealtimePeriodFlagName = fmt.Sprintf("%v.CpuRealtimePeriod", cmdPrefix)
	}

	var CPURealtimePeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CPURealtimePeriodFlagName, CPURealtimePeriodFlagDefault, CPURealtimePeriodDescription)

	return nil
}

func registerResourcesCPURealtimeRuntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CPURealtimeRuntimeDescription := `The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.`

	var CPURealtimeRuntimeFlagName string
	if cmdPrefix == "" {
		CPURealtimeRuntimeFlagName = "CpuRealtimeRuntime"
	} else {
		CPURealtimeRuntimeFlagName = fmt.Sprintf("%v.CpuRealtimeRuntime", cmdPrefix)
	}

	var CPURealtimeRuntimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CPURealtimeRuntimeFlagName, CPURealtimeRuntimeFlagDefault, CPURealtimeRuntimeDescription)

	return nil
}

func registerResourcesCPUShares(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CPUSharesDescription := `An integer value representing this container's relative CPU weight versus other containers.`

	var CPUSharesFlagName string
	if cmdPrefix == "" {
		CPUSharesFlagName = "CpuShares"
	} else {
		CPUSharesFlagName = fmt.Sprintf("%v.CpuShares", cmdPrefix)
	}

	var CPUSharesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CPUSharesFlagName, CPUSharesFlagDefault, CPUSharesDescription)

	return nil
}

func registerResourcesCpusetCpus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CpusetCpusDescription := `CPUs in which to allow execution (e.g., ` + "`" + `0-3` + "`" + `, ` + "`" + `0,1` + "`" + `)`

	var CpusetCpusFlagName string
	if cmdPrefix == "" {
		CpusetCpusFlagName = "CpusetCpus"
	} else {
		CpusetCpusFlagName = fmt.Sprintf("%v.CpusetCpus", cmdPrefix)
	}

	var CpusetCpusFlagDefault string

	_ = cmd.PersistentFlags().String(CpusetCpusFlagName, CpusetCpusFlagDefault, CpusetCpusDescription)

	return nil
}

func registerResourcesCpusetMems(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CpusetMemsDescription := `Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.`

	var CpusetMemsFlagName string
	if cmdPrefix == "" {
		CpusetMemsFlagName = "CpusetMems"
	} else {
		CpusetMemsFlagName = fmt.Sprintf("%v.CpusetMems", cmdPrefix)
	}

	var CpusetMemsFlagDefault string

	_ = cmd.PersistentFlags().String(CpusetMemsFlagName, CpusetMemsFlagDefault, CpusetMemsDescription)

	return nil
}

func registerResourcesDeviceCgroupRules(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: DeviceCgroupRules []string array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesDeviceRequests(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: DeviceRequests []*DeviceRequest array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Devices []*DeviceMapping array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesIOMaximumBandwidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IOMaximumBandwidthDescription := `Maximum IO in bytes per second for the container system drive (Windows only)`

	var IOMaximumBandwidthFlagName string
	if cmdPrefix == "" {
		IOMaximumBandwidthFlagName = "IOMaximumBandwidth"
	} else {
		IOMaximumBandwidthFlagName = fmt.Sprintf("%v.IOMaximumBandwidth", cmdPrefix)
	}

	var IOMaximumBandwidthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(IOMaximumBandwidthFlagName, IOMaximumBandwidthFlagDefault, IOMaximumBandwidthDescription)

	return nil
}

func registerResourcesIOMaximumIOps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IOMaximumIOpsDescription := `Maximum IOps for the container system drive (Windows only)`

	var IOMaximumIOpsFlagName string
	if cmdPrefix == "" {
		IOMaximumIOpsFlagName = "IOMaximumIOps"
	} else {
		IOMaximumIOpsFlagName = fmt.Sprintf("%v.IOMaximumIOps", cmdPrefix)
	}

	var IOMaximumIOpsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(IOMaximumIOpsFlagName, IOMaximumIOpsFlagDefault, IOMaximumIOpsDescription)

	return nil
}

func registerResourcesInit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	InitDescription := `Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.`

	var InitFlagName string
	if cmdPrefix == "" {
		InitFlagName = "Init"
	} else {
		InitFlagName = fmt.Sprintf("%v.Init", cmdPrefix)
	}

	var InitFlagDefault bool

	_ = cmd.PersistentFlags().Bool(InitFlagName, InitFlagDefault, InitDescription)

	return nil
}

func registerResourcesKernelMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	KernelMemoryDescription := `Kernel memory limit in bytes.`

	var KernelMemoryFlagName string
	if cmdPrefix == "" {
		KernelMemoryFlagName = "KernelMemory"
	} else {
		KernelMemoryFlagName = fmt.Sprintf("%v.KernelMemory", cmdPrefix)
	}

	var KernelMemoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(KernelMemoryFlagName, KernelMemoryFlagDefault, KernelMemoryDescription)

	return nil
}

func registerResourcesKernelMemoryTCP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	KernelMemoryTCPDescription := `Hard limit for kernel TCP buffer memory (in bytes).`

	var KernelMemoryTCPFlagName string
	if cmdPrefix == "" {
		KernelMemoryTCPFlagName = "KernelMemoryTCP"
	} else {
		KernelMemoryTCPFlagName = fmt.Sprintf("%v.KernelMemoryTCP", cmdPrefix)
	}

	var KernelMemoryTCPFlagDefault int64

	_ = cmd.PersistentFlags().Int64(KernelMemoryTCPFlagName, KernelMemoryTCPFlagDefault, KernelMemoryTCPDescription)

	return nil
}

func registerResourcesMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MemoryDescription := `Memory limit in bytes.`

	var MemoryFlagName string
	if cmdPrefix == "" {
		MemoryFlagName = "Memory"
	} else {
		MemoryFlagName = fmt.Sprintf("%v.Memory", cmdPrefix)
	}

	var MemoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(MemoryFlagName, MemoryFlagDefault, MemoryDescription)

	return nil
}

func registerResourcesMemoryReservation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MemoryReservationDescription := `Memory soft limit in bytes.`

	var MemoryReservationFlagName string
	if cmdPrefix == "" {
		MemoryReservationFlagName = "MemoryReservation"
	} else {
		MemoryReservationFlagName = fmt.Sprintf("%v.MemoryReservation", cmdPrefix)
	}

	var MemoryReservationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(MemoryReservationFlagName, MemoryReservationFlagDefault, MemoryReservationDescription)

	return nil
}

func registerResourcesMemorySwap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MemorySwapDescription := `Total memory limit (memory + swap). Set as ` + "`" + `-1` + "`" + ` to enable unlimited swap.`

	var MemorySwapFlagName string
	if cmdPrefix == "" {
		MemorySwapFlagName = "MemorySwap"
	} else {
		MemorySwapFlagName = fmt.Sprintf("%v.MemorySwap", cmdPrefix)
	}

	var MemorySwapFlagDefault int64

	_ = cmd.PersistentFlags().Int64(MemorySwapFlagName, MemorySwapFlagDefault, MemorySwapDescription)

	return nil
}

func registerResourcesMemorySwappiness(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MemorySwappinessDescription := `Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.`

	var MemorySwappinessFlagName string
	if cmdPrefix == "" {
		MemorySwappinessFlagName = "MemorySwappiness"
	} else {
		MemorySwappinessFlagName = fmt.Sprintf("%v.MemorySwappiness", cmdPrefix)
	}

	var MemorySwappinessFlagDefault int64

	_ = cmd.PersistentFlags().Int64(MemorySwappinessFlagName, MemorySwappinessFlagDefault, MemorySwappinessDescription)

	return nil
}

func registerResourcesNanoCPUs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NanoCPUsDescription := `CPU quota in units of 10<sup>-9</sup> CPUs.`

	var NanoCPUsFlagName string
	if cmdPrefix == "" {
		NanoCPUsFlagName = "NanoCPUs"
	} else {
		NanoCPUsFlagName = fmt.Sprintf("%v.NanoCPUs", cmdPrefix)
	}

	var NanoCPUsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(NanoCPUsFlagName, NanoCPUsFlagDefault, NanoCPUsDescription)

	return nil
}

func registerResourcesOomKillDisable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OomKillDisableDescription := `Disable OOM Killer for the container.`

	var OomKillDisableFlagName string
	if cmdPrefix == "" {
		OomKillDisableFlagName = "OomKillDisable"
	} else {
		OomKillDisableFlagName = fmt.Sprintf("%v.OomKillDisable", cmdPrefix)
	}

	var OomKillDisableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(OomKillDisableFlagName, OomKillDisableFlagDefault, OomKillDisableDescription)

	return nil
}

func registerResourcesPidsLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PidsLimitDescription := `Tune a container's PIDs limit. Set ` + "`" + `0` + "`" + ` or ` + "`" + `-1` + "`" + ` for unlimited, or ` + "`" + `null` + "`" + ` to not change.
`

	var PidsLimitFlagName string
	if cmdPrefix == "" {
		PidsLimitFlagName = "PidsLimit"
	} else {
		PidsLimitFlagName = fmt.Sprintf("%v.PidsLimit", cmdPrefix)
	}

	var PidsLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(PidsLimitFlagName, PidsLimitFlagDefault, PidsLimitDescription)

	return nil
}

func registerResourcesUlimits(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Ulimits []*ResourcesUlimitsItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelResourcesFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BlkioDeviceReadBpsAdded := retrieveResourcesBlkioDeviceReadBpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlkioDeviceReadBpsAdded

	err, BlkioDeviceReadIOpsAdded := retrieveResourcesBlkioDeviceReadIOpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlkioDeviceReadIOpsAdded

	err, BlkioDeviceWriteBpsAdded := retrieveResourcesBlkioDeviceWriteBpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlkioDeviceWriteBpsAdded

	err, BlkioDeviceWriteIOpsAdded := retrieveResourcesBlkioDeviceWriteIOpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlkioDeviceWriteIOpsAdded

	err, BlkioWeightAdded := retrieveResourcesBlkioWeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlkioWeightAdded

	err, BlkioWeightDeviceAdded := retrieveResourcesBlkioWeightDeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlkioWeightDeviceAdded

	err, CgroupParentAdded := retrieveResourcesCgroupParentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CgroupParentAdded

	err, CPUCountAdded := retrieveResourcesCPUCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CPUCountAdded

	err, CPUPercentAdded := retrieveResourcesCPUPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CPUPercentAdded

	err, CPUPeriodAdded := retrieveResourcesCPUPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CPUPeriodAdded

	err, CPUQuotaAdded := retrieveResourcesCPUQuotaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CPUQuotaAdded

	err, CPURealtimePeriodAdded := retrieveResourcesCPURealtimePeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CPURealtimePeriodAdded

	err, CPURealtimeRuntimeAdded := retrieveResourcesCPURealtimeRuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CPURealtimeRuntimeAdded

	err, CPUSharesAdded := retrieveResourcesCPUSharesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CPUSharesAdded

	err, CpusetCpusAdded := retrieveResourcesCpusetCpusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CpusetCpusAdded

	err, CpusetMemsAdded := retrieveResourcesCpusetMemsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CpusetMemsAdded

	err, DeviceCgroupRulesAdded := retrieveResourcesDeviceCgroupRulesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DeviceCgroupRulesAdded

	err, DeviceRequestsAdded := retrieveResourcesDeviceRequestsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DeviceRequestsAdded

	err, DevicesAdded := retrieveResourcesDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DevicesAdded

	err, IOMaximumBandwidthAdded := retrieveResourcesIOMaximumBandwidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IOMaximumBandwidthAdded

	err, IOMaximumIOpsAdded := retrieveResourcesIOMaximumIOpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IOMaximumIOpsAdded

	err, InitAdded := retrieveResourcesInitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InitAdded

	err, KernelMemoryAdded := retrieveResourcesKernelMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KernelMemoryAdded

	err, KernelMemoryTCPAdded := retrieveResourcesKernelMemoryTCPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KernelMemoryTCPAdded

	err, MemoryAdded := retrieveResourcesMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MemoryAdded

	err, MemoryReservationAdded := retrieveResourcesMemoryReservationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MemoryReservationAdded

	err, MemorySwapAdded := retrieveResourcesMemorySwapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MemorySwapAdded

	err, MemorySwappinessAdded := retrieveResourcesMemorySwappinessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MemorySwappinessAdded

	err, NanoCPUsAdded := retrieveResourcesNanoCPUsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NanoCPUsAdded

	err, OomKillDisableAdded := retrieveResourcesOomKillDisableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OomKillDisableAdded

	err, PidsLimitAdded := retrieveResourcesPidsLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PidsLimitAdded

	err, UlimitsAdded := retrieveResourcesUlimitsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UlimitsAdded

	return nil, retAdded
}

func retrieveResourcesBlkioDeviceReadBpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BlkioDeviceReadBpsFlagName := fmt.Sprintf("%v.BlkioDeviceReadBps", cmdPrefix)
	if cmd.Flags().Changed(BlkioDeviceReadBpsFlagName) {
		// warning: BlkioDeviceReadBps array type []*ThrottleDevice is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcesBlkioDeviceReadIOpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BlkioDeviceReadIOpsFlagName := fmt.Sprintf("%v.BlkioDeviceReadIOps", cmdPrefix)
	if cmd.Flags().Changed(BlkioDeviceReadIOpsFlagName) {
		// warning: BlkioDeviceReadIOps array type []*ThrottleDevice is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcesBlkioDeviceWriteBpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BlkioDeviceWriteBpsFlagName := fmt.Sprintf("%v.BlkioDeviceWriteBps", cmdPrefix)
	if cmd.Flags().Changed(BlkioDeviceWriteBpsFlagName) {
		// warning: BlkioDeviceWriteBps array type []*ThrottleDevice is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcesBlkioDeviceWriteIOpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BlkioDeviceWriteIOpsFlagName := fmt.Sprintf("%v.BlkioDeviceWriteIOps", cmdPrefix)
	if cmd.Flags().Changed(BlkioDeviceWriteIOpsFlagName) {
		// warning: BlkioDeviceWriteIOps array type []*ThrottleDevice is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcesBlkioWeightFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BlkioWeightFlagName := fmt.Sprintf("%v.BlkioWeight", cmdPrefix)
	if cmd.Flags().Changed(BlkioWeightFlagName) {

		var BlkioWeightFlagName string
		if cmdPrefix == "" {
			BlkioWeightFlagName = "BlkioWeight"
		} else {
			BlkioWeightFlagName = fmt.Sprintf("%v.BlkioWeight", cmdPrefix)
		}

		BlkioWeightFlagValue, err := cmd.Flags().GetInt64(BlkioWeightFlagName)
		if err != nil {
			return err, false
		}
		m.BlkioWeight = &BlkioWeightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesBlkioWeightDeviceFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BlkioWeightDeviceFlagName := fmt.Sprintf("%v.BlkioWeightDevice", cmdPrefix)
	if cmd.Flags().Changed(BlkioWeightDeviceFlagName) {
		// warning: BlkioWeightDevice array type []*ResourcesBlkioWeightDeviceItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcesCgroupParentFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CgroupParentFlagName := fmt.Sprintf("%v.CgroupParent", cmdPrefix)
	if cmd.Flags().Changed(CgroupParentFlagName) {

		var CgroupParentFlagName string
		if cmdPrefix == "" {
			CgroupParentFlagName = "CgroupParent"
		} else {
			CgroupParentFlagName = fmt.Sprintf("%v.CgroupParent", cmdPrefix)
		}

		CgroupParentFlagValue, err := cmd.Flags().GetString(CgroupParentFlagName)
		if err != nil {
			return err, false
		}
		m.CgroupParent = CgroupParentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesCPUCountFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CPUCountFlagName := fmt.Sprintf("%v.CpuCount", cmdPrefix)
	if cmd.Flags().Changed(CPUCountFlagName) {

		var CPUCountFlagName string
		if cmdPrefix == "" {
			CPUCountFlagName = "CpuCount"
		} else {
			CPUCountFlagName = fmt.Sprintf("%v.CpuCount", cmdPrefix)
		}

		CPUCountFlagValue, err := cmd.Flags().GetInt64(CPUCountFlagName)
		if err != nil {
			return err, false
		}
		m.CPUCount = CPUCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesCPUPercentFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CPUPercentFlagName := fmt.Sprintf("%v.CpuPercent", cmdPrefix)
	if cmd.Flags().Changed(CPUPercentFlagName) {

		var CPUPercentFlagName string
		if cmdPrefix == "" {
			CPUPercentFlagName = "CpuPercent"
		} else {
			CPUPercentFlagName = fmt.Sprintf("%v.CpuPercent", cmdPrefix)
		}

		CPUPercentFlagValue, err := cmd.Flags().GetInt64(CPUPercentFlagName)
		if err != nil {
			return err, false
		}
		m.CPUPercent = CPUPercentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesCPUPeriodFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CPUPeriodFlagName := fmt.Sprintf("%v.CpuPeriod", cmdPrefix)
	if cmd.Flags().Changed(CPUPeriodFlagName) {

		var CPUPeriodFlagName string
		if cmdPrefix == "" {
			CPUPeriodFlagName = "CpuPeriod"
		} else {
			CPUPeriodFlagName = fmt.Sprintf("%v.CpuPeriod", cmdPrefix)
		}

		CPUPeriodFlagValue, err := cmd.Flags().GetInt64(CPUPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.CPUPeriod = CPUPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesCPUQuotaFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CPUQuotaFlagName := fmt.Sprintf("%v.CpuQuota", cmdPrefix)
	if cmd.Flags().Changed(CPUQuotaFlagName) {

		var CPUQuotaFlagName string
		if cmdPrefix == "" {
			CPUQuotaFlagName = "CpuQuota"
		} else {
			CPUQuotaFlagName = fmt.Sprintf("%v.CpuQuota", cmdPrefix)
		}

		CPUQuotaFlagValue, err := cmd.Flags().GetInt64(CPUQuotaFlagName)
		if err != nil {
			return err, false
		}
		m.CPUQuota = CPUQuotaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesCPURealtimePeriodFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CPURealtimePeriodFlagName := fmt.Sprintf("%v.CpuRealtimePeriod", cmdPrefix)
	if cmd.Flags().Changed(CPURealtimePeriodFlagName) {

		var CPURealtimePeriodFlagName string
		if cmdPrefix == "" {
			CPURealtimePeriodFlagName = "CpuRealtimePeriod"
		} else {
			CPURealtimePeriodFlagName = fmt.Sprintf("%v.CpuRealtimePeriod", cmdPrefix)
		}

		CPURealtimePeriodFlagValue, err := cmd.Flags().GetInt64(CPURealtimePeriodFlagName)
		if err != nil {
			return err, false
		}
		m.CPURealtimePeriod = CPURealtimePeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesCPURealtimeRuntimeFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CPURealtimeRuntimeFlagName := fmt.Sprintf("%v.CpuRealtimeRuntime", cmdPrefix)
	if cmd.Flags().Changed(CPURealtimeRuntimeFlagName) {

		var CPURealtimeRuntimeFlagName string
		if cmdPrefix == "" {
			CPURealtimeRuntimeFlagName = "CpuRealtimeRuntime"
		} else {
			CPURealtimeRuntimeFlagName = fmt.Sprintf("%v.CpuRealtimeRuntime", cmdPrefix)
		}

		CPURealtimeRuntimeFlagValue, err := cmd.Flags().GetInt64(CPURealtimeRuntimeFlagName)
		if err != nil {
			return err, false
		}
		m.CPURealtimeRuntime = CPURealtimeRuntimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesCPUSharesFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CPUSharesFlagName := fmt.Sprintf("%v.CpuShares", cmdPrefix)
	if cmd.Flags().Changed(CPUSharesFlagName) {

		var CPUSharesFlagName string
		if cmdPrefix == "" {
			CPUSharesFlagName = "CpuShares"
		} else {
			CPUSharesFlagName = fmt.Sprintf("%v.CpuShares", cmdPrefix)
		}

		CPUSharesFlagValue, err := cmd.Flags().GetInt64(CPUSharesFlagName)
		if err != nil {
			return err, false
		}
		m.CPUShares = CPUSharesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesCpusetCpusFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CpusetCpusFlagName := fmt.Sprintf("%v.CpusetCpus", cmdPrefix)
	if cmd.Flags().Changed(CpusetCpusFlagName) {

		var CpusetCpusFlagName string
		if cmdPrefix == "" {
			CpusetCpusFlagName = "CpusetCpus"
		} else {
			CpusetCpusFlagName = fmt.Sprintf("%v.CpusetCpus", cmdPrefix)
		}

		CpusetCpusFlagValue, err := cmd.Flags().GetString(CpusetCpusFlagName)
		if err != nil {
			return err, false
		}
		m.CpusetCpus = CpusetCpusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesCpusetMemsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CpusetMemsFlagName := fmt.Sprintf("%v.CpusetMems", cmdPrefix)
	if cmd.Flags().Changed(CpusetMemsFlagName) {

		var CpusetMemsFlagName string
		if cmdPrefix == "" {
			CpusetMemsFlagName = "CpusetMems"
		} else {
			CpusetMemsFlagName = fmt.Sprintf("%v.CpusetMems", cmdPrefix)
		}

		CpusetMemsFlagValue, err := cmd.Flags().GetString(CpusetMemsFlagName)
		if err != nil {
			return err, false
		}
		m.CpusetMems = CpusetMemsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesDeviceCgroupRulesFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DeviceCgroupRulesFlagName := fmt.Sprintf("%v.DeviceCgroupRules", cmdPrefix)
	if cmd.Flags().Changed(DeviceCgroupRulesFlagName) {
		// warning: DeviceCgroupRules array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcesDeviceRequestsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DeviceRequestsFlagName := fmt.Sprintf("%v.DeviceRequests", cmdPrefix)
	if cmd.Flags().Changed(DeviceRequestsFlagName) {
		// warning: DeviceRequests array type []*DeviceRequest is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcesDevicesFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DevicesFlagName := fmt.Sprintf("%v.Devices", cmdPrefix)
	if cmd.Flags().Changed(DevicesFlagName) {
		// warning: Devices array type []*DeviceMapping is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResourcesIOMaximumBandwidthFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IOMaximumBandwidthFlagName := fmt.Sprintf("%v.IOMaximumBandwidth", cmdPrefix)
	if cmd.Flags().Changed(IOMaximumBandwidthFlagName) {

		var IOMaximumBandwidthFlagName string
		if cmdPrefix == "" {
			IOMaximumBandwidthFlagName = "IOMaximumBandwidth"
		} else {
			IOMaximumBandwidthFlagName = fmt.Sprintf("%v.IOMaximumBandwidth", cmdPrefix)
		}

		IOMaximumBandwidthFlagValue, err := cmd.Flags().GetInt64(IOMaximumBandwidthFlagName)
		if err != nil {
			return err, false
		}
		m.IOMaximumBandwidth = IOMaximumBandwidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesIOMaximumIOpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IOMaximumIOpsFlagName := fmt.Sprintf("%v.IOMaximumIOps", cmdPrefix)
	if cmd.Flags().Changed(IOMaximumIOpsFlagName) {

		var IOMaximumIOpsFlagName string
		if cmdPrefix == "" {
			IOMaximumIOpsFlagName = "IOMaximumIOps"
		} else {
			IOMaximumIOpsFlagName = fmt.Sprintf("%v.IOMaximumIOps", cmdPrefix)
		}

		IOMaximumIOpsFlagValue, err := cmd.Flags().GetInt64(IOMaximumIOpsFlagName)
		if err != nil {
			return err, false
		}
		m.IOMaximumIOps = IOMaximumIOpsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesInitFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	InitFlagName := fmt.Sprintf("%v.Init", cmdPrefix)
	if cmd.Flags().Changed(InitFlagName) {

		var InitFlagName string
		if cmdPrefix == "" {
			InitFlagName = "Init"
		} else {
			InitFlagName = fmt.Sprintf("%v.Init", cmdPrefix)
		}

		InitFlagValue, err := cmd.Flags().GetBool(InitFlagName)
		if err != nil {
			return err, false
		}
		m.Init = &InitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesKernelMemoryFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	KernelMemoryFlagName := fmt.Sprintf("%v.KernelMemory", cmdPrefix)
	if cmd.Flags().Changed(KernelMemoryFlagName) {

		var KernelMemoryFlagName string
		if cmdPrefix == "" {
			KernelMemoryFlagName = "KernelMemory"
		} else {
			KernelMemoryFlagName = fmt.Sprintf("%v.KernelMemory", cmdPrefix)
		}

		KernelMemoryFlagValue, err := cmd.Flags().GetInt64(KernelMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.KernelMemory = KernelMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesKernelMemoryTCPFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	KernelMemoryTCPFlagName := fmt.Sprintf("%v.KernelMemoryTCP", cmdPrefix)
	if cmd.Flags().Changed(KernelMemoryTCPFlagName) {

		var KernelMemoryTCPFlagName string
		if cmdPrefix == "" {
			KernelMemoryTCPFlagName = "KernelMemoryTCP"
		} else {
			KernelMemoryTCPFlagName = fmt.Sprintf("%v.KernelMemoryTCP", cmdPrefix)
		}

		KernelMemoryTCPFlagValue, err := cmd.Flags().GetInt64(KernelMemoryTCPFlagName)
		if err != nil {
			return err, false
		}
		m.KernelMemoryTCP = KernelMemoryTCPFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesMemoryFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MemoryFlagName := fmt.Sprintf("%v.Memory", cmdPrefix)
	if cmd.Flags().Changed(MemoryFlagName) {

		var MemoryFlagName string
		if cmdPrefix == "" {
			MemoryFlagName = "Memory"
		} else {
			MemoryFlagName = fmt.Sprintf("%v.Memory", cmdPrefix)
		}

		MemoryFlagValue, err := cmd.Flags().GetInt64(MemoryFlagName)
		if err != nil {
			return err, false
		}
		m.Memory = MemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesMemoryReservationFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MemoryReservationFlagName := fmt.Sprintf("%v.MemoryReservation", cmdPrefix)
	if cmd.Flags().Changed(MemoryReservationFlagName) {

		var MemoryReservationFlagName string
		if cmdPrefix == "" {
			MemoryReservationFlagName = "MemoryReservation"
		} else {
			MemoryReservationFlagName = fmt.Sprintf("%v.MemoryReservation", cmdPrefix)
		}

		MemoryReservationFlagValue, err := cmd.Flags().GetInt64(MemoryReservationFlagName)
		if err != nil {
			return err, false
		}
		m.MemoryReservation = MemoryReservationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesMemorySwapFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MemorySwapFlagName := fmt.Sprintf("%v.MemorySwap", cmdPrefix)
	if cmd.Flags().Changed(MemorySwapFlagName) {

		var MemorySwapFlagName string
		if cmdPrefix == "" {
			MemorySwapFlagName = "MemorySwap"
		} else {
			MemorySwapFlagName = fmt.Sprintf("%v.MemorySwap", cmdPrefix)
		}

		MemorySwapFlagValue, err := cmd.Flags().GetInt64(MemorySwapFlagName)
		if err != nil {
			return err, false
		}
		m.MemorySwap = MemorySwapFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesMemorySwappinessFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MemorySwappinessFlagName := fmt.Sprintf("%v.MemorySwappiness", cmdPrefix)
	if cmd.Flags().Changed(MemorySwappinessFlagName) {

		var MemorySwappinessFlagName string
		if cmdPrefix == "" {
			MemorySwappinessFlagName = "MemorySwappiness"
		} else {
			MemorySwappinessFlagName = fmt.Sprintf("%v.MemorySwappiness", cmdPrefix)
		}

		MemorySwappinessFlagValue, err := cmd.Flags().GetInt64(MemorySwappinessFlagName)
		if err != nil {
			return err, false
		}
		m.MemorySwappiness = &MemorySwappinessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesNanoCPUsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NanoCPUsFlagName := fmt.Sprintf("%v.NanoCPUs", cmdPrefix)
	if cmd.Flags().Changed(NanoCPUsFlagName) {

		var NanoCPUsFlagName string
		if cmdPrefix == "" {
			NanoCPUsFlagName = "NanoCPUs"
		} else {
			NanoCPUsFlagName = fmt.Sprintf("%v.NanoCPUs", cmdPrefix)
		}

		NanoCPUsFlagValue, err := cmd.Flags().GetInt64(NanoCPUsFlagName)
		if err != nil {
			return err, false
		}
		m.NanoCPUs = NanoCPUsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesOomKillDisableFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OomKillDisableFlagName := fmt.Sprintf("%v.OomKillDisable", cmdPrefix)
	if cmd.Flags().Changed(OomKillDisableFlagName) {

		var OomKillDisableFlagName string
		if cmdPrefix == "" {
			OomKillDisableFlagName = "OomKillDisable"
		} else {
			OomKillDisableFlagName = fmt.Sprintf("%v.OomKillDisable", cmdPrefix)
		}

		OomKillDisableFlagValue, err := cmd.Flags().GetBool(OomKillDisableFlagName)
		if err != nil {
			return err, false
		}
		m.OomKillDisable = OomKillDisableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesPidsLimitFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PidsLimitFlagName := fmt.Sprintf("%v.PidsLimit", cmdPrefix)
	if cmd.Flags().Changed(PidsLimitFlagName) {

		var PidsLimitFlagName string
		if cmdPrefix == "" {
			PidsLimitFlagName = "PidsLimit"
		} else {
			PidsLimitFlagName = fmt.Sprintf("%v.PidsLimit", cmdPrefix)
		}

		PidsLimitFlagValue, err := cmd.Flags().GetInt64(PidsLimitFlagName)
		if err != nil {
			return err, false
		}
		m.PidsLimit = &PidsLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesUlimitsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UlimitsFlagName := fmt.Sprintf("%v.Ulimits", cmdPrefix)
	if cmd.Flags().Changed(UlimitsFlagName) {
		// warning: Ulimits array type []*ResourcesUlimitsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for ResourcesBlkioWeightDeviceItems0

// register flags to command
func registerModelResourcesBlkioWeightDeviceItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerResourcesBlkioWeightDeviceItems0Path(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioWeightDeviceItems0Weight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerResourcesBlkioWeightDeviceItems0Path(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PathDescription := ``

	var PathFlagName string
	if cmdPrefix == "" {
		PathFlagName = "Path"
	} else {
		PathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
	}

	var PathFlagDefault string

	_ = cmd.PersistentFlags().String(PathFlagName, PathFlagDefault, PathDescription)

	return nil
}

func registerResourcesBlkioWeightDeviceItems0Weight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	WeightDescription := ``

	var WeightFlagName string
	if cmdPrefix == "" {
		WeightFlagName = "Weight"
	} else {
		WeightFlagName = fmt.Sprintf("%v.Weight", cmdPrefix)
	}

	var WeightFlagDefault int64

	_ = cmd.PersistentFlags().Int64(WeightFlagName, WeightFlagDefault, WeightDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelResourcesBlkioWeightDeviceItems0Flags(depth int, m *models.ResourcesBlkioWeightDeviceItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, PathAdded := retrieveResourcesBlkioWeightDeviceItems0PathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PathAdded

	err, WeightAdded := retrieveResourcesBlkioWeightDeviceItems0WeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WeightAdded

	return nil, retAdded
}

func retrieveResourcesBlkioWeightDeviceItems0PathFlags(depth int, m *models.ResourcesBlkioWeightDeviceItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PathFlagName := fmt.Sprintf("%v.Path", cmdPrefix)
	if cmd.Flags().Changed(PathFlagName) {

		var PathFlagName string
		if cmdPrefix == "" {
			PathFlagName = "Path"
		} else {
			PathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
		}

		PathFlagValue, err := cmd.Flags().GetString(PathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = PathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesBlkioWeightDeviceItems0WeightFlags(depth int, m *models.ResourcesBlkioWeightDeviceItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	WeightFlagName := fmt.Sprintf("%v.Weight", cmdPrefix)
	if cmd.Flags().Changed(WeightFlagName) {

		var WeightFlagName string
		if cmdPrefix == "" {
			WeightFlagName = "Weight"
		} else {
			WeightFlagName = fmt.Sprintf("%v.Weight", cmdPrefix)
		}

		WeightFlagValue, err := cmd.Flags().GetInt64(WeightFlagName)
		if err != nil {
			return err, false
		}
		m.Weight = &WeightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ResourcesUlimitsItems0

// register flags to command
func registerModelResourcesUlimitsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerResourcesUlimitsItems0Hard(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesUlimitsItems0Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesUlimitsItems0Soft(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerResourcesUlimitsItems0Hard(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HardDescription := `Hard limit`

	var HardFlagName string
	if cmdPrefix == "" {
		HardFlagName = "Hard"
	} else {
		HardFlagName = fmt.Sprintf("%v.Hard", cmdPrefix)
	}

	var HardFlagDefault int64

	_ = cmd.PersistentFlags().Int64(HardFlagName, HardFlagDefault, HardDescription)

	return nil
}

func registerResourcesUlimitsItems0Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Name of ulimit`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerResourcesUlimitsItems0Soft(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SoftDescription := `Soft limit`

	var SoftFlagName string
	if cmdPrefix == "" {
		SoftFlagName = "Soft"
	} else {
		SoftFlagName = fmt.Sprintf("%v.Soft", cmdPrefix)
	}

	var SoftFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SoftFlagName, SoftFlagDefault, SoftDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelResourcesUlimitsItems0Flags(depth int, m *models.ResourcesUlimitsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, HardAdded := retrieveResourcesUlimitsItems0HardFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HardAdded

	err, NameAdded := retrieveResourcesUlimitsItems0NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, SoftAdded := retrieveResourcesUlimitsItems0SoftFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SoftAdded

	return nil, retAdded
}

func retrieveResourcesUlimitsItems0HardFlags(depth int, m *models.ResourcesUlimitsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HardFlagName := fmt.Sprintf("%v.Hard", cmdPrefix)
	if cmd.Flags().Changed(HardFlagName) {

		var HardFlagName string
		if cmdPrefix == "" {
			HardFlagName = "Hard"
		} else {
			HardFlagName = fmt.Sprintf("%v.Hard", cmdPrefix)
		}

		HardFlagValue, err := cmd.Flags().GetInt64(HardFlagName)
		if err != nil {
			return err, false
		}
		m.Hard = HardFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesUlimitsItems0NameFlags(depth int, m *models.ResourcesUlimitsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveResourcesUlimitsItems0SoftFlags(depth int, m *models.ResourcesUlimitsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SoftFlagName := fmt.Sprintf("%v.Soft", cmdPrefix)
	if cmd.Flags().Changed(SoftFlagName) {

		var SoftFlagName string
		if cmdPrefix == "" {
			SoftFlagName = "Soft"
		} else {
			SoftFlagName = fmt.Sprintf("%v.Soft", cmdPrefix)
		}

		SoftFlagValue, err := cmd.Flags().GetInt64(SoftFlagName)
		if err != nil {
			return err, false
		}
		m.Soft = SoftFlagValue

		retAdded = true
	}

	return nil, retAdded
}
