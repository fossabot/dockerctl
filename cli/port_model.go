// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for Port

// register flags to command
func registerModelPortFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortPrivatePort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortPublicPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPDescription := `Host IP address that the container's port is mapped to`

	var IPFlagName string
	if cmdPrefix == "" {
		IPFlagName = "IP"
	} else {
		IPFlagName = fmt.Sprintf("%v.IP", cmdPrefix)
	}

	var IPFlagDefault string

	_ = cmd.PersistentFlags().String(IPFlagName, IPFlagDefault, IPDescription)

	return nil
}

func registerPortPrivatePort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive PrivatePort uint16 is not supported by go-swagger cli yet

	return nil
}

func registerPortPublicPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive PublicPort uint16 is not supported by go-swagger cli yet

	return nil
}

func registerPortType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := `Enum: ["tcp","udp","sctp"]. Required. `

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "Type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(TypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["tcp","udp","sctp"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IPAdded := retrievePortIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAdded

	err, PrivatePortAdded := retrievePortPrivatePortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PrivatePortAdded

	err, PublicPortAdded := retrievePortPublicPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PublicPortAdded

	err, TypeAdded := retrievePortTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrievePortIPFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPFlagName := fmt.Sprintf("%v.IP", cmdPrefix)
	if cmd.Flags().Changed(IPFlagName) {

		var IPFlagName string
		if cmdPrefix == "" {
			IPFlagName = "IP"
		} else {
			IPFlagName = fmt.Sprintf("%v.IP", cmdPrefix)
		}

		IPFlagValue, err := cmd.Flags().GetString(IPFlagName)
		if err != nil {
			return err, false
		}
		m.IP = IPFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortPrivatePortFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PrivatePortFlagName := fmt.Sprintf("%v.PrivatePort", cmdPrefix)
	if cmd.Flags().Changed(PrivatePortFlagName) {

		// warning: primitive PrivatePort uint16 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortPublicPortFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PublicPortFlagName := fmt.Sprintf("%v.PublicPort", cmdPrefix)
	if cmd.Flags().Changed(PublicPortFlagName) {

		// warning: primitive PublicPort uint16 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortTypeFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "Type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
