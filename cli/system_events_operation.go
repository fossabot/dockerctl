// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/system"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSystemSystemEventsCmd returns a cmd to handle operation systemEvents
func makeOperationSystemSystemEventsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "SystemEvents",
		Short: `Stream real-time events from the server.

Various objects within Docker report events when something happens to them.

Containers report these events: ` + "`" + `attach` + "`" + `, ` + "`" + `commit` + "`" + `, ` + "`" + `copy` + "`" + `, ` + "`" + `create` + "`" + `, ` + "`" + `destroy` + "`" + `, ` + "`" + `detach` + "`" + `, ` + "`" + `die` + "`" + `, ` + "`" + `exec_create` + "`" + `, ` + "`" + `exec_detach` + "`" + `, ` + "`" + `exec_start` + "`" + `, ` + "`" + `exec_die` + "`" + `, ` + "`" + `export` + "`" + `, ` + "`" + `health_status` + "`" + `, ` + "`" + `kill` + "`" + `, ` + "`" + `oom` + "`" + `, ` + "`" + `pause` + "`" + `, ` + "`" + `rename` + "`" + `, ` + "`" + `resize` + "`" + `, ` + "`" + `restart` + "`" + `, ` + "`" + `start` + "`" + `, ` + "`" + `stop` + "`" + `, ` + "`" + `top` + "`" + `, ` + "`" + `unpause` + "`" + `, and ` + "`" + `update` + "`" + `

Images report these events: ` + "`" + `delete` + "`" + `, ` + "`" + `import` + "`" + `, ` + "`" + `load` + "`" + `, ` + "`" + `pull` + "`" + `, ` + "`" + `push` + "`" + `, ` + "`" + `save` + "`" + `, ` + "`" + `tag` + "`" + `, and ` + "`" + `untag` + "`" + `

Volumes report these events: ` + "`" + `create` + "`" + `, ` + "`" + `mount` + "`" + `, ` + "`" + `unmount` + "`" + `, and ` + "`" + `destroy` + "`" + `

Networks report these events: ` + "`" + `create` + "`" + `, ` + "`" + `connect` + "`" + `, ` + "`" + `disconnect` + "`" + `, ` + "`" + `destroy` + "`" + `, ` + "`" + `update` + "`" + `, and ` + "`" + `remove` + "`" + `

The Docker daemon reports these events: ` + "`" + `reload` + "`" + `

Services report these events: ` + "`" + `create` + "`" + `, ` + "`" + `update` + "`" + `, and ` + "`" + `remove` + "`" + `

Nodes report these events: ` + "`" + `create` + "`" + `, ` + "`" + `update` + "`" + `, and ` + "`" + `remove` + "`" + `

Secrets report these events: ` + "`" + `create` + "`" + `, ` + "`" + `update` + "`" + `, and ` + "`" + `remove` + "`" + `

Configs report these events: ` + "`" + `create` + "`" + `, ` + "`" + `update` + "`" + `, and ` + "`" + `remove` + "`" + `
`,
		RunE: runOperationSystemSystemEvents,
	}

	if err := registerOperationSystemSystemEventsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSystemSystemEvents uses cmd flags to call endpoint api
func runOperationSystemSystemEvents(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := system.NewSystemEventsParams()
	if err, _ := retrieveOperationSystemSystemEventsFiltersFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSystemSystemEventsSinceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSystemSystemEventsUntilFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSystemSystemEventsResult(appCli.System.SystemEvents(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSystemSystemEventsParamFlags registers all flags needed to fill params
func registerOperationSystemSystemEventsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSystemSystemEventsFiltersParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSystemSystemEventsSinceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSystemSystemEventsUntilParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSystemSystemEventsFiltersParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	FiltersDescription := `A JSON encoded value of filters (a ` + "`" + `map[string][]string` + "`" + `) to process on the event list. Available filters:

- ` + "`" + `config=<string>` + "`" + ` config name or ID
- ` + "`" + `container=<string>` + "`" + ` container name or ID
- ` + "`" + `daemon=<string>` + "`" + ` daemon name or ID
- ` + "`" + `event=<string>` + "`" + ` event type
- ` + "`" + `image=<string>` + "`" + ` image name or ID
- ` + "`" + `label=<string>` + "`" + ` image or container label
- ` + "`" + `network=<string>` + "`" + ` network name or ID
- ` + "`" + `node=<string>` + "`" + ` node ID
- ` + "`" + `plugin` + "`" + `=<string> plugin name or ID
- ` + "`" + `scope` + "`" + `=<string> local or swarm
- ` + "`" + `secret=<string>` + "`" + ` secret name or ID
- ` + "`" + `service=<string>` + "`" + ` service name or ID
- ` + "`" + `type=<string>` + "`" + ` object to filter by, one of ` + "`" + `container` + "`" + `, ` + "`" + `image` + "`" + `, ` + "`" + `volume` + "`" + `, ` + "`" + `network` + "`" + `, ` + "`" + `daemon` + "`" + `, ` + "`" + `plugin` + "`" + `, ` + "`" + `node` + "`" + `, ` + "`" + `service` + "`" + `, ` + "`" + `secret` + "`" + ` or ` + "`" + `config` + "`" + `
- ` + "`" + `volume=<string>` + "`" + ` volume name
`

	var FiltersFlagName string
	if cmdPrefix == "" {
		FiltersFlagName = "filters"
	} else {
		FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
	}

	var FiltersFlagDefault string

	_ = cmd.PersistentFlags().String(FiltersFlagName, FiltersFlagDefault, FiltersDescription)

	return nil
}
func registerOperationSystemSystemEventsSinceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	SinceDescription := `Show events created since this timestamp then stream new events.`

	var SinceFlagName string
	if cmdPrefix == "" {
		SinceFlagName = "since"
	} else {
		SinceFlagName = fmt.Sprintf("%v.since", cmdPrefix)
	}

	var SinceFlagDefault string

	_ = cmd.PersistentFlags().String(SinceFlagName, SinceFlagDefault, SinceDescription)

	return nil
}
func registerOperationSystemSystemEventsUntilParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	UntilDescription := `Show events created until this timestamp then stop streaming.`

	var UntilFlagName string
	if cmdPrefix == "" {
		UntilFlagName = "until"
	} else {
		UntilFlagName = fmt.Sprintf("%v.until", cmdPrefix)
	}

	var UntilFlagDefault string

	_ = cmd.PersistentFlags().String(UntilFlagName, UntilFlagDefault, UntilDescription)

	return nil
}

func retrieveOperationSystemSystemEventsFiltersFlag(m *system.SystemEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filters") {

		var FiltersFlagName string
		if cmdPrefix == "" {
			FiltersFlagName = "filters"
		} else {
			FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
		}

		FiltersFlagValue, err := cmd.Flags().GetString(FiltersFlagName)
		if err != nil {
			return err, false
		}
		m.Filters = &FiltersFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSystemSystemEventsSinceFlag(m *system.SystemEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("since") {

		var SinceFlagName string
		if cmdPrefix == "" {
			SinceFlagName = "since"
		} else {
			SinceFlagName = fmt.Sprintf("%v.since", cmdPrefix)
		}

		SinceFlagValue, err := cmd.Flags().GetString(SinceFlagName)
		if err != nil {
			return err, false
		}
		m.Since = &SinceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSystemSystemEventsUntilFlag(m *system.SystemEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("until") {

		var UntilFlagName string
		if cmdPrefix == "" {
			UntilFlagName = "until"
		} else {
			UntilFlagName = fmt.Sprintf("%v.until", cmdPrefix)
		}

		UntilFlagValue, err := cmd.Flags().GetString(UntilFlagName)
		if err != nil {
			return err, false
		}
		m.Until = &UntilFlagValue

	}
	return nil, retAdded
}

// parseOperationSystemSystemEventsResult parses request result and return the string content
func parseOperationSystemSystemEventsResult(resp0 *system.SystemEventsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*system.SystemEventsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*system.SystemEventsBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*system.SystemEventsInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelSystemEventsOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSystemEventsOKBodyAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemEventsOKBodyActor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemEventsOKBodyType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemEventsOKBodyTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemEventsOKBodyTimeNano(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemEventsOKBodyAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ActionDescription := `The type of event`

	var ActionFlagName string
	if cmdPrefix == "" {
		ActionFlagName = "Action"
	} else {
		ActionFlagName = fmt.Sprintf("%v.Action", cmdPrefix)
	}

	var ActionFlagDefault string

	_ = cmd.PersistentFlags().String(ActionFlagName, ActionFlagDefault, ActionDescription)

	return nil
}

func registerSystemEventsOKBodyActor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ActorFlagName string
	if cmdPrefix == "" {
		ActorFlagName = "Actor"
	} else {
		ActorFlagName = fmt.Sprintf("%v.Actor", cmdPrefix)
	}

	if err := registerModelSystemEventsOKBodyActorFlags(depth+1, ActorFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemEventsOKBodyType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := `The type of object emitting the event`

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "Type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	return nil
}

func registerSystemEventsOKBodyTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TimeDescription := `Timestamp of event`

	var TimeFlagName string
	if cmdPrefix == "" {
		TimeFlagName = "time"
	} else {
		TimeFlagName = fmt.Sprintf("%v.time", cmdPrefix)
	}

	var TimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(TimeFlagName, TimeFlagDefault, TimeDescription)

	return nil
}

func registerSystemEventsOKBodyTimeNano(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TimeNanoDescription := `Timestamp of event, with nanosecond accuracy`

	var TimeNanoFlagName string
	if cmdPrefix == "" {
		TimeNanoFlagName = "timeNano"
	} else {
		TimeNanoFlagName = fmt.Sprintf("%v.timeNano", cmdPrefix)
	}

	var TimeNanoFlagDefault int64

	_ = cmd.PersistentFlags().Int64(TimeNanoFlagName, TimeNanoFlagDefault, TimeNanoDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSystemEventsOKBodyFlags(depth int, m *system.SystemEventsOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ActionAdded := retrieveSystemEventsOKBodyActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ActionAdded

	err, ActorAdded := retrieveSystemEventsOKBodyActorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ActorAdded

	err, TypeAdded := retrieveSystemEventsOKBodyTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, TimeAdded := retrieveSystemEventsOKBodyTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimeAdded

	err, TimeNanoAdded := retrieveSystemEventsOKBodyTimeNanoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimeNanoAdded

	return nil, retAdded
}

func retrieveSystemEventsOKBodyActionFlags(depth int, m *system.SystemEventsOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ActionFlagName := fmt.Sprintf("%v.Action", cmdPrefix)
	if cmd.Flags().Changed(ActionFlagName) {

		var ActionFlagName string
		if cmdPrefix == "" {
			ActionFlagName = "Action"
		} else {
			ActionFlagName = fmt.Sprintf("%v.Action", cmdPrefix)
		}

		ActionFlagValue, err := cmd.Flags().GetString(ActionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = ActionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemEventsOKBodyActorFlags(depth int, m *system.SystemEventsOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ActorFlagName := fmt.Sprintf("%v.Actor", cmdPrefix)
	if cmd.Flags().Changed(ActorFlagName) {
		// info: complex object Actor SystemEventsOKBodyActor is retrieved outside this Changed() block
	}
	ActorFlagValue := m.Actor
	if swag.IsZero(ActorFlagValue) {
		ActorFlagValue = &system.SystemEventsOKBodyActor{}
	}

	err, ActorAdded := retrieveModelSystemEventsOKBodyActorFlags(depth+1, ActorFlagValue, ActorFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ActorAdded
	if ActorAdded {
		m.Actor = ActorFlagValue
	}

	return nil, retAdded
}

func retrieveSystemEventsOKBodyTypeFlags(depth int, m *system.SystemEventsOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "Type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemEventsOKBodyTimeFlags(depth int, m *system.SystemEventsOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TimeFlagName := fmt.Sprintf("%v.time", cmdPrefix)
	if cmd.Flags().Changed(TimeFlagName) {

		var TimeFlagName string
		if cmdPrefix == "" {
			TimeFlagName = "time"
		} else {
			TimeFlagName = fmt.Sprintf("%v.time", cmdPrefix)
		}

		TimeFlagValue, err := cmd.Flags().GetInt64(TimeFlagName)
		if err != nil {
			return err, false
		}
		m.Time = TimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemEventsOKBodyTimeNanoFlags(depth int, m *system.SystemEventsOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TimeNanoFlagName := fmt.Sprintf("%v.timeNano", cmdPrefix)
	if cmd.Flags().Changed(TimeNanoFlagName) {

		var TimeNanoFlagName string
		if cmdPrefix == "" {
			TimeNanoFlagName = "timeNano"
		} else {
			TimeNanoFlagName = fmt.Sprintf("%v.timeNano", cmdPrefix)
		}

		TimeNanoFlagValue, err := cmd.Flags().GetInt64(TimeNanoFlagName)
		if err != nil {
			return err, false
		}
		m.TimeNano = TimeNanoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelSystemEventsOKBodyActorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSystemEventsOKBodyActorAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemEventsOKBodyActorID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemEventsOKBodyActorAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Attributes map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerSystemEventsOKBodyActorID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := `The ID of the object emitting the event`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "ID"
	} else {
		IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSystemEventsOKBodyActorFlags(depth int, m *system.SystemEventsOKBodyActor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AttributesAdded := retrieveSystemEventsOKBodyActorAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttributesAdded

	err, IDAdded := retrieveSystemEventsOKBodyActorIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	return nil, retAdded
}

func retrieveSystemEventsOKBodyActorAttributesFlags(depth int, m *system.SystemEventsOKBodyActor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AttributesFlagName := fmt.Sprintf("%v.Attributes", cmdPrefix)
	if cmd.Flags().Changed(AttributesFlagName) {
		// warning: Attributes map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSystemEventsOKBodyActorIDFlags(depth int, m *system.SystemEventsOKBodyActor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "ID"
		} else {
			IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}
