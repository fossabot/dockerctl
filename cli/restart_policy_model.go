// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for RestartPolicy

// register flags to command
func registerModelRestartPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRestartPolicyMaximumRetryCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRestartPolicyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRestartPolicyMaximumRetryCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MaximumRetryCountDescription := `If ` + "`" + `on-failure` + "`" + ` is used, the number of times to retry before giving up`

	var MaximumRetryCountFlagName string
	if cmdPrefix == "" {
		MaximumRetryCountFlagName = "MaximumRetryCount"
	} else {
		MaximumRetryCountFlagName = fmt.Sprintf("%v.MaximumRetryCount", cmdPrefix)
	}

	var MaximumRetryCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(MaximumRetryCountFlagName, MaximumRetryCountFlagDefault, MaximumRetryCountDescription)

	return nil
}

func registerRestartPolicyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Enum: ["","always","unless-stopped","on-failure"]. - Empty string means not to restart
- ` + "`" + `always` + "`" + ` Always restart
- ` + "`" + `unless-stopped` + "`" + ` Restart always except when the user has manually stopped the container
- ` + "`" + `on-failure` + "`" + ` Restart only when the container exit code is non-zero
`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	if err := cmd.RegisterFlagCompletionFunc(NameFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["","always","unless-stopped","on-failure"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRestartPolicyFlags(depth int, m *models.RestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MaximumRetryCountAdded := retrieveRestartPolicyMaximumRetryCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaximumRetryCountAdded

	err, NameAdded := retrieveRestartPolicyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	return nil, retAdded
}

func retrieveRestartPolicyMaximumRetryCountFlags(depth int, m *models.RestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MaximumRetryCountFlagName := fmt.Sprintf("%v.MaximumRetryCount", cmdPrefix)
	if cmd.Flags().Changed(MaximumRetryCountFlagName) {

		var MaximumRetryCountFlagName string
		if cmdPrefix == "" {
			MaximumRetryCountFlagName = "MaximumRetryCount"
		} else {
			MaximumRetryCountFlagName = fmt.Sprintf("%v.MaximumRetryCount", cmdPrefix)
		}

		MaximumRetryCountFlagValue, err := cmd.Flags().GetInt64(MaximumRetryCountFlagName)
		if err != nil {
			return err, false
		}
		m.MaximumRetryCount = MaximumRetryCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRestartPolicyNameFlags(depth int, m *models.RestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
