// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for SwarmInfo

// register flags to command
func registerModelSwarmInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmInfoCluster(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInfoControlAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInfoError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInfoLocalNodeState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInfoManagers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInfoNodeAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInfoNodeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInfoNodes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInfoRemoteManagers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmInfoCluster(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ClusterFlagName string
	if cmdPrefix == "" {
		ClusterFlagName = "Cluster"
	} else {
		ClusterFlagName = fmt.Sprintf("%v.Cluster", cmdPrefix)
	}

	if err := registerModelClusterInfoFlags(depth+1, ClusterFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmInfoControlAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ControlAvailableDescription := ``

	var ControlAvailableFlagName string
	if cmdPrefix == "" {
		ControlAvailableFlagName = "ControlAvailable"
	} else {
		ControlAvailableFlagName = fmt.Sprintf("%v.ControlAvailable", cmdPrefix)
	}

	var ControlAvailableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ControlAvailableFlagName, ControlAvailableFlagDefault, ControlAvailableDescription)

	return nil
}

func registerSwarmInfoError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ErrorDescription := ``

	var ErrorFlagName string
	if cmdPrefix == "" {
		ErrorFlagName = "Error"
	} else {
		ErrorFlagName = fmt.Sprintf("%v.Error", cmdPrefix)
	}

	var ErrorFlagDefault string

	_ = cmd.PersistentFlags().String(ErrorFlagName, ErrorFlagDefault, ErrorDescription)

	return nil
}

func registerSwarmInfoLocalNodeState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive LocalNodeState LocalNodeState is not supported by go-swagger cli yet

	return nil
}

func registerSwarmInfoManagers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ManagersDescription := `Total number of managers in the swarm.`

	var ManagersFlagName string
	if cmdPrefix == "" {
		ManagersFlagName = "Managers"
	} else {
		ManagersFlagName = fmt.Sprintf("%v.Managers", cmdPrefix)
	}

	var ManagersFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ManagersFlagName, ManagersFlagDefault, ManagersDescription)

	return nil
}

func registerSwarmInfoNodeAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NodeAddrDescription := `IP address at which this node can be reached by other nodes in the
swarm.
`

	var NodeAddrFlagName string
	if cmdPrefix == "" {
		NodeAddrFlagName = "NodeAddr"
	} else {
		NodeAddrFlagName = fmt.Sprintf("%v.NodeAddr", cmdPrefix)
	}

	var NodeAddrFlagDefault string

	_ = cmd.PersistentFlags().String(NodeAddrFlagName, NodeAddrFlagDefault, NodeAddrDescription)

	return nil
}

func registerSwarmInfoNodeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NodeIDDescription := `Unique identifier of for this node in the swarm.`

	var NodeIDFlagName string
	if cmdPrefix == "" {
		NodeIDFlagName = "NodeID"
	} else {
		NodeIDFlagName = fmt.Sprintf("%v.NodeID", cmdPrefix)
	}

	var NodeIDFlagDefault string

	_ = cmd.PersistentFlags().String(NodeIDFlagName, NodeIDFlagDefault, NodeIDDescription)

	return nil
}

func registerSwarmInfoNodes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NodesDescription := `Total number of nodes in the swarm.`

	var NodesFlagName string
	if cmdPrefix == "" {
		NodesFlagName = "Nodes"
	} else {
		NodesFlagName = fmt.Sprintf("%v.Nodes", cmdPrefix)
	}

	var NodesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(NodesFlagName, NodesFlagDefault, NodesDescription)

	return nil
}

func registerSwarmInfoRemoteManagers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: RemoteManagers []*PeerNode array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmInfoFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ClusterAdded := retrieveSwarmInfoClusterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ClusterAdded

	err, ControlAvailableAdded := retrieveSwarmInfoControlAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ControlAvailableAdded

	err, ErrorAdded := retrieveSwarmInfoErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded

	err, LocalNodeStateAdded := retrieveSwarmInfoLocalNodeStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocalNodeStateAdded

	err, ManagersAdded := retrieveSwarmInfoManagersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ManagersAdded

	err, NodeAddrAdded := retrieveSwarmInfoNodeAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NodeAddrAdded

	err, NodeIDAdded := retrieveSwarmInfoNodeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NodeIDAdded

	err, NodesAdded := retrieveSwarmInfoNodesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NodesAdded

	err, RemoteManagersAdded := retrieveSwarmInfoRemoteManagersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RemoteManagersAdded

	return nil, retAdded
}

func retrieveSwarmInfoClusterFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ClusterFlagName := fmt.Sprintf("%v.Cluster", cmdPrefix)
	if cmd.Flags().Changed(ClusterFlagName) {
		// info: complex object Cluster ClusterInfo is retrieved outside this Changed() block
	}
	ClusterFlagValue := m.Cluster
	if swag.IsZero(ClusterFlagValue) {
		ClusterFlagValue = &models.ClusterInfo{}
	}

	err, ClusterAdded := retrieveModelClusterInfoFlags(depth+1, ClusterFlagValue, ClusterFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ClusterAdded
	if ClusterAdded {
		m.Cluster = ClusterFlagValue
	}

	return nil, retAdded
}

func retrieveSwarmInfoControlAvailableFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ControlAvailableFlagName := fmt.Sprintf("%v.ControlAvailable", cmdPrefix)
	if cmd.Flags().Changed(ControlAvailableFlagName) {

		var ControlAvailableFlagName string
		if cmdPrefix == "" {
			ControlAvailableFlagName = "ControlAvailable"
		} else {
			ControlAvailableFlagName = fmt.Sprintf("%v.ControlAvailable", cmdPrefix)
		}

		ControlAvailableFlagValue, err := cmd.Flags().GetBool(ControlAvailableFlagName)
		if err != nil {
			return err, false
		}
		m.ControlAvailable = &ControlAvailableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmInfoErrorFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ErrorFlagName := fmt.Sprintf("%v.Error", cmdPrefix)
	if cmd.Flags().Changed(ErrorFlagName) {

		var ErrorFlagName string
		if cmdPrefix == "" {
			ErrorFlagName = "Error"
		} else {
			ErrorFlagName = fmt.Sprintf("%v.Error", cmdPrefix)
		}

		ErrorFlagValue, err := cmd.Flags().GetString(ErrorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = ErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmInfoLocalNodeStateFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LocalNodeStateFlagName := fmt.Sprintf("%v.LocalNodeState", cmdPrefix)
	if cmd.Flags().Changed(LocalNodeStateFlagName) {

		// warning: primitive LocalNodeState LocalNodeState is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmInfoManagersFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ManagersFlagName := fmt.Sprintf("%v.Managers", cmdPrefix)
	if cmd.Flags().Changed(ManagersFlagName) {

		var ManagersFlagName string
		if cmdPrefix == "" {
			ManagersFlagName = "Managers"
		} else {
			ManagersFlagName = fmt.Sprintf("%v.Managers", cmdPrefix)
		}

		ManagersFlagValue, err := cmd.Flags().GetInt64(ManagersFlagName)
		if err != nil {
			return err, false
		}
		m.Managers = &ManagersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmInfoNodeAddrFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NodeAddrFlagName := fmt.Sprintf("%v.NodeAddr", cmdPrefix)
	if cmd.Flags().Changed(NodeAddrFlagName) {

		var NodeAddrFlagName string
		if cmdPrefix == "" {
			NodeAddrFlagName = "NodeAddr"
		} else {
			NodeAddrFlagName = fmt.Sprintf("%v.NodeAddr", cmdPrefix)
		}

		NodeAddrFlagValue, err := cmd.Flags().GetString(NodeAddrFlagName)
		if err != nil {
			return err, false
		}
		m.NodeAddr = NodeAddrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmInfoNodeIDFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NodeIDFlagName := fmt.Sprintf("%v.NodeID", cmdPrefix)
	if cmd.Flags().Changed(NodeIDFlagName) {

		var NodeIDFlagName string
		if cmdPrefix == "" {
			NodeIDFlagName = "NodeID"
		} else {
			NodeIDFlagName = fmt.Sprintf("%v.NodeID", cmdPrefix)
		}

		NodeIDFlagValue, err := cmd.Flags().GetString(NodeIDFlagName)
		if err != nil {
			return err, false
		}
		m.NodeID = NodeIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmInfoNodesFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NodesFlagName := fmt.Sprintf("%v.Nodes", cmdPrefix)
	if cmd.Flags().Changed(NodesFlagName) {

		var NodesFlagName string
		if cmdPrefix == "" {
			NodesFlagName = "Nodes"
		} else {
			NodesFlagName = fmt.Sprintf("%v.Nodes", cmdPrefix)
		}

		NodesFlagValue, err := cmd.Flags().GetInt64(NodesFlagName)
		if err != nil {
			return err, false
		}
		m.Nodes = &NodesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmInfoRemoteManagersFlags(depth int, m *models.SwarmInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RemoteManagersFlagName := fmt.Sprintf("%v.RemoteManagers", cmdPrefix)
	if cmd.Flags().Changed(RemoteManagersFlagName) {
		// warning: RemoteManagers array type []*PeerNode is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
