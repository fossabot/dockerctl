// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for ServiceSpec

// register flags to command
func registerModelServiceSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceSpecEndpointSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecNetworks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecRollbackConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecTaskTemplate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecUpdateConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecEndpointSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var EndpointSpecFlagName string
	if cmdPrefix == "" {
		EndpointSpecFlagName = "EndpointSpec"
	} else {
		EndpointSpecFlagName = fmt.Sprintf("%v.EndpointSpec", cmdPrefix)
	}

	if err := registerModelEndpointSpecFlags(depth+1, EndpointSpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceSpecMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ModeFlagName string
	if cmdPrefix == "" {
		ModeFlagName = "Mode"
	} else {
		ModeFlagName = fmt.Sprintf("%v.Mode", cmdPrefix)
	}

	if err := registerModelServiceSpecModeFlags(depth+1, ModeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Name of the service.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerServiceSpecNetworks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Networks []*NetworkAttachmentConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerServiceSpecRollbackConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var RollbackConfigFlagName string
	if cmdPrefix == "" {
		RollbackConfigFlagName = "RollbackConfig"
	} else {
		RollbackConfigFlagName = fmt.Sprintf("%v.RollbackConfig", cmdPrefix)
	}

	if err := registerModelServiceSpecRollbackConfigFlags(depth+1, RollbackConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecTaskTemplate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var TaskTemplateFlagName string
	if cmdPrefix == "" {
		TaskTemplateFlagName = "TaskTemplate"
	} else {
		TaskTemplateFlagName = fmt.Sprintf("%v.TaskTemplate", cmdPrefix)
	}

	if err := registerModelTaskSpecFlags(depth+1, TaskTemplateFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecUpdateConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var UpdateConfigFlagName string
	if cmdPrefix == "" {
		UpdateConfigFlagName = "UpdateConfig"
	} else {
		UpdateConfigFlagName = fmt.Sprintf("%v.UpdateConfig", cmdPrefix)
	}

	if err := registerModelServiceSpecUpdateConfigFlags(depth+1, UpdateConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceSpecFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EndpointSpecAdded := retrieveServiceSpecEndpointSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EndpointSpecAdded

	err, LabelsAdded := retrieveServiceSpecLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, ModeAdded := retrieveServiceSpecModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModeAdded

	err, NameAdded := retrieveServiceSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, NetworksAdded := retrieveServiceSpecNetworksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworksAdded

	err, RollbackConfigAdded := retrieveServiceSpecRollbackConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RollbackConfigAdded

	err, TaskTemplateAdded := retrieveServiceSpecTaskTemplateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TaskTemplateAdded

	err, UpdateConfigAdded := retrieveServiceSpecUpdateConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdateConfigAdded

	return nil, retAdded
}

func retrieveServiceSpecEndpointSpecFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EndpointSpecFlagName := fmt.Sprintf("%v.EndpointSpec", cmdPrefix)
	if cmd.Flags().Changed(EndpointSpecFlagName) {
		// info: complex object EndpointSpec EndpointSpec is retrieved outside this Changed() block
	}
	EndpointSpecFlagValue := m.EndpointSpec
	if swag.IsZero(EndpointSpecFlagValue) {
		EndpointSpecFlagValue = &models.EndpointSpec{}
	}

	err, EndpointSpecAdded := retrieveModelEndpointSpecFlags(depth+1, EndpointSpecFlagValue, EndpointSpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EndpointSpecAdded
	if EndpointSpecAdded {
		m.EndpointSpec = EndpointSpecFlagValue
	}

	return nil, retAdded
}

func retrieveServiceSpecLabelsFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceSpecModeFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ModeFlagName := fmt.Sprintf("%v.Mode", cmdPrefix)
	if cmd.Flags().Changed(ModeFlagName) {
		// info: complex object Mode ServiceSpecMode is retrieved outside this Changed() block
	}
	ModeFlagValue := m.Mode
	if swag.IsZero(ModeFlagValue) {
		ModeFlagValue = &models.ServiceSpecMode{}
	}

	err, ModeAdded := retrieveModelServiceSpecModeFlags(depth+1, ModeFlagValue, ModeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModeAdded
	if ModeAdded {
		m.Mode = ModeFlagValue
	}

	return nil, retAdded
}

func retrieveServiceSpecNameFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecNetworksFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworksFlagName := fmt.Sprintf("%v.Networks", cmdPrefix)
	if cmd.Flags().Changed(NetworksFlagName) {
		// warning: Networks array type []*NetworkAttachmentConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceSpecRollbackConfigFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RollbackConfigFlagName := fmt.Sprintf("%v.RollbackConfig", cmdPrefix)
	if cmd.Flags().Changed(RollbackConfigFlagName) {
		// info: complex object RollbackConfig ServiceSpecRollbackConfig is retrieved outside this Changed() block
	}
	RollbackConfigFlagValue := m.RollbackConfig
	if swag.IsZero(RollbackConfigFlagValue) {
		RollbackConfigFlagValue = &models.ServiceSpecRollbackConfig{}
	}

	err, RollbackConfigAdded := retrieveModelServiceSpecRollbackConfigFlags(depth+1, RollbackConfigFlagValue, RollbackConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RollbackConfigAdded
	if RollbackConfigAdded {
		m.RollbackConfig = RollbackConfigFlagValue
	}

	return nil, retAdded
}

func retrieveServiceSpecTaskTemplateFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TaskTemplateFlagName := fmt.Sprintf("%v.TaskTemplate", cmdPrefix)
	if cmd.Flags().Changed(TaskTemplateFlagName) {
		// info: complex object TaskTemplate TaskSpec is retrieved outside this Changed() block
	}
	TaskTemplateFlagValue := m.TaskTemplate
	if swag.IsZero(TaskTemplateFlagValue) {
		TaskTemplateFlagValue = &models.TaskSpec{}
	}

	err, TaskTemplateAdded := retrieveModelTaskSpecFlags(depth+1, TaskTemplateFlagValue, TaskTemplateFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TaskTemplateAdded
	if TaskTemplateAdded {
		m.TaskTemplate = TaskTemplateFlagValue
	}

	return nil, retAdded
}

func retrieveServiceSpecUpdateConfigFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UpdateConfigFlagName := fmt.Sprintf("%v.UpdateConfig", cmdPrefix)
	if cmd.Flags().Changed(UpdateConfigFlagName) {
		// info: complex object UpdateConfig ServiceSpecUpdateConfig is retrieved outside this Changed() block
	}
	UpdateConfigFlagValue := m.UpdateConfig
	if swag.IsZero(UpdateConfigFlagValue) {
		UpdateConfigFlagValue = &models.ServiceSpecUpdateConfig{}
	}

	err, UpdateConfigAdded := retrieveModelServiceSpecUpdateConfigFlags(depth+1, UpdateConfigFlagValue, UpdateConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdateConfigAdded
	if UpdateConfigAdded {
		m.UpdateConfig = UpdateConfigFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for ServiceSpecMode

// register flags to command
func registerModelServiceSpecModeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceSpecModeGlobal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecModeReplicated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecModeGlobal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Global interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceSpecModeReplicated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ReplicatedFlagName string
	if cmdPrefix == "" {
		ReplicatedFlagName = "Replicated"
	} else {
		ReplicatedFlagName = fmt.Sprintf("%v.Replicated", cmdPrefix)
	}

	if err := registerModelServiceSpecModeReplicatedFlags(depth+1, ReplicatedFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceSpecModeFlags(depth int, m *models.ServiceSpecMode, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, GlobalAdded := retrieveServiceSpecModeGlobalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GlobalAdded

	err, ReplicatedAdded := retrieveServiceSpecModeReplicatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReplicatedAdded

	return nil, retAdded
}

func retrieveServiceSpecModeGlobalFlags(depth int, m *models.ServiceSpecMode, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GlobalFlagName := fmt.Sprintf("%v.Global", cmdPrefix)
	if cmd.Flags().Changed(GlobalFlagName) {
		// warning: Global map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceSpecModeReplicatedFlags(depth int, m *models.ServiceSpecMode, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ReplicatedFlagName := fmt.Sprintf("%v.Replicated", cmdPrefix)
	if cmd.Flags().Changed(ReplicatedFlagName) {
		// info: complex object Replicated ServiceSpecModeReplicated is retrieved outside this Changed() block
	}
	ReplicatedFlagValue := m.Replicated
	if swag.IsZero(ReplicatedFlagValue) {
		ReplicatedFlagValue = &models.ServiceSpecModeReplicated{}
	}

	err, ReplicatedAdded := retrieveModelServiceSpecModeReplicatedFlags(depth+1, ReplicatedFlagValue, ReplicatedFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReplicatedAdded
	if ReplicatedAdded {
		m.Replicated = ReplicatedFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for ServiceSpecModeReplicated

// register flags to command
func registerModelServiceSpecModeReplicatedFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceSpecModeReplicatedReplicas(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecModeReplicatedReplicas(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ReplicasDescription := ``

	var ReplicasFlagName string
	if cmdPrefix == "" {
		ReplicasFlagName = "Replicas"
	} else {
		ReplicasFlagName = fmt.Sprintf("%v.Replicas", cmdPrefix)
	}

	var ReplicasFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ReplicasFlagName, ReplicasFlagDefault, ReplicasDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceSpecModeReplicatedFlags(depth int, m *models.ServiceSpecModeReplicated, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ReplicasAdded := retrieveServiceSpecModeReplicatedReplicasFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReplicasAdded

	return nil, retAdded
}

func retrieveServiceSpecModeReplicatedReplicasFlags(depth int, m *models.ServiceSpecModeReplicated, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ReplicasFlagName := fmt.Sprintf("%v.Replicas", cmdPrefix)
	if cmd.Flags().Changed(ReplicasFlagName) {

		var ReplicasFlagName string
		if cmdPrefix == "" {
			ReplicasFlagName = "Replicas"
		} else {
			ReplicasFlagName = fmt.Sprintf("%v.Replicas", cmdPrefix)
		}

		ReplicasFlagValue, err := cmd.Flags().GetInt64(ReplicasFlagName)
		if err != nil {
			return err, false
		}
		m.Replicas = ReplicasFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ServiceSpecRollbackConfig

// register flags to command
func registerModelServiceSpecRollbackConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceSpecRollbackConfigDelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecRollbackConfigFailureAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecRollbackConfigMaxFailureRatio(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecRollbackConfigMonitor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecRollbackConfigOrder(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecRollbackConfigParallelism(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecRollbackConfigDelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DelayDescription := `Amount of time between rollback iterations, in nanoseconds.`

	var DelayFlagName string
	if cmdPrefix == "" {
		DelayFlagName = "Delay"
	} else {
		DelayFlagName = fmt.Sprintf("%v.Delay", cmdPrefix)
	}

	var DelayFlagDefault int64

	_ = cmd.PersistentFlags().Int64(DelayFlagName, DelayFlagDefault, DelayDescription)

	return nil
}

func registerServiceSpecRollbackConfigFailureAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	FailureActionDescription := `Enum: ["continue","pause"]. Action to take if an rolled back task fails to run, or stops running during the rollback.`

	var FailureActionFlagName string
	if cmdPrefix == "" {
		FailureActionFlagName = "FailureAction"
	} else {
		FailureActionFlagName = fmt.Sprintf("%v.FailureAction", cmdPrefix)
	}

	var FailureActionFlagDefault string

	_ = cmd.PersistentFlags().String(FailureActionFlagName, FailureActionFlagDefault, FailureActionDescription)

	if err := cmd.RegisterFlagCompletionFunc(FailureActionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["continue","pause"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecRollbackConfigMaxFailureRatio(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MaxFailureRatioDescription := `The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1.`

	var MaxFailureRatioFlagName string
	if cmdPrefix == "" {
		MaxFailureRatioFlagName = "MaxFailureRatio"
	} else {
		MaxFailureRatioFlagName = fmt.Sprintf("%v.MaxFailureRatio", cmdPrefix)
	}

	var MaxFailureRatioFlagDefault float64

	_ = cmd.PersistentFlags().Float64(MaxFailureRatioFlagName, MaxFailureRatioFlagDefault, MaxFailureRatioDescription)

	return nil
}

func registerServiceSpecRollbackConfigMonitor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MonitorDescription := `Amount of time to monitor each rolled back task for failures, in nanoseconds.`

	var MonitorFlagName string
	if cmdPrefix == "" {
		MonitorFlagName = "Monitor"
	} else {
		MonitorFlagName = fmt.Sprintf("%v.Monitor", cmdPrefix)
	}

	var MonitorFlagDefault int64

	_ = cmd.PersistentFlags().Int64(MonitorFlagName, MonitorFlagDefault, MonitorDescription)

	return nil
}

func registerServiceSpecRollbackConfigOrder(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OrderDescription := `Enum: ["stop-first","start-first"]. The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.`

	var OrderFlagName string
	if cmdPrefix == "" {
		OrderFlagName = "Order"
	} else {
		OrderFlagName = fmt.Sprintf("%v.Order", cmdPrefix)
	}

	var OrderFlagDefault string

	_ = cmd.PersistentFlags().String(OrderFlagName, OrderFlagDefault, OrderDescription)

	if err := cmd.RegisterFlagCompletionFunc(OrderFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["stop-first","start-first"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecRollbackConfigParallelism(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ParallelismDescription := `Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism).`

	var ParallelismFlagName string
	if cmdPrefix == "" {
		ParallelismFlagName = "Parallelism"
	} else {
		ParallelismFlagName = fmt.Sprintf("%v.Parallelism", cmdPrefix)
	}

	var ParallelismFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ParallelismFlagName, ParallelismFlagDefault, ParallelismDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceSpecRollbackConfigFlags(depth int, m *models.ServiceSpecRollbackConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DelayAdded := retrieveServiceSpecRollbackConfigDelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DelayAdded

	err, FailureActionAdded := retrieveServiceSpecRollbackConfigFailureActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FailureActionAdded

	err, MaxFailureRatioAdded := retrieveServiceSpecRollbackConfigMaxFailureRatioFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxFailureRatioAdded

	err, MonitorAdded := retrieveServiceSpecRollbackConfigMonitorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MonitorAdded

	err, OrderAdded := retrieveServiceSpecRollbackConfigOrderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OrderAdded

	err, ParallelismAdded := retrieveServiceSpecRollbackConfigParallelismFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParallelismAdded

	return nil, retAdded
}

func retrieveServiceSpecRollbackConfigDelayFlags(depth int, m *models.ServiceSpecRollbackConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DelayFlagName := fmt.Sprintf("%v.Delay", cmdPrefix)
	if cmd.Flags().Changed(DelayFlagName) {

		var DelayFlagName string
		if cmdPrefix == "" {
			DelayFlagName = "Delay"
		} else {
			DelayFlagName = fmt.Sprintf("%v.Delay", cmdPrefix)
		}

		DelayFlagValue, err := cmd.Flags().GetInt64(DelayFlagName)
		if err != nil {
			return err, false
		}
		m.Delay = DelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecRollbackConfigFailureActionFlags(depth int, m *models.ServiceSpecRollbackConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	FailureActionFlagName := fmt.Sprintf("%v.FailureAction", cmdPrefix)
	if cmd.Flags().Changed(FailureActionFlagName) {

		var FailureActionFlagName string
		if cmdPrefix == "" {
			FailureActionFlagName = "FailureAction"
		} else {
			FailureActionFlagName = fmt.Sprintf("%v.FailureAction", cmdPrefix)
		}

		FailureActionFlagValue, err := cmd.Flags().GetString(FailureActionFlagName)
		if err != nil {
			return err, false
		}
		m.FailureAction = FailureActionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecRollbackConfigMaxFailureRatioFlags(depth int, m *models.ServiceSpecRollbackConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MaxFailureRatioFlagName := fmt.Sprintf("%v.MaxFailureRatio", cmdPrefix)
	if cmd.Flags().Changed(MaxFailureRatioFlagName) {

		var MaxFailureRatioFlagName string
		if cmdPrefix == "" {
			MaxFailureRatioFlagName = "MaxFailureRatio"
		} else {
			MaxFailureRatioFlagName = fmt.Sprintf("%v.MaxFailureRatio", cmdPrefix)
		}

		MaxFailureRatioFlagValue, err := cmd.Flags().GetFloat64(MaxFailureRatioFlagName)
		if err != nil {
			return err, false
		}
		m.MaxFailureRatio = MaxFailureRatioFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecRollbackConfigMonitorFlags(depth int, m *models.ServiceSpecRollbackConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MonitorFlagName := fmt.Sprintf("%v.Monitor", cmdPrefix)
	if cmd.Flags().Changed(MonitorFlagName) {

		var MonitorFlagName string
		if cmdPrefix == "" {
			MonitorFlagName = "Monitor"
		} else {
			MonitorFlagName = fmt.Sprintf("%v.Monitor", cmdPrefix)
		}

		MonitorFlagValue, err := cmd.Flags().GetInt64(MonitorFlagName)
		if err != nil {
			return err, false
		}
		m.Monitor = MonitorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecRollbackConfigOrderFlags(depth int, m *models.ServiceSpecRollbackConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OrderFlagName := fmt.Sprintf("%v.Order", cmdPrefix)
	if cmd.Flags().Changed(OrderFlagName) {

		var OrderFlagName string
		if cmdPrefix == "" {
			OrderFlagName = "Order"
		} else {
			OrderFlagName = fmt.Sprintf("%v.Order", cmdPrefix)
		}

		OrderFlagValue, err := cmd.Flags().GetString(OrderFlagName)
		if err != nil {
			return err, false
		}
		m.Order = OrderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecRollbackConfigParallelismFlags(depth int, m *models.ServiceSpecRollbackConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ParallelismFlagName := fmt.Sprintf("%v.Parallelism", cmdPrefix)
	if cmd.Flags().Changed(ParallelismFlagName) {

		var ParallelismFlagName string
		if cmdPrefix == "" {
			ParallelismFlagName = "Parallelism"
		} else {
			ParallelismFlagName = fmt.Sprintf("%v.Parallelism", cmdPrefix)
		}

		ParallelismFlagValue, err := cmd.Flags().GetInt64(ParallelismFlagName)
		if err != nil {
			return err, false
		}
		m.Parallelism = ParallelismFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ServiceSpecUpdateConfig

// register flags to command
func registerModelServiceSpecUpdateConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceSpecUpdateConfigDelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecUpdateConfigFailureAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecUpdateConfigMaxFailureRatio(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecUpdateConfigMonitor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecUpdateConfigOrder(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecUpdateConfigParallelism(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecUpdateConfigDelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DelayDescription := `Amount of time between updates, in nanoseconds.`

	var DelayFlagName string
	if cmdPrefix == "" {
		DelayFlagName = "Delay"
	} else {
		DelayFlagName = fmt.Sprintf("%v.Delay", cmdPrefix)
	}

	var DelayFlagDefault int64

	_ = cmd.PersistentFlags().Int64(DelayFlagName, DelayFlagDefault, DelayDescription)

	return nil
}

func registerServiceSpecUpdateConfigFailureAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	FailureActionDescription := `Enum: ["continue","pause","rollback"]. Action to take if an updated task fails to run, or stops running during the update.`

	var FailureActionFlagName string
	if cmdPrefix == "" {
		FailureActionFlagName = "FailureAction"
	} else {
		FailureActionFlagName = fmt.Sprintf("%v.FailureAction", cmdPrefix)
	}

	var FailureActionFlagDefault string

	_ = cmd.PersistentFlags().String(FailureActionFlagName, FailureActionFlagDefault, FailureActionDescription)

	if err := cmd.RegisterFlagCompletionFunc(FailureActionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["continue","pause","rollback"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecUpdateConfigMaxFailureRatio(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MaxFailureRatioDescription := `The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1.`

	var MaxFailureRatioFlagName string
	if cmdPrefix == "" {
		MaxFailureRatioFlagName = "MaxFailureRatio"
	} else {
		MaxFailureRatioFlagName = fmt.Sprintf("%v.MaxFailureRatio", cmdPrefix)
	}

	var MaxFailureRatioFlagDefault float64

	_ = cmd.PersistentFlags().Float64(MaxFailureRatioFlagName, MaxFailureRatioFlagDefault, MaxFailureRatioDescription)

	return nil
}

func registerServiceSpecUpdateConfigMonitor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MonitorDescription := `Amount of time to monitor each updated task for failures, in nanoseconds.`

	var MonitorFlagName string
	if cmdPrefix == "" {
		MonitorFlagName = "Monitor"
	} else {
		MonitorFlagName = fmt.Sprintf("%v.Monitor", cmdPrefix)
	}

	var MonitorFlagDefault int64

	_ = cmd.PersistentFlags().Int64(MonitorFlagName, MonitorFlagDefault, MonitorDescription)

	return nil
}

func registerServiceSpecUpdateConfigOrder(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OrderDescription := `Enum: ["stop-first","start-first"]. The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.`

	var OrderFlagName string
	if cmdPrefix == "" {
		OrderFlagName = "Order"
	} else {
		OrderFlagName = fmt.Sprintf("%v.Order", cmdPrefix)
	}

	var OrderFlagDefault string

	_ = cmd.PersistentFlags().String(OrderFlagName, OrderFlagDefault, OrderDescription)

	if err := cmd.RegisterFlagCompletionFunc(OrderFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["stop-first","start-first"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecUpdateConfigParallelism(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ParallelismDescription := `Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).`

	var ParallelismFlagName string
	if cmdPrefix == "" {
		ParallelismFlagName = "Parallelism"
	} else {
		ParallelismFlagName = fmt.Sprintf("%v.Parallelism", cmdPrefix)
	}

	var ParallelismFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ParallelismFlagName, ParallelismFlagDefault, ParallelismDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceSpecUpdateConfigFlags(depth int, m *models.ServiceSpecUpdateConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DelayAdded := retrieveServiceSpecUpdateConfigDelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DelayAdded

	err, FailureActionAdded := retrieveServiceSpecUpdateConfigFailureActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FailureActionAdded

	err, MaxFailureRatioAdded := retrieveServiceSpecUpdateConfigMaxFailureRatioFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxFailureRatioAdded

	err, MonitorAdded := retrieveServiceSpecUpdateConfigMonitorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MonitorAdded

	err, OrderAdded := retrieveServiceSpecUpdateConfigOrderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OrderAdded

	err, ParallelismAdded := retrieveServiceSpecUpdateConfigParallelismFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParallelismAdded

	return nil, retAdded
}

func retrieveServiceSpecUpdateConfigDelayFlags(depth int, m *models.ServiceSpecUpdateConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DelayFlagName := fmt.Sprintf("%v.Delay", cmdPrefix)
	if cmd.Flags().Changed(DelayFlagName) {

		var DelayFlagName string
		if cmdPrefix == "" {
			DelayFlagName = "Delay"
		} else {
			DelayFlagName = fmt.Sprintf("%v.Delay", cmdPrefix)
		}

		DelayFlagValue, err := cmd.Flags().GetInt64(DelayFlagName)
		if err != nil {
			return err, false
		}
		m.Delay = DelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecUpdateConfigFailureActionFlags(depth int, m *models.ServiceSpecUpdateConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	FailureActionFlagName := fmt.Sprintf("%v.FailureAction", cmdPrefix)
	if cmd.Flags().Changed(FailureActionFlagName) {

		var FailureActionFlagName string
		if cmdPrefix == "" {
			FailureActionFlagName = "FailureAction"
		} else {
			FailureActionFlagName = fmt.Sprintf("%v.FailureAction", cmdPrefix)
		}

		FailureActionFlagValue, err := cmd.Flags().GetString(FailureActionFlagName)
		if err != nil {
			return err, false
		}
		m.FailureAction = FailureActionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecUpdateConfigMaxFailureRatioFlags(depth int, m *models.ServiceSpecUpdateConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MaxFailureRatioFlagName := fmt.Sprintf("%v.MaxFailureRatio", cmdPrefix)
	if cmd.Flags().Changed(MaxFailureRatioFlagName) {

		var MaxFailureRatioFlagName string
		if cmdPrefix == "" {
			MaxFailureRatioFlagName = "MaxFailureRatio"
		} else {
			MaxFailureRatioFlagName = fmt.Sprintf("%v.MaxFailureRatio", cmdPrefix)
		}

		MaxFailureRatioFlagValue, err := cmd.Flags().GetFloat64(MaxFailureRatioFlagName)
		if err != nil {
			return err, false
		}
		m.MaxFailureRatio = MaxFailureRatioFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecUpdateConfigMonitorFlags(depth int, m *models.ServiceSpecUpdateConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MonitorFlagName := fmt.Sprintf("%v.Monitor", cmdPrefix)
	if cmd.Flags().Changed(MonitorFlagName) {

		var MonitorFlagName string
		if cmdPrefix == "" {
			MonitorFlagName = "Monitor"
		} else {
			MonitorFlagName = fmt.Sprintf("%v.Monitor", cmdPrefix)
		}

		MonitorFlagValue, err := cmd.Flags().GetInt64(MonitorFlagName)
		if err != nil {
			return err, false
		}
		m.Monitor = MonitorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecUpdateConfigOrderFlags(depth int, m *models.ServiceSpecUpdateConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OrderFlagName := fmt.Sprintf("%v.Order", cmdPrefix)
	if cmd.Flags().Changed(OrderFlagName) {

		var OrderFlagName string
		if cmdPrefix == "" {
			OrderFlagName = "Order"
		} else {
			OrderFlagName = fmt.Sprintf("%v.Order", cmdPrefix)
		}

		OrderFlagValue, err := cmd.Flags().GetString(OrderFlagName)
		if err != nil {
			return err, false
		}
		m.Order = OrderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceSpecUpdateConfigParallelismFlags(depth int, m *models.ServiceSpecUpdateConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ParallelismFlagName := fmt.Sprintf("%v.Parallelism", cmdPrefix)
	if cmd.Flags().Changed(ParallelismFlagName) {

		var ParallelismFlagName string
		if cmdPrefix == "" {
			ParallelismFlagName = "Parallelism"
		} else {
			ParallelismFlagName = fmt.Sprintf("%v.Parallelism", cmdPrefix)
		}

		ParallelismFlagValue, err := cmd.Flags().GetInt64(ParallelismFlagName)
		if err != nil {
			return err, false
		}
		m.Parallelism = ParallelismFlagValue

		retAdded = true
	}

	return nil, retAdded
}
