// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/image"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationImageImageCreateCmd returns a cmd to handle operation imageCreate
func makeOperationImageImageCreateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ImageCreate",
		Short: `Create an image by either pulling it from a registry or importing it.`,
		RunE:  runOperationImageImageCreate,
	}

	if err := registerOperationImageImageCreateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationImageImageCreate uses cmd flags to call endpoint api
func runOperationImageImageCreate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := image.NewImageCreateParams()
	if err, _ := retrieveOperationImageImageCreateXRegistryAuthFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCreateFromImageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCreateFromSrcFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCreateInputImageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCreatePlatformFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCreateRepoFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCreateTagFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationImageImageCreateResult(appCli.Image.ImageCreate(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationImageImageCreateParamFlags registers all flags needed to fill params
func registerOperationImageImageCreateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationImageImageCreateXRegistryAuthParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCreateFromImageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCreateFromSrcParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCreateInputImageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCreatePlatformParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCreateRepoParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCreateTagParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationImageImageCreateXRegistryAuthParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	XRegistryAuthDescription := `A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication)`

	var XRegistryAuthFlagName string
	if cmdPrefix == "" {
		XRegistryAuthFlagName = "X-Registry-Auth"
	} else {
		XRegistryAuthFlagName = fmt.Sprintf("%v.X-Registry-Auth", cmdPrefix)
	}

	var XRegistryAuthFlagDefault string

	_ = cmd.PersistentFlags().String(XRegistryAuthFlagName, XRegistryAuthFlagDefault, XRegistryAuthDescription)

	return nil
}
func registerOperationImageImageCreateFromImageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	FromImageDescription := `Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.`

	var FromImageFlagName string
	if cmdPrefix == "" {
		FromImageFlagName = "fromImage"
	} else {
		FromImageFlagName = fmt.Sprintf("%v.fromImage", cmdPrefix)
	}

	var FromImageFlagDefault string

	_ = cmd.PersistentFlags().String(FromImageFlagName, FromImageFlagDefault, FromImageDescription)

	return nil
}
func registerOperationImageImageCreateFromSrcParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	FromSrcDescription := `Source to import. The value may be a URL from which the image can be retrieved or ` + "`" + `-` + "`" + ` to read the image from the request body. This parameter may only be used when importing an image.`

	var FromSrcFlagName string
	if cmdPrefix == "" {
		FromSrcFlagName = "fromSrc"
	} else {
		FromSrcFlagName = fmt.Sprintf("%v.fromSrc", cmdPrefix)
	}

	var FromSrcFlagDefault string

	_ = cmd.PersistentFlags().String(FromSrcFlagName, FromSrcFlagDefault, FromSrcDescription)

	return nil
}
func registerOperationImageImageCreateInputImageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	InputImageDescription := `Image content if the value ` + "`" + `-` + "`" + ` has been specified in fromSrc query parameter`

	var InputImageFlagName string
	if cmdPrefix == "" {
		InputImageFlagName = "inputImage"
	} else {
		InputImageFlagName = fmt.Sprintf("%v.inputImage", cmdPrefix)
	}

	var InputImageFlagDefault string

	_ = cmd.PersistentFlags().String(InputImageFlagName, InputImageFlagDefault, InputImageDescription)

	return nil
}
func registerOperationImageImageCreatePlatformParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	PlatformDescription := `Platform in the format os[/arch[/variant]]`

	var PlatformFlagName string
	if cmdPrefix == "" {
		PlatformFlagName = "platform"
	} else {
		PlatformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
	}

	var PlatformFlagDefault string

	_ = cmd.PersistentFlags().String(PlatformFlagName, PlatformFlagDefault, PlatformDescription)

	return nil
}
func registerOperationImageImageCreateRepoParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	RepoDescription := `Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.`

	var RepoFlagName string
	if cmdPrefix == "" {
		RepoFlagName = "repo"
	} else {
		RepoFlagName = fmt.Sprintf("%v.repo", cmdPrefix)
	}

	var RepoFlagDefault string

	_ = cmd.PersistentFlags().String(RepoFlagName, RepoFlagDefault, RepoDescription)

	return nil
}
func registerOperationImageImageCreateTagParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	TagDescription := `Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.`

	var TagFlagName string
	if cmdPrefix == "" {
		TagFlagName = "tag"
	} else {
		TagFlagName = fmt.Sprintf("%v.tag", cmdPrefix)
	}

	var TagFlagDefault string

	_ = cmd.PersistentFlags().String(TagFlagName, TagFlagDefault, TagDescription)

	return nil
}

func retrieveOperationImageImageCreateXRegistryAuthFlag(m *image.ImageCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Registry-Auth") {

		var XRegistryAuthFlagName string
		if cmdPrefix == "" {
			XRegistryAuthFlagName = "X-Registry-Auth"
		} else {
			XRegistryAuthFlagName = fmt.Sprintf("%v.X-Registry-Auth", cmdPrefix)
		}

		XRegistryAuthFlagValue, err := cmd.Flags().GetString(XRegistryAuthFlagName)
		if err != nil {
			return err, false
		}
		m.XRegistryAuth = &XRegistryAuthFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCreateFromImageFlag(m *image.ImageCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("fromImage") {

		var FromImageFlagName string
		if cmdPrefix == "" {
			FromImageFlagName = "fromImage"
		} else {
			FromImageFlagName = fmt.Sprintf("%v.fromImage", cmdPrefix)
		}

		FromImageFlagValue, err := cmd.Flags().GetString(FromImageFlagName)
		if err != nil {
			return err, false
		}
		m.FromImage = &FromImageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCreateFromSrcFlag(m *image.ImageCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("fromSrc") {

		var FromSrcFlagName string
		if cmdPrefix == "" {
			FromSrcFlagName = "fromSrc"
		} else {
			FromSrcFlagName = fmt.Sprintf("%v.fromSrc", cmdPrefix)
		}

		FromSrcFlagValue, err := cmd.Flags().GetString(FromSrcFlagName)
		if err != nil {
			return err, false
		}
		m.FromSrc = &FromSrcFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCreateInputImageFlag(m *image.ImageCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("inputImage") {

		var InputImageFlagName string
		if cmdPrefix == "" {
			InputImageFlagName = "inputImage"
		} else {
			InputImageFlagName = fmt.Sprintf("%v.inputImage", cmdPrefix)
		}

		InputImageFlagValue, err := cmd.Flags().GetString(InputImageFlagName)
		if err != nil {
			return err, false
		}
		m.InputImage = InputImageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCreatePlatformFlag(m *image.ImageCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("platform") {

		var PlatformFlagName string
		if cmdPrefix == "" {
			PlatformFlagName = "platform"
		} else {
			PlatformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
		}

		PlatformFlagValue, err := cmd.Flags().GetString(PlatformFlagName)
		if err != nil {
			return err, false
		}
		m.Platform = &PlatformFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCreateRepoFlag(m *image.ImageCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repo") {

		var RepoFlagName string
		if cmdPrefix == "" {
			RepoFlagName = "repo"
		} else {
			RepoFlagName = fmt.Sprintf("%v.repo", cmdPrefix)
		}

		RepoFlagValue, err := cmd.Flags().GetString(RepoFlagName)
		if err != nil {
			return err, false
		}
		m.Repo = &RepoFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCreateTagFlag(m *image.ImageCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tag") {

		var TagFlagName string
		if cmdPrefix == "" {
			TagFlagName = "tag"
		} else {
			TagFlagName = fmt.Sprintf("%v.tag", cmdPrefix)
		}

		TagFlagValue, err := cmd.Flags().GetString(TagFlagName)
		if err != nil {
			return err, false
		}
		m.Tag = &TagFlagValue

	}
	return nil, retAdded
}

// parseOperationImageImageCreateResult parses request result and return the string content
func parseOperationImageImageCreateResult(resp0 *image.ImageCreateOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning imageCreateOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*image.ImageCreateNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*image.ImageCreateInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response imageCreateOK is not supported by go-swagger cli yet.

	return "", nil
}
