// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerAttachWebsocketCmd returns a cmd to handle operation containerAttachWebsocket
func makeOperationContainerContainerAttachWebsocketCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerAttachWebsocket",
		Short: ``,
		RunE:  runOperationContainerContainerAttachWebsocket,
	}

	if err := registerOperationContainerContainerAttachWebsocketParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerAttachWebsocket uses cmd flags to call endpoint api
func runOperationContainerContainerAttachWebsocket(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerAttachWebsocketParams()
	if err, _ := retrieveOperationContainerContainerAttachWebsocketDetachKeysFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachWebsocketIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachWebsocketLogsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachWebsocketStderrFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachWebsocketStdinFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachWebsocketStdoutFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerAttachWebsocketStreamFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationContainerContainerAttachWebsocketResult(appCli.Container.ContainerAttachWebsocket(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationContainerContainerAttachWebsocketParamFlags registers all flags needed to fill params
func registerOperationContainerContainerAttachWebsocketParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerAttachWebsocketDetachKeysParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachWebsocketIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachWebsocketLogsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachWebsocketStderrParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachWebsocketStdinParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachWebsocketStdoutParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerAttachWebsocketStreamParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerAttachWebsocketDetachKeysParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	DetachKeysDescription := `Override the key sequence for detaching a container.Format is a single character ` + "`" + `[a-Z]` + "`" + ` or ` + "`" + `ctrl-<value>` + "`" + ` where ` + "`" + `<value>` + "`" + ` is one of: ` + "`" + `a-z` + "`" + `, ` + "`" + `@` + "`" + `, ` + "`" + `^` + "`" + `, ` + "`" + `[` + "`" + `, ` + "`" + `,` + "`" + `, or ` + "`" + `_` + "`" + `.`

	var DetachKeysFlagName string
	if cmdPrefix == "" {
		DetachKeysFlagName = "detachKeys"
	} else {
		DetachKeysFlagName = fmt.Sprintf("%v.detachKeys", cmdPrefix)
	}

	var DetachKeysFlagDefault string

	_ = cmd.PersistentFlags().String(DetachKeysFlagName, DetachKeysFlagDefault, DetachKeysDescription)

	return nil
}
func registerOperationContainerContainerAttachWebsocketIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	IDDescription := `Required. ID or name of the container`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}
func registerOperationContainerContainerAttachWebsocketLogsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	LogsDescription := `Return logs`

	var LogsFlagName string
	if cmdPrefix == "" {
		LogsFlagName = "logs"
	} else {
		LogsFlagName = fmt.Sprintf("%v.logs", cmdPrefix)
	}

	var LogsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(LogsFlagName, LogsFlagDefault, LogsDescription)

	return nil
}
func registerOperationContainerContainerAttachWebsocketStderrParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StderrDescription := `Attach to ` + "`" + `stderr` + "`" + ``

	var StderrFlagName string
	if cmdPrefix == "" {
		StderrFlagName = "stderr"
	} else {
		StderrFlagName = fmt.Sprintf("%v.stderr", cmdPrefix)
	}

	var StderrFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StderrFlagName, StderrFlagDefault, StderrDescription)

	return nil
}
func registerOperationContainerContainerAttachWebsocketStdinParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StdinDescription := `Attach to ` + "`" + `stdin` + "`" + ``

	var StdinFlagName string
	if cmdPrefix == "" {
		StdinFlagName = "stdin"
	} else {
		StdinFlagName = fmt.Sprintf("%v.stdin", cmdPrefix)
	}

	var StdinFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StdinFlagName, StdinFlagDefault, StdinDescription)

	return nil
}
func registerOperationContainerContainerAttachWebsocketStdoutParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StdoutDescription := `Attach to ` + "`" + `stdout` + "`" + ``

	var StdoutFlagName string
	if cmdPrefix == "" {
		StdoutFlagName = "stdout"
	} else {
		StdoutFlagName = fmt.Sprintf("%v.stdout", cmdPrefix)
	}

	var StdoutFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StdoutFlagName, StdoutFlagDefault, StdoutDescription)

	return nil
}
func registerOperationContainerContainerAttachWebsocketStreamParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StreamDescription := `Return stream`

	var StreamFlagName string
	if cmdPrefix == "" {
		StreamFlagName = "stream"
	} else {
		StreamFlagName = fmt.Sprintf("%v.stream", cmdPrefix)
	}

	var StreamFlagDefault bool

	_ = cmd.PersistentFlags().Bool(StreamFlagName, StreamFlagDefault, StreamDescription)

	return nil
}

func retrieveOperationContainerContainerAttachWebsocketDetachKeysFlag(m *container.ContainerAttachWebsocketParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("detachKeys") {

		var DetachKeysFlagName string
		if cmdPrefix == "" {
			DetachKeysFlagName = "detachKeys"
		} else {
			DetachKeysFlagName = fmt.Sprintf("%v.detachKeys", cmdPrefix)
		}

		DetachKeysFlagValue, err := cmd.Flags().GetString(DetachKeysFlagName)
		if err != nil {
			return err, false
		}
		m.DetachKeys = &DetachKeysFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachWebsocketIDFlag(m *container.ContainerAttachWebsocketParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachWebsocketLogsFlag(m *container.ContainerAttachWebsocketParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("logs") {

		var LogsFlagName string
		if cmdPrefix == "" {
			LogsFlagName = "logs"
		} else {
			LogsFlagName = fmt.Sprintf("%v.logs", cmdPrefix)
		}

		LogsFlagValue, err := cmd.Flags().GetBool(LogsFlagName)
		if err != nil {
			return err, false
		}
		m.Logs = &LogsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachWebsocketStderrFlag(m *container.ContainerAttachWebsocketParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stderr") {

		var StderrFlagName string
		if cmdPrefix == "" {
			StderrFlagName = "stderr"
		} else {
			StderrFlagName = fmt.Sprintf("%v.stderr", cmdPrefix)
		}

		StderrFlagValue, err := cmd.Flags().GetBool(StderrFlagName)
		if err != nil {
			return err, false
		}
		m.Stderr = &StderrFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachWebsocketStdinFlag(m *container.ContainerAttachWebsocketParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stdin") {

		var StdinFlagName string
		if cmdPrefix == "" {
			StdinFlagName = "stdin"
		} else {
			StdinFlagName = fmt.Sprintf("%v.stdin", cmdPrefix)
		}

		StdinFlagValue, err := cmd.Flags().GetBool(StdinFlagName)
		if err != nil {
			return err, false
		}
		m.Stdin = &StdinFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachWebsocketStdoutFlag(m *container.ContainerAttachWebsocketParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stdout") {

		var StdoutFlagName string
		if cmdPrefix == "" {
			StdoutFlagName = "stdout"
		} else {
			StdoutFlagName = fmt.Sprintf("%v.stdout", cmdPrefix)
		}

		StdoutFlagValue, err := cmd.Flags().GetBool(StdoutFlagName)
		if err != nil {
			return err, false
		}
		m.Stdout = &StdoutFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerAttachWebsocketStreamFlag(m *container.ContainerAttachWebsocketParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stream") {

		var StreamFlagName string
		if cmdPrefix == "" {
			StreamFlagName = "stream"
		} else {
			StreamFlagName = fmt.Sprintf("%v.stream", cmdPrefix)
		}

		StreamFlagValue, err := cmd.Flags().GetBool(StreamFlagName)
		if err != nil {
			return err, false
		}
		m.Stream = &StreamFlagValue

	}
	return nil, retAdded
}

// parseOperationContainerContainerAttachWebsocketResult parses request result and return the string content
func parseOperationContainerContainerAttachWebsocketResult(resp0 *container.ContainerAttachWebsocketOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning containerAttachWebsocketSwitchingProtocols is not supported

		// Non schema case: warning containerAttachWebsocketOK is not supported

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerAttachWebsocketBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*container.ContainerAttachWebsocketNotFound)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*container.ContainerAttachWebsocketInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response containerAttachWebsocketOK is not supported by go-swagger cli yet.

	return "", nil
}
