// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for Node

// register flags to command
func registerModelNodeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNodeCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeManagerStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedAtDescription := `Date and time at which the node was added to the swarm in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
`

	var CreatedAtFlagName string
	if cmdPrefix == "" {
		CreatedAtFlagName = "CreatedAt"
	} else {
		CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	var CreatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(CreatedAtFlagName, CreatedAtFlagDefault, CreatedAtDescription)

	return nil
}

func registerNodeDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "Description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	if err := registerModelNodeDescriptionFlags(depth+1, DescriptionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := ``

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "ID"
	} else {
		IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerNodeManagerStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ManagerStatusFlagName string
	if cmdPrefix == "" {
		ManagerStatusFlagName = "ManagerStatus"
	} else {
		ManagerStatusFlagName = fmt.Sprintf("%v.ManagerStatus", cmdPrefix)
	}

	if err := registerModelManagerStatusFlags(depth+1, ManagerStatusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var SpecFlagName string
	if cmdPrefix == "" {
		SpecFlagName = "Spec"
	} else {
		SpecFlagName = fmt.Sprintf("%v.Spec", cmdPrefix)
	}

	if err := registerModelNodeSpecFlags(depth+1, SpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var StatusFlagName string
	if cmdPrefix == "" {
		StatusFlagName = "Status"
	} else {
		StatusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
	}

	if err := registerModelNodeStatusFlags(depth+1, StatusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UpdatedAtDescription := `Date and time at which the node was last updated in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
`

	var UpdatedAtFlagName string
	if cmdPrefix == "" {
		UpdatedAtFlagName = "UpdatedAt"
	} else {
		UpdatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	}

	var UpdatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(UpdatedAtFlagName, UpdatedAtFlagDefault, UpdatedAtDescription)

	return nil
}

func registerNodeVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var VersionFlagName string
	if cmdPrefix == "" {
		VersionFlagName = "Version"
	} else {
		VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	if err := registerModelObjectVersionFlags(depth+1, VersionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNodeFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CreatedAtAdded := retrieveNodeCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAtAdded

	err, DescriptionAdded := retrieveNodeDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, IDAdded := retrieveNodeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, ManagerStatusAdded := retrieveNodeManagerStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ManagerStatusAdded

	err, SpecAdded := retrieveNodeSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpecAdded

	err, StatusAdded := retrieveNodeStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, UpdatedAtAdded := retrieveNodeUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdatedAtAdded

	err, VersionAdded := retrieveNodeVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveNodeCreatedAtFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(CreatedAtFlagName) {

		var CreatedAtFlagName string
		if cmdPrefix == "" {
			CreatedAtFlagName = "CreatedAt"
		} else {
			CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		CreatedAtFlagValue, err := cmd.Flags().GetString(CreatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = CreatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeDescriptionFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {
		// info: complex object Description NodeDescription is retrieved outside this Changed() block
	}
	DescriptionFlagValue := m.Description
	if swag.IsZero(DescriptionFlagValue) {
		DescriptionFlagValue = &models.NodeDescription{}
	}

	err, DescriptionAdded := retrieveModelNodeDescriptionFlags(depth+1, DescriptionFlagValue, DescriptionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded
	if DescriptionAdded {
		m.Description = DescriptionFlagValue
	}

	return nil, retAdded
}

func retrieveNodeIDFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "ID"
		} else {
			IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeManagerStatusFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ManagerStatusFlagName := fmt.Sprintf("%v.ManagerStatus", cmdPrefix)
	if cmd.Flags().Changed(ManagerStatusFlagName) {
		// info: complex object ManagerStatus ManagerStatus is retrieved outside this Changed() block
	}
	ManagerStatusFlagValue := m.ManagerStatus
	if swag.IsZero(ManagerStatusFlagValue) {
		ManagerStatusFlagValue = &models.ManagerStatus{}
	}

	err, ManagerStatusAdded := retrieveModelManagerStatusFlags(depth+1, ManagerStatusFlagValue, ManagerStatusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ManagerStatusAdded
	if ManagerStatusAdded {
		m.ManagerStatus = ManagerStatusFlagValue
	}

	return nil, retAdded
}

func retrieveNodeSpecFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SpecFlagName := fmt.Sprintf("%v.Spec", cmdPrefix)
	if cmd.Flags().Changed(SpecFlagName) {
		// info: complex object Spec NodeSpec is retrieved outside this Changed() block
	}
	SpecFlagValue := m.Spec
	if swag.IsZero(SpecFlagValue) {
		SpecFlagValue = &models.NodeSpec{}
	}

	err, SpecAdded := retrieveModelNodeSpecFlags(depth+1, SpecFlagValue, SpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpecAdded
	if SpecAdded {
		m.Spec = SpecFlagValue
	}

	return nil, retAdded
}

func retrieveNodeStatusFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StatusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(StatusFlagName) {
		// info: complex object Status NodeStatus is retrieved outside this Changed() block
	}
	StatusFlagValue := m.Status
	if swag.IsZero(StatusFlagValue) {
		StatusFlagValue = &models.NodeStatus{}
	}

	err, StatusAdded := retrieveModelNodeStatusFlags(depth+1, StatusFlagValue, StatusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded
	if StatusAdded {
		m.Status = StatusFlagValue
	}

	return nil, retAdded
}

func retrieveNodeUpdatedAtFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UpdatedAtFlagName := fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	if cmd.Flags().Changed(UpdatedAtFlagName) {

		var UpdatedAtFlagName string
		if cmdPrefix == "" {
			UpdatedAtFlagName = "UpdatedAt"
		} else {
			UpdatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
		}

		UpdatedAtFlagValue, err := cmd.Flags().GetString(UpdatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = UpdatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeVersionFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VersionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(VersionFlagName) {
		// info: complex object Version ObjectVersion is retrieved outside this Changed() block
	}
	VersionFlagValue := m.Version
	if swag.IsZero(VersionFlagValue) {
		VersionFlagValue = &models.ObjectVersion{}
	}

	err, VersionAdded := retrieveModelObjectVersionFlags(depth+1, VersionFlagValue, VersionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded
	if VersionAdded {
		m.Version = VersionFlagValue
	}

	return nil, retAdded
}
