// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for Platform

// register flags to command
func registerModelPlatformFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlatformArchitecture(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlatformOS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlatformArchitecture(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ArchitectureDescription := `Architecture represents the hardware architecture (for example,
` + "`" + `x86_64` + "`" + `).
`

	var ArchitectureFlagName string
	if cmdPrefix == "" {
		ArchitectureFlagName = "Architecture"
	} else {
		ArchitectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
	}

	var ArchitectureFlagDefault string

	_ = cmd.PersistentFlags().String(ArchitectureFlagName, ArchitectureFlagDefault, ArchitectureDescription)

	return nil
}

func registerPlatformOS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OSDescription := `OS represents the Operating System (for example, ` + "`" + `linux` + "`" + ` or ` + "`" + `windows` + "`" + `).
`

	var OSFlagName string
	if cmdPrefix == "" {
		OSFlagName = "OS"
	} else {
		OSFlagName = fmt.Sprintf("%v.OS", cmdPrefix)
	}

	var OSFlagDefault string

	_ = cmd.PersistentFlags().String(OSFlagName, OSFlagDefault, OSDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlatformFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ArchitectureAdded := retrievePlatformArchitectureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArchitectureAdded

	err, OSAdded := retrievePlatformOSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OSAdded

	return nil, retAdded
}

func retrievePlatformArchitectureFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ArchitectureFlagName := fmt.Sprintf("%v.Architecture", cmdPrefix)
	if cmd.Flags().Changed(ArchitectureFlagName) {

		var ArchitectureFlagName string
		if cmdPrefix == "" {
			ArchitectureFlagName = "Architecture"
		} else {
			ArchitectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
		}

		ArchitectureFlagValue, err := cmd.Flags().GetString(ArchitectureFlagName)
		if err != nil {
			return err, false
		}
		m.Architecture = ArchitectureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlatformOSFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OSFlagName := fmt.Sprintf("%v.OS", cmdPrefix)
	if cmd.Flags().Changed(OSFlagName) {

		var OSFlagName string
		if cmdPrefix == "" {
			OSFlagName = "OS"
		} else {
			OSFlagName = fmt.Sprintf("%v.OS", cmdPrefix)
		}

		OSFlagValue, err := cmd.Flags().GetString(OSFlagName)
		if err != nil {
			return err, false
		}
		m.OS = OSFlagValue

		retAdded = true
	}

	return nil, retAdded
}
