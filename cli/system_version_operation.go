// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/system"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSystemSystemVersionCmd returns a cmd to handle operation systemVersion
func makeOperationSystemSystemVersionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "SystemVersion",
		Short: `Returns the version of Docker that is running and various information about the system that Docker is running on.`,
		RunE:  runOperationSystemSystemVersion,
	}

	if err := registerOperationSystemSystemVersionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSystemSystemVersion uses cmd flags to call endpoint api
func runOperationSystemSystemVersion(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := system.NewSystemVersionParams()
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSystemSystemVersionResult(appCli.System.SystemVersion(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSystemSystemVersionParamFlags registers all flags needed to fill params
func registerOperationSystemSystemVersionParamFlags(cmd *cobra.Command) error {
	return nil
}

// parseOperationSystemSystemVersionResult parses request result and return the string content
func parseOperationSystemSystemVersionResult(resp0 *system.SystemVersionOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*system.SystemVersionOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*system.SystemVersionInternalServerError)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelComponentVersionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerComponentVersionDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerComponentVersionName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerComponentVersionVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerComponentVersionDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Details interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerComponentVersionName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Required. `

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerComponentVersionVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	VersionDescription := `Required. `

	var VersionFlagName string
	if cmdPrefix == "" {
		VersionFlagName = "Version"
	} else {
		VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	var VersionFlagDefault string

	_ = cmd.PersistentFlags().String(VersionFlagName, VersionFlagDefault, VersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelComponentVersionFlags(depth int, m *system.ComponentVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DetailsAdded := retrieveComponentVersionDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DetailsAdded

	err, NameAdded := retrieveComponentVersionNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, VersionAdded := retrieveComponentVersionVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveComponentVersionDetailsFlags(depth int, m *system.ComponentVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DetailsFlagName := fmt.Sprintf("%v.Details", cmdPrefix)
	if cmd.Flags().Changed(DetailsFlagName) {
		// warning: Details map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveComponentVersionNameFlags(depth int, m *system.ComponentVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveComponentVersionVersionFlags(depth int, m *system.ComponentVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VersionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(VersionFlagName) {

		var VersionFlagName string
		if cmdPrefix == "" {
			VersionFlagName = "Version"
		} else {
			VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
		}

		VersionFlagValue, err := cmd.Flags().GetString(VersionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = VersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelSystemVersionOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSystemVersionOKBodyAPIVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyArch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyBuildTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyComponents(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyExperimental(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyGitCommit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyGoVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyKernelVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyMinAPIVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyOs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyPlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemVersionOKBodyVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemVersionOKBodyAPIVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	APIVersionDescription := ``

	var APIVersionFlagName string
	if cmdPrefix == "" {
		APIVersionFlagName = "ApiVersion"
	} else {
		APIVersionFlagName = fmt.Sprintf("%v.ApiVersion", cmdPrefix)
	}

	var APIVersionFlagDefault string

	_ = cmd.PersistentFlags().String(APIVersionFlagName, APIVersionFlagDefault, APIVersionDescription)

	return nil
}

func registerSystemVersionOKBodyArch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ArchDescription := ``

	var ArchFlagName string
	if cmdPrefix == "" {
		ArchFlagName = "Arch"
	} else {
		ArchFlagName = fmt.Sprintf("%v.Arch", cmdPrefix)
	}

	var ArchFlagDefault string

	_ = cmd.PersistentFlags().String(ArchFlagName, ArchFlagDefault, ArchDescription)

	return nil
}

func registerSystemVersionOKBodyBuildTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	BuildTimeDescription := ``

	var BuildTimeFlagName string
	if cmdPrefix == "" {
		BuildTimeFlagName = "BuildTime"
	} else {
		BuildTimeFlagName = fmt.Sprintf("%v.BuildTime", cmdPrefix)
	}

	var BuildTimeFlagDefault string

	_ = cmd.PersistentFlags().String(BuildTimeFlagName, BuildTimeFlagDefault, BuildTimeDescription)

	return nil
}

func registerSystemVersionOKBodyComponents(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Components []*ComponentVersion array type is not supported by go-swagger cli yet

	return nil
}

func registerSystemVersionOKBodyExperimental(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ExperimentalDescription := ``

	var ExperimentalFlagName string
	if cmdPrefix == "" {
		ExperimentalFlagName = "Experimental"
	} else {
		ExperimentalFlagName = fmt.Sprintf("%v.Experimental", cmdPrefix)
	}

	var ExperimentalFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ExperimentalFlagName, ExperimentalFlagDefault, ExperimentalDescription)

	return nil
}

func registerSystemVersionOKBodyGitCommit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GitCommitDescription := ``

	var GitCommitFlagName string
	if cmdPrefix == "" {
		GitCommitFlagName = "GitCommit"
	} else {
		GitCommitFlagName = fmt.Sprintf("%v.GitCommit", cmdPrefix)
	}

	var GitCommitFlagDefault string

	_ = cmd.PersistentFlags().String(GitCommitFlagName, GitCommitFlagDefault, GitCommitDescription)

	return nil
}

func registerSystemVersionOKBodyGoVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GoVersionDescription := ``

	var GoVersionFlagName string
	if cmdPrefix == "" {
		GoVersionFlagName = "GoVersion"
	} else {
		GoVersionFlagName = fmt.Sprintf("%v.GoVersion", cmdPrefix)
	}

	var GoVersionFlagDefault string

	_ = cmd.PersistentFlags().String(GoVersionFlagName, GoVersionFlagDefault, GoVersionDescription)

	return nil
}

func registerSystemVersionOKBodyKernelVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	KernelVersionDescription := ``

	var KernelVersionFlagName string
	if cmdPrefix == "" {
		KernelVersionFlagName = "KernelVersion"
	} else {
		KernelVersionFlagName = fmt.Sprintf("%v.KernelVersion", cmdPrefix)
	}

	var KernelVersionFlagDefault string

	_ = cmd.PersistentFlags().String(KernelVersionFlagName, KernelVersionFlagDefault, KernelVersionDescription)

	return nil
}

func registerSystemVersionOKBodyMinAPIVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MinAPIVersionDescription := ``

	var MinAPIVersionFlagName string
	if cmdPrefix == "" {
		MinAPIVersionFlagName = "MinAPIVersion"
	} else {
		MinAPIVersionFlagName = fmt.Sprintf("%v.MinAPIVersion", cmdPrefix)
	}

	var MinAPIVersionFlagDefault string

	_ = cmd.PersistentFlags().String(MinAPIVersionFlagName, MinAPIVersionFlagDefault, MinAPIVersionDescription)

	return nil
}

func registerSystemVersionOKBodyOs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OsDescription := ``

	var OsFlagName string
	if cmdPrefix == "" {
		OsFlagName = "Os"
	} else {
		OsFlagName = fmt.Sprintf("%v.Os", cmdPrefix)
	}

	var OsFlagDefault string

	_ = cmd.PersistentFlags().String(OsFlagName, OsFlagDefault, OsDescription)

	return nil
}

func registerSystemVersionOKBodyPlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var PlatformFlagName string
	if cmdPrefix == "" {
		PlatformFlagName = "Platform"
	} else {
		PlatformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
	}

	if err := registerModelSystemVersionOKBodyPlatformFlags(depth+1, PlatformFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemVersionOKBodyVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	VersionDescription := ``

	var VersionFlagName string
	if cmdPrefix == "" {
		VersionFlagName = "Version"
	} else {
		VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	var VersionFlagDefault string

	_ = cmd.PersistentFlags().String(VersionFlagName, VersionFlagDefault, VersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSystemVersionOKBodyFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, APIVersionAdded := retrieveSystemVersionOKBodyAPIVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || APIVersionAdded

	err, ArchAdded := retrieveSystemVersionOKBodyArchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArchAdded

	err, BuildTimeAdded := retrieveSystemVersionOKBodyBuildTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BuildTimeAdded

	err, ComponentsAdded := retrieveSystemVersionOKBodyComponentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ComponentsAdded

	err, ExperimentalAdded := retrieveSystemVersionOKBodyExperimentalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExperimentalAdded

	err, GitCommitAdded := retrieveSystemVersionOKBodyGitCommitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GitCommitAdded

	err, GoVersionAdded := retrieveSystemVersionOKBodyGoVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GoVersionAdded

	err, KernelVersionAdded := retrieveSystemVersionOKBodyKernelVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KernelVersionAdded

	err, MinAPIVersionAdded := retrieveSystemVersionOKBodyMinAPIVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MinAPIVersionAdded

	err, OsAdded := retrieveSystemVersionOKBodyOsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OsAdded

	err, PlatformAdded := retrieveSystemVersionOKBodyPlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlatformAdded

	err, VersionAdded := retrieveSystemVersionOKBodyVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveSystemVersionOKBodyAPIVersionFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	APIVersionFlagName := fmt.Sprintf("%v.ApiVersion", cmdPrefix)
	if cmd.Flags().Changed(APIVersionFlagName) {

		var APIVersionFlagName string
		if cmdPrefix == "" {
			APIVersionFlagName = "ApiVersion"
		} else {
			APIVersionFlagName = fmt.Sprintf("%v.ApiVersion", cmdPrefix)
		}

		APIVersionFlagValue, err := cmd.Flags().GetString(APIVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = APIVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyArchFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ArchFlagName := fmt.Sprintf("%v.Arch", cmdPrefix)
	if cmd.Flags().Changed(ArchFlagName) {

		var ArchFlagName string
		if cmdPrefix == "" {
			ArchFlagName = "Arch"
		} else {
			ArchFlagName = fmt.Sprintf("%v.Arch", cmdPrefix)
		}

		ArchFlagValue, err := cmd.Flags().GetString(ArchFlagName)
		if err != nil {
			return err, false
		}
		m.Arch = ArchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyBuildTimeFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BuildTimeFlagName := fmt.Sprintf("%v.BuildTime", cmdPrefix)
	if cmd.Flags().Changed(BuildTimeFlagName) {

		var BuildTimeFlagName string
		if cmdPrefix == "" {
			BuildTimeFlagName = "BuildTime"
		} else {
			BuildTimeFlagName = fmt.Sprintf("%v.BuildTime", cmdPrefix)
		}

		BuildTimeFlagValue, err := cmd.Flags().GetString(BuildTimeFlagName)
		if err != nil {
			return err, false
		}
		m.BuildTime = BuildTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyComponentsFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ComponentsFlagName := fmt.Sprintf("%v.Components", cmdPrefix)
	if cmd.Flags().Changed(ComponentsFlagName) {
		// warning: Components array type []*ComponentVersion is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyExperimentalFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ExperimentalFlagName := fmt.Sprintf("%v.Experimental", cmdPrefix)
	if cmd.Flags().Changed(ExperimentalFlagName) {

		var ExperimentalFlagName string
		if cmdPrefix == "" {
			ExperimentalFlagName = "Experimental"
		} else {
			ExperimentalFlagName = fmt.Sprintf("%v.Experimental", cmdPrefix)
		}

		ExperimentalFlagValue, err := cmd.Flags().GetBool(ExperimentalFlagName)
		if err != nil {
			return err, false
		}
		m.Experimental = ExperimentalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyGitCommitFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GitCommitFlagName := fmt.Sprintf("%v.GitCommit", cmdPrefix)
	if cmd.Flags().Changed(GitCommitFlagName) {

		var GitCommitFlagName string
		if cmdPrefix == "" {
			GitCommitFlagName = "GitCommit"
		} else {
			GitCommitFlagName = fmt.Sprintf("%v.GitCommit", cmdPrefix)
		}

		GitCommitFlagValue, err := cmd.Flags().GetString(GitCommitFlagName)
		if err != nil {
			return err, false
		}
		m.GitCommit = GitCommitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyGoVersionFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GoVersionFlagName := fmt.Sprintf("%v.GoVersion", cmdPrefix)
	if cmd.Flags().Changed(GoVersionFlagName) {

		var GoVersionFlagName string
		if cmdPrefix == "" {
			GoVersionFlagName = "GoVersion"
		} else {
			GoVersionFlagName = fmt.Sprintf("%v.GoVersion", cmdPrefix)
		}

		GoVersionFlagValue, err := cmd.Flags().GetString(GoVersionFlagName)
		if err != nil {
			return err, false
		}
		m.GoVersion = GoVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyKernelVersionFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	KernelVersionFlagName := fmt.Sprintf("%v.KernelVersion", cmdPrefix)
	if cmd.Flags().Changed(KernelVersionFlagName) {

		var KernelVersionFlagName string
		if cmdPrefix == "" {
			KernelVersionFlagName = "KernelVersion"
		} else {
			KernelVersionFlagName = fmt.Sprintf("%v.KernelVersion", cmdPrefix)
		}

		KernelVersionFlagValue, err := cmd.Flags().GetString(KernelVersionFlagName)
		if err != nil {
			return err, false
		}
		m.KernelVersion = KernelVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyMinAPIVersionFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MinAPIVersionFlagName := fmt.Sprintf("%v.MinAPIVersion", cmdPrefix)
	if cmd.Flags().Changed(MinAPIVersionFlagName) {

		var MinAPIVersionFlagName string
		if cmdPrefix == "" {
			MinAPIVersionFlagName = "MinAPIVersion"
		} else {
			MinAPIVersionFlagName = fmt.Sprintf("%v.MinAPIVersion", cmdPrefix)
		}

		MinAPIVersionFlagValue, err := cmd.Flags().GetString(MinAPIVersionFlagName)
		if err != nil {
			return err, false
		}
		m.MinAPIVersion = MinAPIVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyOsFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OsFlagName := fmt.Sprintf("%v.Os", cmdPrefix)
	if cmd.Flags().Changed(OsFlagName) {

		var OsFlagName string
		if cmdPrefix == "" {
			OsFlagName = "Os"
		} else {
			OsFlagName = fmt.Sprintf("%v.Os", cmdPrefix)
		}

		OsFlagValue, err := cmd.Flags().GetString(OsFlagName)
		if err != nil {
			return err, false
		}
		m.Os = OsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyPlatformFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PlatformFlagName := fmt.Sprintf("%v.Platform", cmdPrefix)
	if cmd.Flags().Changed(PlatformFlagName) {
		// info: complex object Platform SystemVersionOKBodyPlatform is retrieved outside this Changed() block
	}
	PlatformFlagValue := m.Platform
	if swag.IsZero(PlatformFlagValue) {
		PlatformFlagValue = &system.SystemVersionOKBodyPlatform{}
	}

	err, PlatformAdded := retrieveModelSystemVersionOKBodyPlatformFlags(depth+1, PlatformFlagValue, PlatformFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlatformAdded
	if PlatformAdded {
		m.Platform = PlatformFlagValue
	}

	return nil, retAdded
}

func retrieveSystemVersionOKBodyVersionFlags(depth int, m *system.SystemVersionOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VersionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(VersionFlagName) {

		var VersionFlagName string
		if cmdPrefix == "" {
			VersionFlagName = "Version"
		} else {
			VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
		}

		VersionFlagValue, err := cmd.Flags().GetString(VersionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = VersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelSystemVersionOKBodyPlatformFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSystemVersionOKBodyPlatformName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemVersionOKBodyPlatformName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Required. `

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSystemVersionOKBodyPlatformFlags(depth int, m *system.SystemVersionOKBodyPlatform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveSystemVersionOKBodyPlatformNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	return nil, retAdded
}

func retrieveSystemVersionOKBodyPlatformNameFlags(depth int, m *system.SystemVersionOKBodyPlatform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
