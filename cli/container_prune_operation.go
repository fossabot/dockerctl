// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerPruneCmd returns a cmd to handle operation containerPrune
func makeOperationContainerContainerPruneCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerPrune",
		Short: ``,
		RunE:  runOperationContainerContainerPrune,
	}

	if err := registerOperationContainerContainerPruneParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerPrune uses cmd flags to call endpoint api
func runOperationContainerContainerPrune(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerPruneParams()
	if err, _ := retrieveOperationContainerContainerPruneFiltersFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationContainerContainerPruneResult(appCli.Container.ContainerPrune(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationContainerContainerPruneParamFlags registers all flags needed to fill params
func registerOperationContainerContainerPruneParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerPruneFiltersParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerPruneFiltersParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	FiltersDescription := `Filters to process on the prune list, encoded as JSON (a ` + "`" + `map[string][]string` + "`" + `).

Available filters:
- ` + "`" + `until=<timestamp>` + "`" + ` Prune containers created before this timestamp. The ` + "`" + `<timestamp>` + "`" + ` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. ` + "`" + `10m` + "`" + `, ` + "`" + `1h30m` + "`" + `) computed relative to the daemon machineâ€™s time.
- ` + "`" + `label` + "`" + ` (` + "`" + `label=<key>` + "`" + `, ` + "`" + `label=<key>=<value>` + "`" + `, ` + "`" + `label!=<key>` + "`" + `, or ` + "`" + `label!=<key>=<value>` + "`" + `) Prune containers with (or without, in case ` + "`" + `label!=...` + "`" + ` is used) the specified labels.
`

	var FiltersFlagName string
	if cmdPrefix == "" {
		FiltersFlagName = "filters"
	} else {
		FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
	}

	var FiltersFlagDefault string

	_ = cmd.PersistentFlags().String(FiltersFlagName, FiltersFlagDefault, FiltersDescription)

	return nil
}

func retrieveOperationContainerContainerPruneFiltersFlag(m *container.ContainerPruneParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filters") {

		var FiltersFlagName string
		if cmdPrefix == "" {
			FiltersFlagName = "filters"
		} else {
			FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
		}

		FiltersFlagValue, err := cmd.Flags().GetString(FiltersFlagName)
		if err != nil {
			return err, false
		}
		m.Filters = &FiltersFlagValue

	}
	return nil, retAdded
}

// parseOperationContainerContainerPruneResult parses request result and return the string content
func parseOperationContainerContainerPruneResult(resp0 *container.ContainerPruneOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*container.ContainerPruneOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerPruneInternalServerError)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelContainerPruneOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerPruneOKBodyContainersDeleted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerPruneOKBodySpaceReclaimed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerPruneOKBodyContainersDeleted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ContainersDeleted []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerPruneOKBodySpaceReclaimed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SpaceReclaimedDescription := `Disk space reclaimed in bytes`

	var SpaceReclaimedFlagName string
	if cmdPrefix == "" {
		SpaceReclaimedFlagName = "SpaceReclaimed"
	} else {
		SpaceReclaimedFlagName = fmt.Sprintf("%v.SpaceReclaimed", cmdPrefix)
	}

	var SpaceReclaimedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SpaceReclaimedFlagName, SpaceReclaimedFlagDefault, SpaceReclaimedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerPruneOKBodyFlags(depth int, m *container.ContainerPruneOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ContainersDeletedAdded := retrieveContainerPruneOKBodyContainersDeletedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainersDeletedAdded

	err, SpaceReclaimedAdded := retrieveContainerPruneOKBodySpaceReclaimedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceReclaimedAdded

	return nil, retAdded
}

func retrieveContainerPruneOKBodyContainersDeletedFlags(depth int, m *container.ContainerPruneOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ContainersDeletedFlagName := fmt.Sprintf("%v.ContainersDeleted", cmdPrefix)
	if cmd.Flags().Changed(ContainersDeletedFlagName) {
		// warning: ContainersDeleted array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerPruneOKBodySpaceReclaimedFlags(depth int, m *container.ContainerPruneOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SpaceReclaimedFlagName := fmt.Sprintf("%v.SpaceReclaimed", cmdPrefix)
	if cmd.Flags().Changed(SpaceReclaimedFlagName) {

		var SpaceReclaimedFlagName string
		if cmdPrefix == "" {
			SpaceReclaimedFlagName = "SpaceReclaimed"
		} else {
			SpaceReclaimedFlagName = fmt.Sprintf("%v.SpaceReclaimed", cmdPrefix)
		}

		SpaceReclaimedFlagValue, err := cmd.Flags().GetInt64(SpaceReclaimedFlagName)
		if err != nil {
			return err, false
		}
		m.SpaceReclaimed = SpaceReclaimedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
