// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for PluginEnv

// register flags to command
func registerModelPluginEnvFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginEnvDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginEnvName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginEnvSettable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginEnvValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginEnvDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := `Required. `

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "Description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerPluginEnvName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Required. `

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerPluginEnvSettable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Settable []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginEnvValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ValueDescription := `Required. `

	var ValueFlagName string
	if cmdPrefix == "" {
		ValueFlagName = "Value"
	} else {
		ValueFlagName = fmt.Sprintf("%v.Value", cmdPrefix)
	}

	var ValueFlagDefault string

	_ = cmd.PersistentFlags().String(ValueFlagName, ValueFlagDefault, ValueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginEnvFlags(depth int, m *models.PluginEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptionAdded := retrievePluginEnvDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, NameAdded := retrievePluginEnvNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, SettableAdded := retrievePluginEnvSettableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SettableAdded

	err, ValueAdded := retrievePluginEnvValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValueAdded

	return nil, retAdded
}

func retrievePluginEnvDescriptionFlags(depth int, m *models.PluginEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "Description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginEnvNameFlags(depth int, m *models.PluginEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginEnvSettableFlags(depth int, m *models.PluginEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SettableFlagName := fmt.Sprintf("%v.Settable", cmdPrefix)
	if cmd.Flags().Changed(SettableFlagName) {
		// warning: Settable array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginEnvValueFlags(depth int, m *models.PluginEnv, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ValueFlagName := fmt.Sprintf("%v.Value", cmdPrefix)
	if cmd.Flags().Changed(ValueFlagName) {

		var ValueFlagName string
		if cmdPrefix == "" {
			ValueFlagName = "Value"
		} else {
			ValueFlagName = fmt.Sprintf("%v.Value", cmdPrefix)
		}

		ValueFlagValue, err := cmd.Flags().GetString(ValueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = &ValueFlagValue

		retAdded = true
	}

	return nil, retAdded
}
