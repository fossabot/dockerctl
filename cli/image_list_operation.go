// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/image"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationImageImageListCmd returns a cmd to handle operation imageList
func makeOperationImageImageListCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ImageList",
		Short: `Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.`,
		RunE:  runOperationImageImageList,
	}

	if err := registerOperationImageImageListParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationImageImageList uses cmd flags to call endpoint api
func runOperationImageImageList(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := image.NewImageListParams()
	if err, _ := retrieveOperationImageImageListAllFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageListDigestsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageListFiltersFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationImageImageListResult(appCli.Image.ImageList(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationImageImageListParamFlags registers all flags needed to fill params
func registerOperationImageImageListParamFlags(cmd *cobra.Command) error {
	if err := registerOperationImageImageListAllParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageListDigestsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageListFiltersParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationImageImageListAllParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	AllDescription := `Show all images. Only images from a final layer (no children) are shown by default.`

	var AllFlagName string
	if cmdPrefix == "" {
		AllFlagName = "all"
	} else {
		AllFlagName = fmt.Sprintf("%v.all", cmdPrefix)
	}

	var AllFlagDefault bool

	_ = cmd.PersistentFlags().Bool(AllFlagName, AllFlagDefault, AllDescription)

	return nil
}
func registerOperationImageImageListDigestsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	DigestsDescription := `Show digest information as a ` + "`" + `RepoDigests` + "`" + ` field on each image.`

	var DigestsFlagName string
	if cmdPrefix == "" {
		DigestsFlagName = "digests"
	} else {
		DigestsFlagName = fmt.Sprintf("%v.digests", cmdPrefix)
	}

	var DigestsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(DigestsFlagName, DigestsFlagDefault, DigestsDescription)

	return nil
}
func registerOperationImageImageListFiltersParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	FiltersDescription := `A JSON encoded value of the filters (a ` + "`" + `map[string][]string` + "`" + `) to process on the images list. Available filters:

- ` + "`" + `before` + "`" + `=(` + "`" + `<image-name>[:<tag>]` + "`" + `,  ` + "`" + `<image id>` + "`" + ` or ` + "`" + `<image@digest>` + "`" + `)
- ` + "`" + `dangling=true` + "`" + `
- ` + "`" + `label=key` + "`" + ` or ` + "`" + `label="key=value"` + "`" + ` of an image label
- ` + "`" + `reference` + "`" + `=(` + "`" + `<image-name>[:<tag>]` + "`" + `)
- ` + "`" + `since` + "`" + `=(` + "`" + `<image-name>[:<tag>]` + "`" + `,  ` + "`" + `<image id>` + "`" + ` or ` + "`" + `<image@digest>` + "`" + `)
`

	var FiltersFlagName string
	if cmdPrefix == "" {
		FiltersFlagName = "filters"
	} else {
		FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
	}

	var FiltersFlagDefault string

	_ = cmd.PersistentFlags().String(FiltersFlagName, FiltersFlagDefault, FiltersDescription)

	return nil
}

func retrieveOperationImageImageListAllFlag(m *image.ImageListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("all") {

		var AllFlagName string
		if cmdPrefix == "" {
			AllFlagName = "all"
		} else {
			AllFlagName = fmt.Sprintf("%v.all", cmdPrefix)
		}

		AllFlagValue, err := cmd.Flags().GetBool(AllFlagName)
		if err != nil {
			return err, false
		}
		m.All = &AllFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageListDigestsFlag(m *image.ImageListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("digests") {

		var DigestsFlagName string
		if cmdPrefix == "" {
			DigestsFlagName = "digests"
		} else {
			DigestsFlagName = fmt.Sprintf("%v.digests", cmdPrefix)
		}

		DigestsFlagValue, err := cmd.Flags().GetBool(DigestsFlagName)
		if err != nil {
			return err, false
		}
		m.Digests = &DigestsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageListFiltersFlag(m *image.ImageListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filters") {

		var FiltersFlagName string
		if cmdPrefix == "" {
			FiltersFlagName = "filters"
		} else {
			FiltersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
		}

		FiltersFlagValue, err := cmd.Flags().GetString(FiltersFlagName)
		if err != nil {
			return err, false
		}
		m.Filters = &FiltersFlagValue

	}
	return nil, retAdded
}

// parseOperationImageImageListResult parses request result and return the string content
func parseOperationImageImageListResult(resp0 *image.ImageListOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*image.ImageListOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*image.ImageListInternalServerError)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
