// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for Config

// register flags to command
func registerModelConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConfigCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedAtDescription := ``

	var CreatedAtFlagName string
	if cmdPrefix == "" {
		CreatedAtFlagName = "CreatedAt"
	} else {
		CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	var CreatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(CreatedAtFlagName, CreatedAtFlagDefault, CreatedAtDescription)

	return nil
}

func registerConfigID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := ``

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "ID"
	} else {
		IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerConfigSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var SpecFlagName string
	if cmdPrefix == "" {
		SpecFlagName = "Spec"
	} else {
		SpecFlagName = fmt.Sprintf("%v.Spec", cmdPrefix)
	}

	if err := registerModelConfigSpecFlags(depth+1, SpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UpdatedAtDescription := ``

	var UpdatedAtFlagName string
	if cmdPrefix == "" {
		UpdatedAtFlagName = "UpdatedAt"
	} else {
		UpdatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	}

	var UpdatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(UpdatedAtFlagName, UpdatedAtFlagDefault, UpdatedAtDescription)

	return nil
}

func registerConfigVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var VersionFlagName string
	if cmdPrefix == "" {
		VersionFlagName = "Version"
	} else {
		VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	if err := registerModelObjectVersionFlags(depth+1, VersionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConfigFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CreatedAtAdded := retrieveConfigCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAtAdded

	err, IDAdded := retrieveConfigIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, SpecAdded := retrieveConfigSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpecAdded

	err, UpdatedAtAdded := retrieveConfigUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdatedAtAdded

	err, VersionAdded := retrieveConfigVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveConfigCreatedAtFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(CreatedAtFlagName) {

		var CreatedAtFlagName string
		if cmdPrefix == "" {
			CreatedAtFlagName = "CreatedAt"
		} else {
			CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		CreatedAtFlagValue, err := cmd.Flags().GetString(CreatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = CreatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigIDFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "ID"
		} else {
			IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigSpecFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SpecFlagName := fmt.Sprintf("%v.Spec", cmdPrefix)
	if cmd.Flags().Changed(SpecFlagName) {
		// info: complex object Spec ConfigSpec is retrieved outside this Changed() block
	}
	SpecFlagValue := m.Spec
	if swag.IsZero(SpecFlagValue) {
		SpecFlagValue = &models.ConfigSpec{}
	}

	err, SpecAdded := retrieveModelConfigSpecFlags(depth+1, SpecFlagValue, SpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpecAdded
	if SpecAdded {
		m.Spec = SpecFlagValue
	}

	return nil, retAdded
}

func retrieveConfigUpdatedAtFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UpdatedAtFlagName := fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	if cmd.Flags().Changed(UpdatedAtFlagName) {

		var UpdatedAtFlagName string
		if cmdPrefix == "" {
			UpdatedAtFlagName = "UpdatedAt"
		} else {
			UpdatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
		}

		UpdatedAtFlagValue, err := cmd.Flags().GetString(UpdatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = UpdatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigVersionFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VersionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(VersionFlagName) {
		// info: complex object Version ObjectVersion is retrieved outside this Changed() block
	}
	VersionFlagValue := m.Version
	if swag.IsZero(VersionFlagValue) {
		VersionFlagValue = &models.ObjectVersion{}
	}

	err, VersionAdded := retrieveModelObjectVersionFlags(depth+1, VersionFlagValue, VersionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded
	if VersionAdded {
		m.Version = VersionFlagValue
	}

	return nil, retAdded
}
