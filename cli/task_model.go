// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for Task

// register flags to command
func registerModelTaskFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskAssignedGenericResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskDesiredState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskNodeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskServiceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSlot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskAssignedGenericResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: AssignedGenericResources GenericResources array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedAtDescription := ``

	var CreatedAtFlagName string
	if cmdPrefix == "" {
		CreatedAtFlagName = "CreatedAt"
	} else {
		CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	var CreatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(CreatedAtFlagName, CreatedAtFlagDefault, CreatedAtDescription)

	return nil
}

func registerTaskDesiredState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive DesiredState TaskState is not supported by go-swagger cli yet

	return nil
}

func registerTaskID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := `The ID of the task.`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "ID"
	} else {
		IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerTaskLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Name of the task.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerTaskNodeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NodeIDDescription := `The ID of the node that this task is on.`

	var NodeIDFlagName string
	if cmdPrefix == "" {
		NodeIDFlagName = "NodeID"
	} else {
		NodeIDFlagName = fmt.Sprintf("%v.NodeID", cmdPrefix)
	}

	var NodeIDFlagDefault string

	_ = cmd.PersistentFlags().String(NodeIDFlagName, NodeIDFlagDefault, NodeIDDescription)

	return nil
}

func registerTaskServiceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ServiceIDDescription := `The ID of the service this task is part of.`

	var ServiceIDFlagName string
	if cmdPrefix == "" {
		ServiceIDFlagName = "ServiceID"
	} else {
		ServiceIDFlagName = fmt.Sprintf("%v.ServiceID", cmdPrefix)
	}

	var ServiceIDFlagDefault string

	_ = cmd.PersistentFlags().String(ServiceIDFlagName, ServiceIDFlagDefault, ServiceIDDescription)

	return nil
}

func registerTaskSlot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SlotDescription := ``

	var SlotFlagName string
	if cmdPrefix == "" {
		SlotFlagName = "Slot"
	} else {
		SlotFlagName = fmt.Sprintf("%v.Slot", cmdPrefix)
	}

	var SlotFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SlotFlagName, SlotFlagDefault, SlotDescription)

	return nil
}

func registerTaskSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var SpecFlagName string
	if cmdPrefix == "" {
		SpecFlagName = "Spec"
	} else {
		SpecFlagName = fmt.Sprintf("%v.Spec", cmdPrefix)
	}

	if err := registerModelTaskSpecFlags(depth+1, SpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var StatusFlagName string
	if cmdPrefix == "" {
		StatusFlagName = "Status"
	} else {
		StatusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
	}

	if err := registerModelTaskStatusFlags(depth+1, StatusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UpdatedAtDescription := ``

	var UpdatedAtFlagName string
	if cmdPrefix == "" {
		UpdatedAtFlagName = "UpdatedAt"
	} else {
		UpdatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	}

	var UpdatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(UpdatedAtFlagName, UpdatedAtFlagDefault, UpdatedAtDescription)

	return nil
}

func registerTaskVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var VersionFlagName string
	if cmdPrefix == "" {
		VersionFlagName = "Version"
	} else {
		VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	if err := registerModelObjectVersionFlags(depth+1, VersionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AssignedGenericResourcesAdded := retrieveTaskAssignedGenericResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AssignedGenericResourcesAdded

	err, CreatedAtAdded := retrieveTaskCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAtAdded

	err, DesiredStateAdded := retrieveTaskDesiredStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DesiredStateAdded

	err, IDAdded := retrieveTaskIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, LabelsAdded := retrieveTaskLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, NameAdded := retrieveTaskNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, NodeIDAdded := retrieveTaskNodeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NodeIDAdded

	err, ServiceIDAdded := retrieveTaskServiceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ServiceIDAdded

	err, SlotAdded := retrieveTaskSlotFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SlotAdded

	err, SpecAdded := retrieveTaskSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpecAdded

	err, StatusAdded := retrieveTaskStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, UpdatedAtAdded := retrieveTaskUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdatedAtAdded

	err, VersionAdded := retrieveTaskVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveTaskAssignedGenericResourcesFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AssignedGenericResourcesFlagName := fmt.Sprintf("%v.AssignedGenericResources", cmdPrefix)
	if cmd.Flags().Changed(AssignedGenericResourcesFlagName) {
		// warning: AssignedGenericResources array type GenericResources is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskCreatedAtFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(CreatedAtFlagName) {

		var CreatedAtFlagName string
		if cmdPrefix == "" {
			CreatedAtFlagName = "CreatedAt"
		} else {
			CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		CreatedAtFlagValue, err := cmd.Flags().GetString(CreatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = CreatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskDesiredStateFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DesiredStateFlagName := fmt.Sprintf("%v.DesiredState", cmdPrefix)
	if cmd.Flags().Changed(DesiredStateFlagName) {

		// warning: primitive DesiredState TaskState is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskIDFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "ID"
		} else {
			IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskLabelsFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskNameFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskNodeIDFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NodeIDFlagName := fmt.Sprintf("%v.NodeID", cmdPrefix)
	if cmd.Flags().Changed(NodeIDFlagName) {

		var NodeIDFlagName string
		if cmdPrefix == "" {
			NodeIDFlagName = "NodeID"
		} else {
			NodeIDFlagName = fmt.Sprintf("%v.NodeID", cmdPrefix)
		}

		NodeIDFlagValue, err := cmd.Flags().GetString(NodeIDFlagName)
		if err != nil {
			return err, false
		}
		m.NodeID = NodeIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskServiceIDFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ServiceIDFlagName := fmt.Sprintf("%v.ServiceID", cmdPrefix)
	if cmd.Flags().Changed(ServiceIDFlagName) {

		var ServiceIDFlagName string
		if cmdPrefix == "" {
			ServiceIDFlagName = "ServiceID"
		} else {
			ServiceIDFlagName = fmt.Sprintf("%v.ServiceID", cmdPrefix)
		}

		ServiceIDFlagValue, err := cmd.Flags().GetString(ServiceIDFlagName)
		if err != nil {
			return err, false
		}
		m.ServiceID = ServiceIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSlotFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SlotFlagName := fmt.Sprintf("%v.Slot", cmdPrefix)
	if cmd.Flags().Changed(SlotFlagName) {

		var SlotFlagName string
		if cmdPrefix == "" {
			SlotFlagName = "Slot"
		} else {
			SlotFlagName = fmt.Sprintf("%v.Slot", cmdPrefix)
		}

		SlotFlagValue, err := cmd.Flags().GetInt64(SlotFlagName)
		if err != nil {
			return err, false
		}
		m.Slot = SlotFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SpecFlagName := fmt.Sprintf("%v.Spec", cmdPrefix)
	if cmd.Flags().Changed(SpecFlagName) {
		// info: complex object Spec TaskSpec is retrieved outside this Changed() block
	}
	SpecFlagValue := m.Spec
	if swag.IsZero(SpecFlagValue) {
		SpecFlagValue = &models.TaskSpec{}
	}

	err, SpecAdded := retrieveModelTaskSpecFlags(depth+1, SpecFlagValue, SpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpecAdded
	if SpecAdded {
		m.Spec = SpecFlagValue
	}

	return nil, retAdded
}

func retrieveTaskStatusFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StatusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(StatusFlagName) {
		// info: complex object Status TaskStatus is retrieved outside this Changed() block
	}
	StatusFlagValue := m.Status
	if swag.IsZero(StatusFlagValue) {
		StatusFlagValue = &models.TaskStatus{}
	}

	err, StatusAdded := retrieveModelTaskStatusFlags(depth+1, StatusFlagValue, StatusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded
	if StatusAdded {
		m.Status = StatusFlagValue
	}

	return nil, retAdded
}

func retrieveTaskUpdatedAtFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UpdatedAtFlagName := fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	if cmd.Flags().Changed(UpdatedAtFlagName) {

		var UpdatedAtFlagName string
		if cmdPrefix == "" {
			UpdatedAtFlagName = "UpdatedAt"
		} else {
			UpdatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
		}

		UpdatedAtFlagValue, err := cmd.Flags().GetString(UpdatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = UpdatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskVersionFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VersionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(VersionFlagName) {
		// info: complex object Version ObjectVersion is retrieved outside this Changed() block
	}
	VersionFlagValue := m.Version
	if swag.IsZero(VersionFlagValue) {
		VersionFlagValue = &models.ObjectVersion{}
	}

	err, VersionAdded := retrieveModelObjectVersionFlags(depth+1, VersionFlagValue, VersionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded
	if VersionAdded {
		m.Version = VersionFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TaskStatus

// register flags to command
func registerModelTaskStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskStatusContainerStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStatusErr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStatusMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStatusState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStatusTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskStatusContainerStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ContainerStatusFlagName string
	if cmdPrefix == "" {
		ContainerStatusFlagName = "ContainerStatus"
	} else {
		ContainerStatusFlagName = fmt.Sprintf("%v.ContainerStatus", cmdPrefix)
	}

	if err := registerModelTaskStatusContainerStatusFlags(depth+1, ContainerStatusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskStatusErr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ErrDescription := ``

	var ErrFlagName string
	if cmdPrefix == "" {
		ErrFlagName = "Err"
	} else {
		ErrFlagName = fmt.Sprintf("%v.Err", cmdPrefix)
	}

	var ErrFlagDefault string

	_ = cmd.PersistentFlags().String(ErrFlagName, ErrFlagDefault, ErrDescription)

	return nil
}

func registerTaskStatusMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MessageDescription := ``

	var MessageFlagName string
	if cmdPrefix == "" {
		MessageFlagName = "Message"
	} else {
		MessageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
	}

	var MessageFlagDefault string

	_ = cmd.PersistentFlags().String(MessageFlagName, MessageFlagDefault, MessageDescription)

	return nil
}

func registerTaskStatusState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive State TaskState is not supported by go-swagger cli yet

	return nil
}

func registerTaskStatusTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TimestampDescription := ``

	var TimestampFlagName string
	if cmdPrefix == "" {
		TimestampFlagName = "Timestamp"
	} else {
		TimestampFlagName = fmt.Sprintf("%v.Timestamp", cmdPrefix)
	}

	var TimestampFlagDefault string

	_ = cmd.PersistentFlags().String(TimestampFlagName, TimestampFlagDefault, TimestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskStatusFlags(depth int, m *models.TaskStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ContainerStatusAdded := retrieveTaskStatusContainerStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainerStatusAdded

	err, ErrAdded := retrieveTaskStatusErrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrAdded

	err, MessageAdded := retrieveTaskStatusMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	err, StateAdded := retrieveTaskStatusStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, TimestampAdded := retrieveTaskStatusTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimestampAdded

	return nil, retAdded
}

func retrieveTaskStatusContainerStatusFlags(depth int, m *models.TaskStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ContainerStatusFlagName := fmt.Sprintf("%v.ContainerStatus", cmdPrefix)
	if cmd.Flags().Changed(ContainerStatusFlagName) {
		// info: complex object ContainerStatus TaskStatusContainerStatus is retrieved outside this Changed() block
	}
	ContainerStatusFlagValue := m.ContainerStatus
	if swag.IsZero(ContainerStatusFlagValue) {
		ContainerStatusFlagValue = &models.TaskStatusContainerStatus{}
	}

	err, ContainerStatusAdded := retrieveModelTaskStatusContainerStatusFlags(depth+1, ContainerStatusFlagValue, ContainerStatusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainerStatusAdded
	if ContainerStatusAdded {
		m.ContainerStatus = ContainerStatusFlagValue
	}

	return nil, retAdded
}

func retrieveTaskStatusErrFlags(depth int, m *models.TaskStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ErrFlagName := fmt.Sprintf("%v.Err", cmdPrefix)
	if cmd.Flags().Changed(ErrFlagName) {

		var ErrFlagName string
		if cmdPrefix == "" {
			ErrFlagName = "Err"
		} else {
			ErrFlagName = fmt.Sprintf("%v.Err", cmdPrefix)
		}

		ErrFlagValue, err := cmd.Flags().GetString(ErrFlagName)
		if err != nil {
			return err, false
		}
		m.Err = ErrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskStatusMessageFlags(depth int, m *models.TaskStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MessageFlagName := fmt.Sprintf("%v.Message", cmdPrefix)
	if cmd.Flags().Changed(MessageFlagName) {

		var MessageFlagName string
		if cmdPrefix == "" {
			MessageFlagName = "Message"
		} else {
			MessageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
		}

		MessageFlagValue, err := cmd.Flags().GetString(MessageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = MessageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskStatusStateFlags(depth int, m *models.TaskStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StateFlagName := fmt.Sprintf("%v.State", cmdPrefix)
	if cmd.Flags().Changed(StateFlagName) {

		// warning: primitive State TaskState is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskStatusTimestampFlags(depth int, m *models.TaskStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TimestampFlagName := fmt.Sprintf("%v.Timestamp", cmdPrefix)
	if cmd.Flags().Changed(TimestampFlagName) {

		var TimestampFlagName string
		if cmdPrefix == "" {
			TimestampFlagName = "Timestamp"
		} else {
			TimestampFlagName = fmt.Sprintf("%v.Timestamp", cmdPrefix)
		}

		TimestampFlagValue, err := cmd.Flags().GetString(TimestampFlagName)
		if err != nil {
			return err, false
		}
		m.Timestamp = TimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskStatusContainerStatus

// register flags to command
func registerModelTaskStatusContainerStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskStatusContainerStatusContainerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStatusContainerStatusExitCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStatusContainerStatusPID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskStatusContainerStatusContainerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ContainerIDDescription := ``

	var ContainerIDFlagName string
	if cmdPrefix == "" {
		ContainerIDFlagName = "ContainerID"
	} else {
		ContainerIDFlagName = fmt.Sprintf("%v.ContainerID", cmdPrefix)
	}

	var ContainerIDFlagDefault string

	_ = cmd.PersistentFlags().String(ContainerIDFlagName, ContainerIDFlagDefault, ContainerIDDescription)

	return nil
}

func registerTaskStatusContainerStatusExitCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ExitCodeDescription := ``

	var ExitCodeFlagName string
	if cmdPrefix == "" {
		ExitCodeFlagName = "ExitCode"
	} else {
		ExitCodeFlagName = fmt.Sprintf("%v.ExitCode", cmdPrefix)
	}

	var ExitCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ExitCodeFlagName, ExitCodeFlagDefault, ExitCodeDescription)

	return nil
}

func registerTaskStatusContainerStatusPID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PIDDescription := ``

	var PIDFlagName string
	if cmdPrefix == "" {
		PIDFlagName = "PID"
	} else {
		PIDFlagName = fmt.Sprintf("%v.PID", cmdPrefix)
	}

	var PIDFlagDefault int64

	_ = cmd.PersistentFlags().Int64(PIDFlagName, PIDFlagDefault, PIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskStatusContainerStatusFlags(depth int, m *models.TaskStatusContainerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ContainerIDAdded := retrieveTaskStatusContainerStatusContainerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainerIDAdded

	err, ExitCodeAdded := retrieveTaskStatusContainerStatusExitCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExitCodeAdded

	err, PIDAdded := retrieveTaskStatusContainerStatusPIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PIDAdded

	return nil, retAdded
}

func retrieveTaskStatusContainerStatusContainerIDFlags(depth int, m *models.TaskStatusContainerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ContainerIDFlagName := fmt.Sprintf("%v.ContainerID", cmdPrefix)
	if cmd.Flags().Changed(ContainerIDFlagName) {

		var ContainerIDFlagName string
		if cmdPrefix == "" {
			ContainerIDFlagName = "ContainerID"
		} else {
			ContainerIDFlagName = fmt.Sprintf("%v.ContainerID", cmdPrefix)
		}

		ContainerIDFlagValue, err := cmd.Flags().GetString(ContainerIDFlagName)
		if err != nil {
			return err, false
		}
		m.ContainerID = ContainerIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskStatusContainerStatusExitCodeFlags(depth int, m *models.TaskStatusContainerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ExitCodeFlagName := fmt.Sprintf("%v.ExitCode", cmdPrefix)
	if cmd.Flags().Changed(ExitCodeFlagName) {

		var ExitCodeFlagName string
		if cmdPrefix == "" {
			ExitCodeFlagName = "ExitCode"
		} else {
			ExitCodeFlagName = fmt.Sprintf("%v.ExitCode", cmdPrefix)
		}

		ExitCodeFlagValue, err := cmd.Flags().GetInt64(ExitCodeFlagName)
		if err != nil {
			return err, false
		}
		m.ExitCode = ExitCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskStatusContainerStatusPIDFlags(depth int, m *models.TaskStatusContainerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PIDFlagName := fmt.Sprintf("%v.PID", cmdPrefix)
	if cmd.Flags().Changed(PIDFlagName) {

		var PIDFlagName string
		if cmdPrefix == "" {
			PIDFlagName = "PID"
		} else {
			PIDFlagName = fmt.Sprintf("%v.PID", cmdPrefix)
		}

		PIDFlagValue, err := cmd.Flags().GetInt64(PIDFlagName)
		if err != nil {
			return err, false
		}
		m.PID = PIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}
