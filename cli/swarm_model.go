// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for Swarm

// register flags to command
func registerModelSwarmFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// register embedded ClusterInfo flags

	if err := registerModelClusterInfoFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	// register anonymous fields for AO1

	if err := registerSwarmAnonAO1JoinTokens(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

// inline definition name AO1, type

func registerSwarmAnonAO1JoinTokens(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var JoinTokensFlagName string
	if cmdPrefix == "" {
		JoinTokensFlagName = "JoinTokens"
	} else {
		JoinTokensFlagName = fmt.Sprintf("%v.JoinTokens", cmdPrefix)
	}

	if err := registerModelJoinTokensFlags(depth+1, JoinTokensFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmFlags(depth int, m *models.Swarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// retrieve model ClusterInfo
	err, AO0Added := retrieveModelClusterInfoFlags(depth, &m.ClusterInfo, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AO0Added

	// retrieve allOf AO1 fields

	err, JoinTokensAdded := retrieveSwarmAnonAO1JoinTokensFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || JoinTokensAdded

	return nil, retAdded
}

// define retrieve functions for fields for inline definition name AO1

func retrieveSwarmAnonAO1JoinTokensFlags(depth int, m *models.Swarm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	JoinTokensFlagName := fmt.Sprintf("%v.JoinTokens", cmdPrefix)
	if cmd.Flags().Changed(JoinTokensFlagName) {
		// info: complex object JoinTokens JoinTokens is retrieved outside this Changed() block
	}
	JoinTokensFlagValue := m.JoinTokens
	if swag.IsZero(JoinTokensFlagValue) {
		JoinTokensFlagValue = &models.JoinTokens{}
	}

	err, JoinTokensAdded := retrieveModelJoinTokensFlags(depth+1, JoinTokensFlagValue, JoinTokensFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || JoinTokensAdded
	if JoinTokensAdded {
		m.JoinTokens = JoinTokensFlagValue
	}

	return nil, retAdded
}
