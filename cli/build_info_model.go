// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for BuildInfo

// register flags to command
func registerModelBuildInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBuildInfoAux(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildInfoError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildInfoErrorDetail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildInfoID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildInfoProgress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildInfoProgressDetail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildInfoStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildInfoStream(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuildInfoAux(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var AuxFlagName string
	if cmdPrefix == "" {
		AuxFlagName = "aux"
	} else {
		AuxFlagName = fmt.Sprintf("%v.aux", cmdPrefix)
	}

	if err := registerModelImageIDFlags(depth+1, AuxFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuildInfoError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ErrorDescription := ``

	var ErrorFlagName string
	if cmdPrefix == "" {
		ErrorFlagName = "error"
	} else {
		ErrorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	var ErrorFlagDefault string

	_ = cmd.PersistentFlags().String(ErrorFlagName, ErrorFlagDefault, ErrorDescription)

	return nil
}

func registerBuildInfoErrorDetail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ErrorDetailFlagName string
	if cmdPrefix == "" {
		ErrorDetailFlagName = "errorDetail"
	} else {
		ErrorDetailFlagName = fmt.Sprintf("%v.errorDetail", cmdPrefix)
	}

	if err := registerModelErrorDetailFlags(depth+1, ErrorDetailFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuildInfoID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := ``

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerBuildInfoProgress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ProgressDescription := ``

	var ProgressFlagName string
	if cmdPrefix == "" {
		ProgressFlagName = "progress"
	} else {
		ProgressFlagName = fmt.Sprintf("%v.progress", cmdPrefix)
	}

	var ProgressFlagDefault string

	_ = cmd.PersistentFlags().String(ProgressFlagName, ProgressFlagDefault, ProgressDescription)

	return nil
}

func registerBuildInfoProgressDetail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ProgressDetailFlagName string
	if cmdPrefix == "" {
		ProgressDetailFlagName = "progressDetail"
	} else {
		ProgressDetailFlagName = fmt.Sprintf("%v.progressDetail", cmdPrefix)
	}

	if err := registerModelProgressDetailFlags(depth+1, ProgressDetailFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuildInfoStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StatusDescription := ``

	var StatusFlagName string
	if cmdPrefix == "" {
		StatusFlagName = "status"
	} else {
		StatusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var StatusFlagDefault string

	_ = cmd.PersistentFlags().String(StatusFlagName, StatusFlagDefault, StatusDescription)

	return nil
}

func registerBuildInfoStream(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StreamDescription := ``

	var StreamFlagName string
	if cmdPrefix == "" {
		StreamFlagName = "stream"
	} else {
		StreamFlagName = fmt.Sprintf("%v.stream", cmdPrefix)
	}

	var StreamFlagDefault string

	_ = cmd.PersistentFlags().String(StreamFlagName, StreamFlagDefault, StreamDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBuildInfoFlags(depth int, m *models.BuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AuxAdded := retrieveBuildInfoAuxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuxAdded

	err, ErrorAdded := retrieveBuildInfoErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded

	err, ErrorDetailAdded := retrieveBuildInfoErrorDetailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorDetailAdded

	err, IDAdded := retrieveBuildInfoIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, ProgressAdded := retrieveBuildInfoProgressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProgressAdded

	err, ProgressDetailAdded := retrieveBuildInfoProgressDetailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProgressDetailAdded

	err, StatusAdded := retrieveBuildInfoStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	err, StreamAdded := retrieveBuildInfoStreamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StreamAdded

	return nil, retAdded
}

func retrieveBuildInfoAuxFlags(depth int, m *models.BuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AuxFlagName := fmt.Sprintf("%v.aux", cmdPrefix)
	if cmd.Flags().Changed(AuxFlagName) {
		// info: complex object aux ImageID is retrieved outside this Changed() block
	}
	AuxFlagValue := m.Aux
	if swag.IsZero(AuxFlagValue) {
		AuxFlagValue = &models.ImageID{}
	}

	err, AuxAdded := retrieveModelImageIDFlags(depth+1, AuxFlagValue, AuxFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuxAdded
	if AuxAdded {
		m.Aux = AuxFlagValue
	}

	return nil, retAdded
}

func retrieveBuildInfoErrorFlags(depth int, m *models.BuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ErrorFlagName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(ErrorFlagName) {

		var ErrorFlagName string
		if cmdPrefix == "" {
			ErrorFlagName = "error"
		} else {
			ErrorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
		}

		ErrorFlagValue, err := cmd.Flags().GetString(ErrorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = ErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildInfoErrorDetailFlags(depth int, m *models.BuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ErrorDetailFlagName := fmt.Sprintf("%v.errorDetail", cmdPrefix)
	if cmd.Flags().Changed(ErrorDetailFlagName) {
		// info: complex object errorDetail ErrorDetail is retrieved outside this Changed() block
	}
	ErrorDetailFlagValue := m.ErrorDetail
	if swag.IsZero(ErrorDetailFlagValue) {
		ErrorDetailFlagValue = &models.ErrorDetail{}
	}

	err, ErrorDetailAdded := retrieveModelErrorDetailFlags(depth+1, ErrorDetailFlagValue, ErrorDetailFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorDetailAdded
	if ErrorDetailAdded {
		m.ErrorDetail = ErrorDetailFlagValue
	}

	return nil, retAdded
}

func retrieveBuildInfoIDFlags(depth int, m *models.BuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildInfoProgressFlags(depth int, m *models.BuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ProgressFlagName := fmt.Sprintf("%v.progress", cmdPrefix)
	if cmd.Flags().Changed(ProgressFlagName) {

		var ProgressFlagName string
		if cmdPrefix == "" {
			ProgressFlagName = "progress"
		} else {
			ProgressFlagName = fmt.Sprintf("%v.progress", cmdPrefix)
		}

		ProgressFlagValue, err := cmd.Flags().GetString(ProgressFlagName)
		if err != nil {
			return err, false
		}
		m.Progress = ProgressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildInfoProgressDetailFlags(depth int, m *models.BuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ProgressDetailFlagName := fmt.Sprintf("%v.progressDetail", cmdPrefix)
	if cmd.Flags().Changed(ProgressDetailFlagName) {
		// info: complex object progressDetail ProgressDetail is retrieved outside this Changed() block
	}
	ProgressDetailFlagValue := m.ProgressDetail
	if swag.IsZero(ProgressDetailFlagValue) {
		ProgressDetailFlagValue = &models.ProgressDetail{}
	}

	err, ProgressDetailAdded := retrieveModelProgressDetailFlags(depth+1, ProgressDetailFlagValue, ProgressDetailFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProgressDetailAdded
	if ProgressDetailAdded {
		m.ProgressDetail = ProgressDetailFlagValue
	}

	return nil, retAdded
}

func retrieveBuildInfoStatusFlags(depth int, m *models.BuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StatusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(StatusFlagName) {

		var StatusFlagName string
		if cmdPrefix == "" {
			StatusFlagName = "status"
		} else {
			StatusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		StatusFlagValue, err := cmd.Flags().GetString(StatusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = StatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildInfoStreamFlags(depth int, m *models.BuildInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StreamFlagName := fmt.Sprintf("%v.stream", cmdPrefix)
	if cmd.Flags().Changed(StreamFlagName) {

		var StreamFlagName string
		if cmdPrefix == "" {
			StreamFlagName = "stream"
		} else {
			StreamFlagName = fmt.Sprintf("%v.stream", cmdPrefix)
		}

		StreamFlagValue, err := cmd.Flags().GetString(StreamFlagName)
		if err != nil {
			return err, false
		}
		m.Stream = StreamFlagValue

		retAdded = true
	}

	return nil, retAdded
}
