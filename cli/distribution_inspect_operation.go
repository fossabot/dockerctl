// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/distribution"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDistributionDistributionInspectCmd returns a cmd to handle operation distributionInspect
func makeOperationDistributionDistributionInspectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "DistributionInspect",
		Short: `Return image digest and platform information by contacting the registry.`,
		RunE:  runOperationDistributionDistributionInspect,
	}

	if err := registerOperationDistributionDistributionInspectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDistributionDistributionInspect uses cmd flags to call endpoint api
func runOperationDistributionDistributionInspect(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := distribution.NewDistributionInspectParams()
	if err, _ := retrieveOperationDistributionDistributionInspectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDistributionDistributionInspectResult(appCli.Distribution.DistributionInspect(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDistributionDistributionInspectParamFlags registers all flags needed to fill params
func registerOperationDistributionDistributionInspectParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDistributionDistributionInspectNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDistributionDistributionInspectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	NameDescription := `Required. Image name or id`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "name"
	} else {
		NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func retrieveOperationDistributionDistributionInspectNameFlag(m *distribution.DistributionInspectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "name"
		} else {
			NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

	}
	return nil, retAdded
}

// parseOperationDistributionDistributionInspectResult parses request result and return the string content
func parseOperationDistributionDistributionInspectResult(resp0 *distribution.DistributionInspectOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*distribution.DistributionInspectOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*distribution.DistributionInspectUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*distribution.DistributionInspectInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelDistributionInspectDistributionInspectOKBodyDescriptorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDistributionInspectDistributionInspectOKBodyDescriptorDigest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectDistributionInspectOKBodyDescriptorMediaType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectDistributionInspectOKBodyDescriptorSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectDistributionInspectOKBodyDescriptorURLs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDistributionInspectDistributionInspectOKBodyDescriptorDigest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DigestDescription := ``

	var DigestFlagName string
	if cmdPrefix == "" {
		DigestFlagName = "Digest"
	} else {
		DigestFlagName = fmt.Sprintf("%v.Digest", cmdPrefix)
	}

	var DigestFlagDefault string

	_ = cmd.PersistentFlags().String(DigestFlagName, DigestFlagDefault, DigestDescription)

	return nil
}

func registerDistributionInspectDistributionInspectOKBodyDescriptorMediaType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MediaTypeDescription := ``

	var MediaTypeFlagName string
	if cmdPrefix == "" {
		MediaTypeFlagName = "MediaType"
	} else {
		MediaTypeFlagName = fmt.Sprintf("%v.MediaType", cmdPrefix)
	}

	var MediaTypeFlagDefault string

	_ = cmd.PersistentFlags().String(MediaTypeFlagName, MediaTypeFlagDefault, MediaTypeDescription)

	return nil
}

func registerDistributionInspectDistributionInspectOKBodyDescriptorSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeDescription := ``

	var SizeFlagName string
	if cmdPrefix == "" {
		SizeFlagName = "Size"
	} else {
		SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
	}

	var SizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SizeFlagName, SizeFlagDefault, SizeDescription)

	return nil
}

func registerDistributionInspectDistributionInspectOKBodyDescriptorURLs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: URLs []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDistributionInspectDistributionInspectOKBodyDescriptorFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DigestAdded := retrieveDistributionInspectDistributionInspectOKBodyDescriptorDigestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DigestAdded

	err, MediaTypeAdded := retrieveDistributionInspectDistributionInspectOKBodyDescriptorMediaTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MediaTypeAdded

	err, SizeAdded := retrieveDistributionInspectDistributionInspectOKBodyDescriptorSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	err, URLsAdded := retrieveDistributionInspectDistributionInspectOKBodyDescriptorURLsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || URLsAdded

	return nil, retAdded
}

func retrieveDistributionInspectDistributionInspectOKBodyDescriptorDigestFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DigestFlagName := fmt.Sprintf("%v.Digest", cmdPrefix)
	if cmd.Flags().Changed(DigestFlagName) {

		var DigestFlagName string
		if cmdPrefix == "" {
			DigestFlagName = "Digest"
		} else {
			DigestFlagName = fmt.Sprintf("%v.Digest", cmdPrefix)
		}

		DigestFlagValue, err := cmd.Flags().GetString(DigestFlagName)
		if err != nil {
			return err, false
		}
		m.Digest = DigestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectDistributionInspectOKBodyDescriptorMediaTypeFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MediaTypeFlagName := fmt.Sprintf("%v.MediaType", cmdPrefix)
	if cmd.Flags().Changed(MediaTypeFlagName) {

		var MediaTypeFlagName string
		if cmdPrefix == "" {
			MediaTypeFlagName = "MediaType"
		} else {
			MediaTypeFlagName = fmt.Sprintf("%v.MediaType", cmdPrefix)
		}

		MediaTypeFlagValue, err := cmd.Flags().GetString(MediaTypeFlagName)
		if err != nil {
			return err, false
		}
		m.MediaType = MediaTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectDistributionInspectOKBodyDescriptorSizeFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeFlagName := fmt.Sprintf("%v.Size", cmdPrefix)
	if cmd.Flags().Changed(SizeFlagName) {

		var SizeFlagName string
		if cmdPrefix == "" {
			SizeFlagName = "Size"
		} else {
			SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
		}

		SizeFlagValue, err := cmd.Flags().GetInt64(SizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = SizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectDistributionInspectOKBodyDescriptorURLsFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	URLsFlagName := fmt.Sprintf("%v.URLs", cmdPrefix)
	if cmd.Flags().Changed(URLsFlagName) {
		// warning: URLs array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// register flags to command
func registerModelDistributionInspectOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDistributionInspectOKBodyDescriptor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectOKBodyPlatforms(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDistributionInspectOKBodyDescriptor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var DescriptorFlagName string
	if cmdPrefix == "" {
		DescriptorFlagName = "Descriptor"
	} else {
		DescriptorFlagName = fmt.Sprintf("%v.Descriptor", cmdPrefix)
	}

	if err := registerModelDistributionInspectDistributionInspectOKBodyDescriptorFlags(depth+1, DescriptorFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDistributionInspectOKBodyPlatforms(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Platforms []*DistributionInspectPlatformsItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDistributionInspectOKBodyFlags(depth int, m *distribution.DistributionInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptorAdded := retrieveDistributionInspectOKBodyDescriptorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptorAdded

	err, PlatformsAdded := retrieveDistributionInspectOKBodyPlatformsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlatformsAdded

	return nil, retAdded
}

func retrieveDistributionInspectOKBodyDescriptorFlags(depth int, m *distribution.DistributionInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptorFlagName := fmt.Sprintf("%v.Descriptor", cmdPrefix)
	if cmd.Flags().Changed(DescriptorFlagName) {
		// info: complex object Descriptor DistributionInspectDistributionInspectOKBodyDescriptor is retrieved outside this Changed() block
	}
	DescriptorFlagValue := m.Descriptor
	if swag.IsZero(DescriptorFlagValue) {
		DescriptorFlagValue = &distribution.DistributionInspectDistributionInspectOKBodyDescriptor{}
	}

	err, DescriptorAdded := retrieveModelDistributionInspectDistributionInspectOKBodyDescriptorFlags(depth+1, DescriptorFlagValue, DescriptorFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptorAdded
	if DescriptorAdded {
		m.Descriptor = DescriptorFlagValue
	}

	return nil, retAdded
}

func retrieveDistributionInspectOKBodyPlatformsFlags(depth int, m *distribution.DistributionInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PlatformsFlagName := fmt.Sprintf("%v.Platforms", cmdPrefix)
	if cmd.Flags().Changed(PlatformsFlagName) {
		// warning: Platforms array type []*DistributionInspectPlatformsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// register flags to command
func registerModelDistributionInspectPlatformsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDistributionInspectPlatformsItems0Architecture(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0Features(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0OS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0OSFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0OSVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0Variant(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDistributionInspectPlatformsItems0Architecture(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ArchitectureDescription := ``

	var ArchitectureFlagName string
	if cmdPrefix == "" {
		ArchitectureFlagName = "Architecture"
	} else {
		ArchitectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
	}

	var ArchitectureFlagDefault string

	_ = cmd.PersistentFlags().String(ArchitectureFlagName, ArchitectureFlagDefault, ArchitectureDescription)

	return nil
}

func registerDistributionInspectPlatformsItems0Features(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Features []string array type is not supported by go-swagger cli yet

	return nil
}

func registerDistributionInspectPlatformsItems0OS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OSDescription := ``

	var OSFlagName string
	if cmdPrefix == "" {
		OSFlagName = "OS"
	} else {
		OSFlagName = fmt.Sprintf("%v.OS", cmdPrefix)
	}

	var OSFlagDefault string

	_ = cmd.PersistentFlags().String(OSFlagName, OSFlagDefault, OSDescription)

	return nil
}

func registerDistributionInspectPlatformsItems0OSFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: OSFeatures []string array type is not supported by go-swagger cli yet

	return nil
}

func registerDistributionInspectPlatformsItems0OSVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OSVersionDescription := ``

	var OSVersionFlagName string
	if cmdPrefix == "" {
		OSVersionFlagName = "OSVersion"
	} else {
		OSVersionFlagName = fmt.Sprintf("%v.OSVersion", cmdPrefix)
	}

	var OSVersionFlagDefault string

	_ = cmd.PersistentFlags().String(OSVersionFlagName, OSVersionFlagDefault, OSVersionDescription)

	return nil
}

func registerDistributionInspectPlatformsItems0Variant(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	VariantDescription := ``

	var VariantFlagName string
	if cmdPrefix == "" {
		VariantFlagName = "Variant"
	} else {
		VariantFlagName = fmt.Sprintf("%v.Variant", cmdPrefix)
	}

	var VariantFlagDefault string

	_ = cmd.PersistentFlags().String(VariantFlagName, VariantFlagDefault, VariantDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDistributionInspectPlatformsItems0Flags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ArchitectureAdded := retrieveDistributionInspectPlatformsItems0ArchitectureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArchitectureAdded

	err, FeaturesAdded := retrieveDistributionInspectPlatformsItems0FeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FeaturesAdded

	err, OSAdded := retrieveDistributionInspectPlatformsItems0OSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OSAdded

	err, OSFeaturesAdded := retrieveDistributionInspectPlatformsItems0OSFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OSFeaturesAdded

	err, OSVersionAdded := retrieveDistributionInspectPlatformsItems0OSVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OSVersionAdded

	err, VariantAdded := retrieveDistributionInspectPlatformsItems0VariantFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VariantAdded

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0ArchitectureFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ArchitectureFlagName := fmt.Sprintf("%v.Architecture", cmdPrefix)
	if cmd.Flags().Changed(ArchitectureFlagName) {

		var ArchitectureFlagName string
		if cmdPrefix == "" {
			ArchitectureFlagName = "Architecture"
		} else {
			ArchitectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
		}

		ArchitectureFlagValue, err := cmd.Flags().GetString(ArchitectureFlagName)
		if err != nil {
			return err, false
		}
		m.Architecture = ArchitectureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0FeaturesFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	FeaturesFlagName := fmt.Sprintf("%v.Features", cmdPrefix)
	if cmd.Flags().Changed(FeaturesFlagName) {
		// warning: Features array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0OSFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OSFlagName := fmt.Sprintf("%v.OS", cmdPrefix)
	if cmd.Flags().Changed(OSFlagName) {

		var OSFlagName string
		if cmdPrefix == "" {
			OSFlagName = "OS"
		} else {
			OSFlagName = fmt.Sprintf("%v.OS", cmdPrefix)
		}

		OSFlagValue, err := cmd.Flags().GetString(OSFlagName)
		if err != nil {
			return err, false
		}
		m.OS = OSFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0OSFeaturesFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OSFeaturesFlagName := fmt.Sprintf("%v.OSFeatures", cmdPrefix)
	if cmd.Flags().Changed(OSFeaturesFlagName) {
		// warning: OSFeatures array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0OSVersionFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OSVersionFlagName := fmt.Sprintf("%v.OSVersion", cmdPrefix)
	if cmd.Flags().Changed(OSVersionFlagName) {

		var OSVersionFlagName string
		if cmdPrefix == "" {
			OSVersionFlagName = "OSVersion"
		} else {
			OSVersionFlagName = fmt.Sprintf("%v.OSVersion", cmdPrefix)
		}

		OSVersionFlagValue, err := cmd.Flags().GetString(OSVersionFlagName)
		if err != nil {
			return err, false
		}
		m.OSVersion = OSVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0VariantFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VariantFlagName := fmt.Sprintf("%v.Variant", cmdPrefix)
	if cmd.Flags().Changed(VariantFlagName) {

		var VariantFlagName string
		if cmdPrefix == "" {
			VariantFlagName = "Variant"
		} else {
			VariantFlagName = fmt.Sprintf("%v.Variant", cmdPrefix)
		}

		VariantFlagValue, err := cmd.Flags().GetString(VariantFlagName)
		if err != nil {
			return err, false
		}
		m.Variant = VariantFlagValue

		retAdded = true
	}

	return nil, retAdded
}
