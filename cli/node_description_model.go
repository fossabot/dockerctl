// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for NodeDescription

// register flags to command
func registerModelNodeDescriptionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNodeDescriptionEngine(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescriptionHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescriptionPlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescriptionResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescriptionTLSInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeDescriptionEngine(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var EngineFlagName string
	if cmdPrefix == "" {
		EngineFlagName = "Engine"
	} else {
		EngineFlagName = fmt.Sprintf("%v.Engine", cmdPrefix)
	}

	if err := registerModelEngineDescriptionFlags(depth+1, EngineFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeDescriptionHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HostnameDescription := ``

	var HostnameFlagName string
	if cmdPrefix == "" {
		HostnameFlagName = "Hostname"
	} else {
		HostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
	}

	var HostnameFlagDefault string

	_ = cmd.PersistentFlags().String(HostnameFlagName, HostnameFlagDefault, HostnameDescription)

	return nil
}

func registerNodeDescriptionPlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var PlatformFlagName string
	if cmdPrefix == "" {
		PlatformFlagName = "Platform"
	} else {
		PlatformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
	}

	if err := registerModelPlatformFlags(depth+1, PlatformFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeDescriptionResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ResourcesFlagName string
	if cmdPrefix == "" {
		ResourcesFlagName = "Resources"
	} else {
		ResourcesFlagName = fmt.Sprintf("%v.Resources", cmdPrefix)
	}

	if err := registerModelResourceObjectFlags(depth+1, ResourcesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeDescriptionTLSInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var TLSInfoFlagName string
	if cmdPrefix == "" {
		TLSInfoFlagName = "TLSInfo"
	} else {
		TLSInfoFlagName = fmt.Sprintf("%v.TLSInfo", cmdPrefix)
	}

	if err := registerModelTLSInfoFlags(depth+1, TLSInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNodeDescriptionFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EngineAdded := retrieveNodeDescriptionEngineFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EngineAdded

	err, HostnameAdded := retrieveNodeDescriptionHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostnameAdded

	err, PlatformAdded := retrieveNodeDescriptionPlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlatformAdded

	err, ResourcesAdded := retrieveNodeDescriptionResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ResourcesAdded

	err, TLSInfoAdded := retrieveNodeDescriptionTLSInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TLSInfoAdded

	return nil, retAdded
}

func retrieveNodeDescriptionEngineFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EngineFlagName := fmt.Sprintf("%v.Engine", cmdPrefix)
	if cmd.Flags().Changed(EngineFlagName) {
		// info: complex object Engine EngineDescription is retrieved outside this Changed() block
	}
	EngineFlagValue := m.Engine
	if swag.IsZero(EngineFlagValue) {
		EngineFlagValue = &models.EngineDescription{}
	}

	err, EngineAdded := retrieveModelEngineDescriptionFlags(depth+1, EngineFlagValue, EngineFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EngineAdded
	if EngineAdded {
		m.Engine = EngineFlagValue
	}

	return nil, retAdded
}

func retrieveNodeDescriptionHostnameFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostnameFlagName := fmt.Sprintf("%v.Hostname", cmdPrefix)
	if cmd.Flags().Changed(HostnameFlagName) {

		var HostnameFlagName string
		if cmdPrefix == "" {
			HostnameFlagName = "Hostname"
		} else {
			HostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
		}

		HostnameFlagValue, err := cmd.Flags().GetString(HostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = HostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeDescriptionPlatformFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PlatformFlagName := fmt.Sprintf("%v.Platform", cmdPrefix)
	if cmd.Flags().Changed(PlatformFlagName) {
		// info: complex object Platform Platform is retrieved outside this Changed() block
	}
	PlatformFlagValue := m.Platform
	if swag.IsZero(PlatformFlagValue) {
		PlatformFlagValue = &models.Platform{}
	}

	err, PlatformAdded := retrieveModelPlatformFlags(depth+1, PlatformFlagValue, PlatformFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlatformAdded
	if PlatformAdded {
		m.Platform = PlatformFlagValue
	}

	return nil, retAdded
}

func retrieveNodeDescriptionResourcesFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ResourcesFlagName := fmt.Sprintf("%v.Resources", cmdPrefix)
	if cmd.Flags().Changed(ResourcesFlagName) {
		// info: complex object Resources ResourceObject is retrieved outside this Changed() block
	}
	ResourcesFlagValue := m.Resources
	if swag.IsZero(ResourcesFlagValue) {
		ResourcesFlagValue = &models.ResourceObject{}
	}

	err, ResourcesAdded := retrieveModelResourceObjectFlags(depth+1, ResourcesFlagValue, ResourcesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ResourcesAdded
	if ResourcesAdded {
		m.Resources = ResourcesFlagValue
	}

	return nil, retAdded
}

func retrieveNodeDescriptionTLSInfoFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TLSInfoFlagName := fmt.Sprintf("%v.TLSInfo", cmdPrefix)
	if cmd.Flags().Changed(TLSInfoFlagName) {
		// info: complex object TLSInfo TLSInfo is retrieved outside this Changed() block
	}
	TLSInfoFlagValue := m.TLSInfo
	if swag.IsZero(TLSInfoFlagValue) {
		TLSInfoFlagValue = &models.TLSInfo{}
	}

	err, TLSInfoAdded := retrieveModelTLSInfoFlags(depth+1, TLSInfoFlagValue, TLSInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TLSInfoAdded
	if TLSInfoAdded {
		m.TLSInfo = TLSInfoFlagValue
	}

	return nil, retAdded
}
