// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/image"
	"github.com/go-swagger/dockerctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationImageImageCommitCmd returns a cmd to handle operation imageCommit
func makeOperationImageImageCommitCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ImageCommit",
		Short: ``,
		RunE:  runOperationImageImageCommit,
	}

	if err := registerOperationImageImageCommitParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationImageImageCommit uses cmd flags to call endpoint api
func runOperationImageImageCommit(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := image.NewImageCommitParams()
	if err, _ := retrieveOperationImageImageCommitAuthorFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCommitChangesFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCommitCommentFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCommitContainerFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCommitContainerConfigFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCommitPauseFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCommitRepoFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageCommitTagFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationImageImageCommitResult(appCli.Image.ImageCommit(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationImageImageCommitParamFlags registers all flags needed to fill params
func registerOperationImageImageCommitParamFlags(cmd *cobra.Command) error {
	if err := registerOperationImageImageCommitAuthorParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCommitChangesParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCommitCommentParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCommitContainerParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCommitContainerConfigParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCommitPauseParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCommitRepoParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageCommitTagParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationImageImageCommitAuthorParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	AuthorDescription := `Author of the image (e.g., ` + "`" + `John Hannibal Smith <hannibal@a-team.com>` + "`" + `)`

	var AuthorFlagName string
	if cmdPrefix == "" {
		AuthorFlagName = "author"
	} else {
		AuthorFlagName = fmt.Sprintf("%v.author", cmdPrefix)
	}

	var AuthorFlagDefault string

	_ = cmd.PersistentFlags().String(AuthorFlagName, AuthorFlagDefault, AuthorDescription)

	return nil
}
func registerOperationImageImageCommitChangesParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	ChangesDescription := `` + "`" + `Dockerfile` + "`" + ` instructions to apply while committing`

	var ChangesFlagName string
	if cmdPrefix == "" {
		ChangesFlagName = "changes"
	} else {
		ChangesFlagName = fmt.Sprintf("%v.changes", cmdPrefix)
	}

	var ChangesFlagDefault string

	_ = cmd.PersistentFlags().String(ChangesFlagName, ChangesFlagDefault, ChangesDescription)

	return nil
}
func registerOperationImageImageCommitCommentParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	CommentDescription := `Commit message`

	var CommentFlagName string
	if cmdPrefix == "" {
		CommentFlagName = "comment"
	} else {
		CommentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
	}

	var CommentFlagDefault string

	_ = cmd.PersistentFlags().String(CommentFlagName, CommentFlagDefault, CommentDescription)

	return nil
}
func registerOperationImageImageCommitContainerParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	ContainerDescription := `The ID or name of the container to commit`

	var ContainerFlagName string
	if cmdPrefix == "" {
		ContainerFlagName = "container"
	} else {
		ContainerFlagName = fmt.Sprintf("%v.container", cmdPrefix)
	}

	var ContainerFlagDefault string

	_ = cmd.PersistentFlags().String(ContainerFlagName, ContainerFlagDefault, ContainerDescription)

	return nil
}
func registerOperationImageImageCommitContainerConfigParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var ContainerConfigFlagName string
	if cmdPrefix == "" {
		ContainerConfigFlagName = "containerConfig"
	} else {
		ContainerConfigFlagName = fmt.Sprintf("%v.containerConfig", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(ContainerConfigFlagName, "", "Optional json string for [containerConfig]. The container configuration")

	// add flags for body
	if err := registerModelContainerConfigFlags(0, "containerConfig", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationImageImageCommitPauseParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	PauseDescription := `Whether to pause the container before committing`

	var PauseFlagName string
	if cmdPrefix == "" {
		PauseFlagName = "pause"
	} else {
		PauseFlagName = fmt.Sprintf("%v.pause", cmdPrefix)
	}

	var PauseFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(PauseFlagName, PauseFlagDefault, PauseDescription)

	return nil
}
func registerOperationImageImageCommitRepoParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	RepoDescription := `Repository name for the created image`

	var RepoFlagName string
	if cmdPrefix == "" {
		RepoFlagName = "repo"
	} else {
		RepoFlagName = fmt.Sprintf("%v.repo", cmdPrefix)
	}

	var RepoFlagDefault string

	_ = cmd.PersistentFlags().String(RepoFlagName, RepoFlagDefault, RepoDescription)

	return nil
}
func registerOperationImageImageCommitTagParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	TagDescription := `Tag name for the create image`

	var TagFlagName string
	if cmdPrefix == "" {
		TagFlagName = "tag"
	} else {
		TagFlagName = fmt.Sprintf("%v.tag", cmdPrefix)
	}

	var TagFlagDefault string

	_ = cmd.PersistentFlags().String(TagFlagName, TagFlagDefault, TagDescription)

	return nil
}

func retrieveOperationImageImageCommitAuthorFlag(m *image.ImageCommitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("author") {

		var AuthorFlagName string
		if cmdPrefix == "" {
			AuthorFlagName = "author"
		} else {
			AuthorFlagName = fmt.Sprintf("%v.author", cmdPrefix)
		}

		AuthorFlagValue, err := cmd.Flags().GetString(AuthorFlagName)
		if err != nil {
			return err, false
		}
		m.Author = &AuthorFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCommitChangesFlag(m *image.ImageCommitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("changes") {

		var ChangesFlagName string
		if cmdPrefix == "" {
			ChangesFlagName = "changes"
		} else {
			ChangesFlagName = fmt.Sprintf("%v.changes", cmdPrefix)
		}

		ChangesFlagValue, err := cmd.Flags().GetString(ChangesFlagName)
		if err != nil {
			return err, false
		}
		m.Changes = &ChangesFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCommitCommentFlag(m *image.ImageCommitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("comment") {

		var CommentFlagName string
		if cmdPrefix == "" {
			CommentFlagName = "comment"
		} else {
			CommentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
		}

		CommentFlagValue, err := cmd.Flags().GetString(CommentFlagName)
		if err != nil {
			return err, false
		}
		m.Comment = &CommentFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCommitContainerFlag(m *image.ImageCommitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("container") {

		var ContainerFlagName string
		if cmdPrefix == "" {
			ContainerFlagName = "container"
		} else {
			ContainerFlagName = fmt.Sprintf("%v.container", cmdPrefix)
		}

		ContainerFlagValue, err := cmd.Flags().GetString(ContainerFlagName)
		if err != nil {
			return err, false
		}
		m.Container = &ContainerFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCommitContainerConfigFlag(m *image.ImageCommitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("containerConfig") {
		// Read containerConfig string from cmd and unmarshal
		containerConfigValueStr, err := cmd.Flags().GetString("containerConfig")
		if err != nil {
			return err, false
		}

		containerConfigValue := models.ContainerConfig{}
		if err := json.Unmarshal([]byte(containerConfigValueStr), &containerConfigValue); err != nil {
			return fmt.Errorf("cannot unmarshal containerConfig string in models.ContainerConfig: %v", err), false
		}
		m.ContainerConfig = &containerConfigValue
	}
	containerConfigValueModel := m.ContainerConfig
	if swag.IsZero(containerConfigValueModel) {
		containerConfigValueModel = &models.ContainerConfig{}
	}
	err, added := retrieveModelContainerConfigFlags(0, containerConfigValueModel, "containerConfig", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.ContainerConfig = containerConfigValueModel
	}
	if dryRun && debug {

		containerConfigValueDebugBytes, err := json.Marshal(m.ContainerConfig)
		if err != nil {
			return err, false
		}
		logDebugf("ContainerConfig dry-run payload: %v", string(containerConfigValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationImageImageCommitPauseFlag(m *image.ImageCommitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("pause") {

		var PauseFlagName string
		if cmdPrefix == "" {
			PauseFlagName = "pause"
		} else {
			PauseFlagName = fmt.Sprintf("%v.pause", cmdPrefix)
		}

		PauseFlagValue, err := cmd.Flags().GetBool(PauseFlagName)
		if err != nil {
			return err, false
		}
		m.Pause = &PauseFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCommitRepoFlag(m *image.ImageCommitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repo") {

		var RepoFlagName string
		if cmdPrefix == "" {
			RepoFlagName = "repo"
		} else {
			RepoFlagName = fmt.Sprintf("%v.repo", cmdPrefix)
		}

		RepoFlagValue, err := cmd.Flags().GetString(RepoFlagName)
		if err != nil {
			return err, false
		}
		m.Repo = &RepoFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageCommitTagFlag(m *image.ImageCommitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tag") {

		var TagFlagName string
		if cmdPrefix == "" {
			TagFlagName = "tag"
		} else {
			TagFlagName = fmt.Sprintf("%v.tag", cmdPrefix)
		}

		TagFlagValue, err := cmd.Flags().GetString(TagFlagName)
		if err != nil {
			return err, false
		}
		m.Tag = &TagFlagValue

	}
	return nil, retAdded
}

// parseOperationImageImageCommitResult parses request result and return the string content
func parseOperationImageImageCommitResult(resp0 *image.ImageCommitCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*image.ImageCommitCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*image.ImageCommitNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*image.ImageCommitInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
