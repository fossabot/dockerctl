// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for EndpointSettings

// register flags to command
func registerModelEndpointSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointSettingsAliases(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsDriverOpts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsGlobalIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsGlobalIPV6PrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsIPAMConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsIPAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsIPPrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsIPV6Gateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsLinks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsMacAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSettingsNetworkID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointSettingsAliases(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Aliases []string array type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointSettingsDriverOpts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: DriverOpts map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointSettingsEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	EndpointIDDescription := `Unique ID for the service endpoint in a Sandbox.
`

	var EndpointIDFlagName string
	if cmdPrefix == "" {
		EndpointIDFlagName = "EndpointID"
	} else {
		EndpointIDFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
	}

	var EndpointIDFlagDefault string

	_ = cmd.PersistentFlags().String(EndpointIDFlagName, EndpointIDFlagDefault, EndpointIDDescription)

	return nil
}

func registerEndpointSettingsGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GatewayDescription := `Gateway address for this network.
`

	var GatewayFlagName string
	if cmdPrefix == "" {
		GatewayFlagName = "Gateway"
	} else {
		GatewayFlagName = fmt.Sprintf("%v.Gateway", cmdPrefix)
	}

	var GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(GatewayFlagName, GatewayFlagDefault, GatewayDescription)

	return nil
}

func registerEndpointSettingsGlobalIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GlobalIPV6AddressDescription := `Global IPv6 address.
`

	var GlobalIPV6AddressFlagName string
	if cmdPrefix == "" {
		GlobalIPV6AddressFlagName = "GlobalIPv6Address"
	} else {
		GlobalIPV6AddressFlagName = fmt.Sprintf("%v.GlobalIPv6Address", cmdPrefix)
	}

	var GlobalIPV6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(GlobalIPV6AddressFlagName, GlobalIPV6AddressFlagDefault, GlobalIPV6AddressDescription)

	return nil
}

func registerEndpointSettingsGlobalIPV6PrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GlobalIPV6PrefixLenDescription := `Mask length of the global IPv6 address.
`

	var GlobalIPV6PrefixLenFlagName string
	if cmdPrefix == "" {
		GlobalIPV6PrefixLenFlagName = "GlobalIPv6PrefixLen"
	} else {
		GlobalIPV6PrefixLenFlagName = fmt.Sprintf("%v.GlobalIPv6PrefixLen", cmdPrefix)
	}

	var GlobalIPV6PrefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(GlobalIPV6PrefixLenFlagName, GlobalIPV6PrefixLenFlagDefault, GlobalIPV6PrefixLenDescription)

	return nil
}

func registerEndpointSettingsIPAMConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var IPAMConfigFlagName string
	if cmdPrefix == "" {
		IPAMConfigFlagName = "IPAMConfig"
	} else {
		IPAMConfigFlagName = fmt.Sprintf("%v.IPAMConfig", cmdPrefix)
	}

	if err := registerModelEndpointIPAMConfigFlags(depth+1, IPAMConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointSettingsIPAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPAddressDescription := `IPv4 address.
`

	var IPAddressFlagName string
	if cmdPrefix == "" {
		IPAddressFlagName = "IPAddress"
	} else {
		IPAddressFlagName = fmt.Sprintf("%v.IPAddress", cmdPrefix)
	}

	var IPAddressFlagDefault string

	_ = cmd.PersistentFlags().String(IPAddressFlagName, IPAddressFlagDefault, IPAddressDescription)

	return nil
}

func registerEndpointSettingsIPPrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPPrefixLenDescription := `Mask length of the IPv4 address.
`

	var IPPrefixLenFlagName string
	if cmdPrefix == "" {
		IPPrefixLenFlagName = "IPPrefixLen"
	} else {
		IPPrefixLenFlagName = fmt.Sprintf("%v.IPPrefixLen", cmdPrefix)
	}

	var IPPrefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(IPPrefixLenFlagName, IPPrefixLenFlagDefault, IPPrefixLenDescription)

	return nil
}

func registerEndpointSettingsIPV6Gateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPV6GatewayDescription := `IPv6 gateway address.
`

	var IPV6GatewayFlagName string
	if cmdPrefix == "" {
		IPV6GatewayFlagName = "IPv6Gateway"
	} else {
		IPV6GatewayFlagName = fmt.Sprintf("%v.IPv6Gateway", cmdPrefix)
	}

	var IPV6GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(IPV6GatewayFlagName, IPV6GatewayFlagDefault, IPV6GatewayDescription)

	return nil
}

func registerEndpointSettingsLinks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Links []string array type is not supported by go-swagger cli yet

	return nil
}

func registerEndpointSettingsMacAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MacAddressDescription := `MAC address for the endpoint on this network.
`

	var MacAddressFlagName string
	if cmdPrefix == "" {
		MacAddressFlagName = "MacAddress"
	} else {
		MacAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
	}

	var MacAddressFlagDefault string

	_ = cmd.PersistentFlags().String(MacAddressFlagName, MacAddressFlagDefault, MacAddressDescription)

	return nil
}

func registerEndpointSettingsNetworkID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NetworkIDDescription := `Unique ID of the network.
`

	var NetworkIDFlagName string
	if cmdPrefix == "" {
		NetworkIDFlagName = "NetworkID"
	} else {
		NetworkIDFlagName = fmt.Sprintf("%v.NetworkID", cmdPrefix)
	}

	var NetworkIDFlagDefault string

	_ = cmd.PersistentFlags().String(NetworkIDFlagName, NetworkIDFlagDefault, NetworkIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointSettingsFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AliasesAdded := retrieveEndpointSettingsAliasesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AliasesAdded

	err, DriverOptsAdded := retrieveEndpointSettingsDriverOptsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverOptsAdded

	err, EndpointIDAdded := retrieveEndpointSettingsEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EndpointIDAdded

	err, GatewayAdded := retrieveEndpointSettingsGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GatewayAdded

	err, GlobalIPV6AddressAdded := retrieveEndpointSettingsGlobalIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GlobalIPV6AddressAdded

	err, GlobalIPV6PrefixLenAdded := retrieveEndpointSettingsGlobalIPV6PrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GlobalIPV6PrefixLenAdded

	err, IPAMConfigAdded := retrieveEndpointSettingsIPAMConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAMConfigAdded

	err, IPAddressAdded := retrieveEndpointSettingsIPAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAddressAdded

	err, IPPrefixLenAdded := retrieveEndpointSettingsIPPrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPPrefixLenAdded

	err, IPV6GatewayAdded := retrieveEndpointSettingsIPV6GatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPV6GatewayAdded

	err, LinksAdded := retrieveEndpointSettingsLinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, MacAddressAdded := retrieveEndpointSettingsMacAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MacAddressAdded

	err, NetworkIDAdded := retrieveEndpointSettingsNetworkIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkIDAdded

	return nil, retAdded
}

func retrieveEndpointSettingsAliasesFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AliasesFlagName := fmt.Sprintf("%v.Aliases", cmdPrefix)
	if cmd.Flags().Changed(AliasesFlagName) {
		// warning: Aliases array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointSettingsDriverOptsFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DriverOptsFlagName := fmt.Sprintf("%v.DriverOpts", cmdPrefix)
	if cmd.Flags().Changed(DriverOptsFlagName) {
		// warning: DriverOpts map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointSettingsEndpointIDFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EndpointIDFlagName := fmt.Sprintf("%v.EndpointID", cmdPrefix)
	if cmd.Flags().Changed(EndpointIDFlagName) {

		var EndpointIDFlagName string
		if cmdPrefix == "" {
			EndpointIDFlagName = "EndpointID"
		} else {
			EndpointIDFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
		}

		EndpointIDFlagValue, err := cmd.Flags().GetString(EndpointIDFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = EndpointIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointSettingsGatewayFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GatewayFlagName := fmt.Sprintf("%v.Gateway", cmdPrefix)
	if cmd.Flags().Changed(GatewayFlagName) {

		var GatewayFlagName string
		if cmdPrefix == "" {
			GatewayFlagName = "Gateway"
		} else {
			GatewayFlagName = fmt.Sprintf("%v.Gateway", cmdPrefix)
		}

		GatewayFlagValue, err := cmd.Flags().GetString(GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = GatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointSettingsGlobalIPV6AddressFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GlobalIPV6AddressFlagName := fmt.Sprintf("%v.GlobalIPv6Address", cmdPrefix)
	if cmd.Flags().Changed(GlobalIPV6AddressFlagName) {

		var GlobalIPV6AddressFlagName string
		if cmdPrefix == "" {
			GlobalIPV6AddressFlagName = "GlobalIPv6Address"
		} else {
			GlobalIPV6AddressFlagName = fmt.Sprintf("%v.GlobalIPv6Address", cmdPrefix)
		}

		GlobalIPV6AddressFlagValue, err := cmd.Flags().GetString(GlobalIPV6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.GlobalIPV6Address = GlobalIPV6AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointSettingsGlobalIPV6PrefixLenFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GlobalIPV6PrefixLenFlagName := fmt.Sprintf("%v.GlobalIPv6PrefixLen", cmdPrefix)
	if cmd.Flags().Changed(GlobalIPV6PrefixLenFlagName) {

		var GlobalIPV6PrefixLenFlagName string
		if cmdPrefix == "" {
			GlobalIPV6PrefixLenFlagName = "GlobalIPv6PrefixLen"
		} else {
			GlobalIPV6PrefixLenFlagName = fmt.Sprintf("%v.GlobalIPv6PrefixLen", cmdPrefix)
		}

		GlobalIPV6PrefixLenFlagValue, err := cmd.Flags().GetInt64(GlobalIPV6PrefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.GlobalIPV6PrefixLen = GlobalIPV6PrefixLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointSettingsIPAMConfigFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPAMConfigFlagName := fmt.Sprintf("%v.IPAMConfig", cmdPrefix)
	if cmd.Flags().Changed(IPAMConfigFlagName) {
		// info: complex object IPAMConfig EndpointIPAMConfig is retrieved outside this Changed() block
	}
	IPAMConfigFlagValue := m.IPAMConfig
	if swag.IsZero(IPAMConfigFlagValue) {
		IPAMConfigFlagValue = &models.EndpointIPAMConfig{}
	}

	err, IPAMConfigAdded := retrieveModelEndpointIPAMConfigFlags(depth+1, IPAMConfigFlagValue, IPAMConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAMConfigAdded
	if IPAMConfigAdded {
		m.IPAMConfig = IPAMConfigFlagValue
	}

	return nil, retAdded
}

func retrieveEndpointSettingsIPAddressFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPAddressFlagName := fmt.Sprintf("%v.IPAddress", cmdPrefix)
	if cmd.Flags().Changed(IPAddressFlagName) {

		var IPAddressFlagName string
		if cmdPrefix == "" {
			IPAddressFlagName = "IPAddress"
		} else {
			IPAddressFlagName = fmt.Sprintf("%v.IPAddress", cmdPrefix)
		}

		IPAddressFlagValue, err := cmd.Flags().GetString(IPAddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPAddress = IPAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointSettingsIPPrefixLenFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPPrefixLenFlagName := fmt.Sprintf("%v.IPPrefixLen", cmdPrefix)
	if cmd.Flags().Changed(IPPrefixLenFlagName) {

		var IPPrefixLenFlagName string
		if cmdPrefix == "" {
			IPPrefixLenFlagName = "IPPrefixLen"
		} else {
			IPPrefixLenFlagName = fmt.Sprintf("%v.IPPrefixLen", cmdPrefix)
		}

		IPPrefixLenFlagValue, err := cmd.Flags().GetInt64(IPPrefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.IPPrefixLen = IPPrefixLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointSettingsIPV6GatewayFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPV6GatewayFlagName := fmt.Sprintf("%v.IPv6Gateway", cmdPrefix)
	if cmd.Flags().Changed(IPV6GatewayFlagName) {

		var IPV6GatewayFlagName string
		if cmdPrefix == "" {
			IPV6GatewayFlagName = "IPv6Gateway"
		} else {
			IPV6GatewayFlagName = fmt.Sprintf("%v.IPv6Gateway", cmdPrefix)
		}

		IPV6GatewayFlagValue, err := cmd.Flags().GetString(IPV6GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Gateway = IPV6GatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointSettingsLinksFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LinksFlagName := fmt.Sprintf("%v.Links", cmdPrefix)
	if cmd.Flags().Changed(LinksFlagName) {
		// warning: Links array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEndpointSettingsMacAddressFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MacAddressFlagName := fmt.Sprintf("%v.MacAddress", cmdPrefix)
	if cmd.Flags().Changed(MacAddressFlagName) {

		var MacAddressFlagName string
		if cmdPrefix == "" {
			MacAddressFlagName = "MacAddress"
		} else {
			MacAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
		}

		MacAddressFlagValue, err := cmd.Flags().GetString(MacAddressFlagName)
		if err != nil {
			return err, false
		}
		m.MacAddress = MacAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointSettingsNetworkIDFlags(depth int, m *models.EndpointSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworkIDFlagName := fmt.Sprintf("%v.NetworkID", cmdPrefix)
	if cmd.Flags().Changed(NetworkIDFlagName) {

		var NetworkIDFlagName string
		if cmdPrefix == "" {
			NetworkIDFlagName = "NetworkID"
		} else {
			NetworkIDFlagName = fmt.Sprintf("%v.NetworkID", cmdPrefix)
		}

		NetworkIDFlagValue, err := cmd.Flags().GetString(NetworkIDFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkID = NetworkIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}
