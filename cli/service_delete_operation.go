// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/service"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationServiceServiceDeleteCmd returns a cmd to handle operation serviceDelete
func makeOperationServiceServiceDeleteCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ServiceDelete",
		Short: ``,
		RunE:  runOperationServiceServiceDelete,
	}

	if err := registerOperationServiceServiceDeleteParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationServiceServiceDelete uses cmd flags to call endpoint api
func runOperationServiceServiceDelete(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := service.NewServiceDeleteParams()
	if err, _ := retrieveOperationServiceServiceDeleteIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationServiceServiceDeleteResult(appCli.Service.ServiceDelete(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationServiceServiceDeleteParamFlags registers all flags needed to fill params
func registerOperationServiceServiceDeleteParamFlags(cmd *cobra.Command) error {
	if err := registerOperationServiceServiceDeleteIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationServiceServiceDeleteIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	IDDescription := `Required. ID or name of service.`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func retrieveOperationServiceServiceDeleteIDFlag(m *service.ServiceDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

	}
	return nil, retAdded
}

// parseOperationServiceServiceDeleteResult parses request result and return the string content
func parseOperationServiceServiceDeleteResult(resp0 *service.ServiceDeleteOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning serviceDeleteOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*service.ServiceDeleteNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*service.ServiceDeleteInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*service.ServiceDeleteServiceUnavailable)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response serviceDeleteOK is not supported by go-swagger cli yet.

	return "", nil
}
