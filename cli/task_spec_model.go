// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for TaskSpec

// register flags to command
func registerModelTaskSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecForceUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecLogDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecNetworkAttachmentSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecNetworks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPlacement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPluginSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecRestartPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecRuntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ContainerSpecFlagName string
	if cmdPrefix == "" {
		ContainerSpecFlagName = "ContainerSpec"
	} else {
		ContainerSpecFlagName = fmt.Sprintf("%v.ContainerSpec", cmdPrefix)
	}

	if err := registerModelTaskSpecContainerSpecFlags(depth+1, ContainerSpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecForceUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ForceUpdateDescription := `A counter that triggers an update even if no relevant parameters have been changed.`

	var ForceUpdateFlagName string
	if cmdPrefix == "" {
		ForceUpdateFlagName = "ForceUpdate"
	} else {
		ForceUpdateFlagName = fmt.Sprintf("%v.ForceUpdate", cmdPrefix)
	}

	var ForceUpdateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ForceUpdateFlagName, ForceUpdateFlagDefault, ForceUpdateDescription)

	return nil
}

func registerTaskSpecLogDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var LogDriverFlagName string
	if cmdPrefix == "" {
		LogDriverFlagName = "LogDriver"
	} else {
		LogDriverFlagName = fmt.Sprintf("%v.LogDriver", cmdPrefix)
	}

	if err := registerModelTaskSpecLogDriverFlags(depth+1, LogDriverFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecNetworkAttachmentSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var NetworkAttachmentSpecFlagName string
	if cmdPrefix == "" {
		NetworkAttachmentSpecFlagName = "NetworkAttachmentSpec"
	} else {
		NetworkAttachmentSpecFlagName = fmt.Sprintf("%v.NetworkAttachmentSpec", cmdPrefix)
	}

	if err := registerModelTaskSpecNetworkAttachmentSpecFlags(depth+1, NetworkAttachmentSpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecNetworks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Networks []*NetworkAttachmentConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecPlacement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var PlacementFlagName string
	if cmdPrefix == "" {
		PlacementFlagName = "Placement"
	} else {
		PlacementFlagName = fmt.Sprintf("%v.Placement", cmdPrefix)
	}

	if err := registerModelTaskSpecPlacementFlags(depth+1, PlacementFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecPluginSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var PluginSpecFlagName string
	if cmdPrefix == "" {
		PluginSpecFlagName = "PluginSpec"
	} else {
		PluginSpecFlagName = fmt.Sprintf("%v.PluginSpec", cmdPrefix)
	}

	if err := registerModelTaskSpecPluginSpecFlags(depth+1, PluginSpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ResourcesFlagName string
	if cmdPrefix == "" {
		ResourcesFlagName = "Resources"
	} else {
		ResourcesFlagName = fmt.Sprintf("%v.Resources", cmdPrefix)
	}

	if err := registerModelTaskSpecResourcesFlags(depth+1, ResourcesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecRestartPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var RestartPolicyFlagName string
	if cmdPrefix == "" {
		RestartPolicyFlagName = "RestartPolicy"
	} else {
		RestartPolicyFlagName = fmt.Sprintf("%v.RestartPolicy", cmdPrefix)
	}

	if err := registerModelTaskSpecRestartPolicyFlags(depth+1, RestartPolicyFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecRuntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RuntimeDescription := `Runtime is the type of runtime specified for the task executor.`

	var RuntimeFlagName string
	if cmdPrefix == "" {
		RuntimeFlagName = "Runtime"
	} else {
		RuntimeFlagName = fmt.Sprintf("%v.Runtime", cmdPrefix)
	}

	var RuntimeFlagDefault string

	_ = cmd.PersistentFlags().String(RuntimeFlagName, RuntimeFlagDefault, RuntimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ContainerSpecAdded := retrieveTaskSpecContainerSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainerSpecAdded

	err, ForceUpdateAdded := retrieveTaskSpecForceUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ForceUpdateAdded

	err, LogDriverAdded := retrieveTaskSpecLogDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogDriverAdded

	err, NetworkAttachmentSpecAdded := retrieveTaskSpecNetworkAttachmentSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkAttachmentSpecAdded

	err, NetworksAdded := retrieveTaskSpecNetworksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworksAdded

	err, PlacementAdded := retrieveTaskSpecPlacementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlacementAdded

	err, PluginSpecAdded := retrieveTaskSpecPluginSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PluginSpecAdded

	err, ResourcesAdded := retrieveTaskSpecResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ResourcesAdded

	err, RestartPolicyAdded := retrieveTaskSpecRestartPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RestartPolicyAdded

	err, RuntimeAdded := retrieveTaskSpecRuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RuntimeAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ContainerSpecFlagName := fmt.Sprintf("%v.ContainerSpec", cmdPrefix)
	if cmd.Flags().Changed(ContainerSpecFlagName) {
		// info: complex object ContainerSpec TaskSpecContainerSpec is retrieved outside this Changed() block
	}
	ContainerSpecFlagValue := m.ContainerSpec
	if swag.IsZero(ContainerSpecFlagValue) {
		ContainerSpecFlagValue = &models.TaskSpecContainerSpec{}
	}

	err, ContainerSpecAdded := retrieveModelTaskSpecContainerSpecFlags(depth+1, ContainerSpecFlagValue, ContainerSpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainerSpecAdded
	if ContainerSpecAdded {
		m.ContainerSpec = ContainerSpecFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecForceUpdateFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ForceUpdateFlagName := fmt.Sprintf("%v.ForceUpdate", cmdPrefix)
	if cmd.Flags().Changed(ForceUpdateFlagName) {

		var ForceUpdateFlagName string
		if cmdPrefix == "" {
			ForceUpdateFlagName = "ForceUpdate"
		} else {
			ForceUpdateFlagName = fmt.Sprintf("%v.ForceUpdate", cmdPrefix)
		}

		ForceUpdateFlagValue, err := cmd.Flags().GetInt64(ForceUpdateFlagName)
		if err != nil {
			return err, false
		}
		m.ForceUpdate = ForceUpdateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecLogDriverFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LogDriverFlagName := fmt.Sprintf("%v.LogDriver", cmdPrefix)
	if cmd.Flags().Changed(LogDriverFlagName) {
		// info: complex object LogDriver TaskSpecLogDriver is retrieved outside this Changed() block
	}
	LogDriverFlagValue := m.LogDriver
	if swag.IsZero(LogDriverFlagValue) {
		LogDriverFlagValue = &models.TaskSpecLogDriver{}
	}

	err, LogDriverAdded := retrieveModelTaskSpecLogDriverFlags(depth+1, LogDriverFlagValue, LogDriverFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogDriverAdded
	if LogDriverAdded {
		m.LogDriver = LogDriverFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecNetworkAttachmentSpecFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworkAttachmentSpecFlagName := fmt.Sprintf("%v.NetworkAttachmentSpec", cmdPrefix)
	if cmd.Flags().Changed(NetworkAttachmentSpecFlagName) {
		// info: complex object NetworkAttachmentSpec TaskSpecNetworkAttachmentSpec is retrieved outside this Changed() block
	}
	NetworkAttachmentSpecFlagValue := m.NetworkAttachmentSpec
	if swag.IsZero(NetworkAttachmentSpecFlagValue) {
		NetworkAttachmentSpecFlagValue = &models.TaskSpecNetworkAttachmentSpec{}
	}

	err, NetworkAttachmentSpecAdded := retrieveModelTaskSpecNetworkAttachmentSpecFlags(depth+1, NetworkAttachmentSpecFlagValue, NetworkAttachmentSpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkAttachmentSpecAdded
	if NetworkAttachmentSpecAdded {
		m.NetworkAttachmentSpec = NetworkAttachmentSpecFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecNetworksFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworksFlagName := fmt.Sprintf("%v.Networks", cmdPrefix)
	if cmd.Flags().Changed(NetworksFlagName) {
		// warning: Networks array type []*NetworkAttachmentConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecPlacementFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PlacementFlagName := fmt.Sprintf("%v.Placement", cmdPrefix)
	if cmd.Flags().Changed(PlacementFlagName) {
		// info: complex object Placement TaskSpecPlacement is retrieved outside this Changed() block
	}
	PlacementFlagValue := m.Placement
	if swag.IsZero(PlacementFlagValue) {
		PlacementFlagValue = &models.TaskSpecPlacement{}
	}

	err, PlacementAdded := retrieveModelTaskSpecPlacementFlags(depth+1, PlacementFlagValue, PlacementFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlacementAdded
	if PlacementAdded {
		m.Placement = PlacementFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecPluginSpecFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PluginSpecFlagName := fmt.Sprintf("%v.PluginSpec", cmdPrefix)
	if cmd.Flags().Changed(PluginSpecFlagName) {
		// info: complex object PluginSpec TaskSpecPluginSpec is retrieved outside this Changed() block
	}
	PluginSpecFlagValue := m.PluginSpec
	if swag.IsZero(PluginSpecFlagValue) {
		PluginSpecFlagValue = &models.TaskSpecPluginSpec{}
	}

	err, PluginSpecAdded := retrieveModelTaskSpecPluginSpecFlags(depth+1, PluginSpecFlagValue, PluginSpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PluginSpecAdded
	if PluginSpecAdded {
		m.PluginSpec = PluginSpecFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecResourcesFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ResourcesFlagName := fmt.Sprintf("%v.Resources", cmdPrefix)
	if cmd.Flags().Changed(ResourcesFlagName) {
		// info: complex object Resources TaskSpecResources is retrieved outside this Changed() block
	}
	ResourcesFlagValue := m.Resources
	if swag.IsZero(ResourcesFlagValue) {
		ResourcesFlagValue = &models.TaskSpecResources{}
	}

	err, ResourcesAdded := retrieveModelTaskSpecResourcesFlags(depth+1, ResourcesFlagValue, ResourcesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ResourcesAdded
	if ResourcesAdded {
		m.Resources = ResourcesFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecRestartPolicyFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RestartPolicyFlagName := fmt.Sprintf("%v.RestartPolicy", cmdPrefix)
	if cmd.Flags().Changed(RestartPolicyFlagName) {
		// info: complex object RestartPolicy TaskSpecRestartPolicy is retrieved outside this Changed() block
	}
	RestartPolicyFlagValue := m.RestartPolicy
	if swag.IsZero(RestartPolicyFlagValue) {
		RestartPolicyFlagValue = &models.TaskSpecRestartPolicy{}
	}

	err, RestartPolicyAdded := retrieveModelTaskSpecRestartPolicyFlags(depth+1, RestartPolicyFlagValue, RestartPolicyFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RestartPolicyAdded
	if RestartPolicyAdded {
		m.RestartPolicy = RestartPolicyFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecRuntimeFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RuntimeFlagName := fmt.Sprintf("%v.Runtime", cmdPrefix)
	if cmd.Flags().Changed(RuntimeFlagName) {

		var RuntimeFlagName string
		if cmdPrefix == "" {
			RuntimeFlagName = "Runtime"
		} else {
			RuntimeFlagName = fmt.Sprintf("%v.Runtime", cmdPrefix)
		}

		RuntimeFlagValue, err := cmd.Flags().GetString(RuntimeFlagName)
		if err != nil {
			return err, false
		}
		m.Runtime = RuntimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecContainerSpec

// register flags to command
func registerModelTaskSpecContainerSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpecArgs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecCapabilities(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecCommand(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecConfigs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecDNSConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecDir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecHealthCheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecHosts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecInit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecIsolation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecMounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecOpenStdin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecPrivileges(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecSecrets(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecStopGracePeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecStopSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecSysctls(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecTTY(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecArgs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Args []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecCapabilities(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Capabilities []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecCommand(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Command []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecConfigs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Configs []*TaskSpecContainerSpecConfigsItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecDNSConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var DNSConfigFlagName string
	if cmdPrefix == "" {
		DNSConfigFlagName = "DNSConfig"
	} else {
		DNSConfigFlagName = fmt.Sprintf("%v.DNSConfig", cmdPrefix)
	}

	if err := registerModelTaskSpecContainerSpecDNSConfigFlags(depth+1, DNSConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecDir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DirDescription := `The working directory for commands to run in.`

	var DirFlagName string
	if cmdPrefix == "" {
		DirFlagName = "Dir"
	} else {
		DirFlagName = fmt.Sprintf("%v.Dir", cmdPrefix)
	}

	var DirFlagDefault string

	_ = cmd.PersistentFlags().String(DirFlagName, DirFlagDefault, DirDescription)

	return nil
}

func registerTaskSpecContainerSpecEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Env []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Groups []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecHealthCheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var HealthCheckFlagName string
	if cmdPrefix == "" {
		HealthCheckFlagName = "HealthCheck"
	} else {
		HealthCheckFlagName = fmt.Sprintf("%v.HealthCheck", cmdPrefix)
	}

	if err := registerModelHealthConfigFlags(depth+1, HealthCheckFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HostnameDescription := `The hostname to use for the container, as a valid RFC 1123 hostname.`

	var HostnameFlagName string
	if cmdPrefix == "" {
		HostnameFlagName = "Hostname"
	} else {
		HostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
	}

	var HostnameFlagDefault string

	_ = cmd.PersistentFlags().String(HostnameFlagName, HostnameFlagDefault, HostnameDescription)

	return nil
}

func registerTaskSpecContainerSpecHosts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Hosts []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ImageDescription := `The image name to use for the container`

	var ImageFlagName string
	if cmdPrefix == "" {
		ImageFlagName = "Image"
	} else {
		ImageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
	}

	var ImageFlagDefault string

	_ = cmd.PersistentFlags().String(ImageFlagName, ImageFlagDefault, ImageDescription)

	return nil
}

func registerTaskSpecContainerSpecInit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	InitDescription := `Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.`

	var InitFlagName string
	if cmdPrefix == "" {
		InitFlagName = "Init"
	} else {
		InitFlagName = fmt.Sprintf("%v.Init", cmdPrefix)
	}

	var InitFlagDefault bool

	_ = cmd.PersistentFlags().Bool(InitFlagName, InitFlagDefault, InitDescription)

	return nil
}

func registerTaskSpecContainerSpecIsolation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IsolationDescription := `Enum: ["default","process","hyperv"]. Isolation technology of the containers running the service. (Windows only)`

	var IsolationFlagName string
	if cmdPrefix == "" {
		IsolationFlagName = "Isolation"
	} else {
		IsolationFlagName = fmt.Sprintf("%v.Isolation", cmdPrefix)
	}

	var IsolationFlagDefault string

	_ = cmd.PersistentFlags().String(IsolationFlagName, IsolationFlagDefault, IsolationDescription)

	if err := cmd.RegisterFlagCompletionFunc(IsolationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["default","process","hyperv"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecMounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Mounts []*Mount array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecOpenStdin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OpenStdinDescription := `Open ` + "`" + `stdin` + "`" + ``

	var OpenStdinFlagName string
	if cmdPrefix == "" {
		OpenStdinFlagName = "OpenStdin"
	} else {
		OpenStdinFlagName = fmt.Sprintf("%v.OpenStdin", cmdPrefix)
	}

	var OpenStdinFlagDefault bool

	_ = cmd.PersistentFlags().Bool(OpenStdinFlagName, OpenStdinFlagDefault, OpenStdinDescription)

	return nil
}

func registerTaskSpecContainerSpecPrivileges(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var PrivilegesFlagName string
	if cmdPrefix == "" {
		PrivilegesFlagName = "Privileges"
	} else {
		PrivilegesFlagName = fmt.Sprintf("%v.Privileges", cmdPrefix)
	}

	if err := registerModelTaskSpecContainerSpecPrivilegesFlags(depth+1, PrivilegesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ReadOnlyDescription := `Mount the container's root filesystem as read only.`

	var ReadOnlyFlagName string
	if cmdPrefix == "" {
		ReadOnlyFlagName = "ReadOnly"
	} else {
		ReadOnlyFlagName = fmt.Sprintf("%v.ReadOnly", cmdPrefix)
	}

	var ReadOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ReadOnlyFlagName, ReadOnlyFlagDefault, ReadOnlyDescription)

	return nil
}

func registerTaskSpecContainerSpecSecrets(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Secrets []*TaskSpecContainerSpecSecretsItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecStopGracePeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StopGracePeriodDescription := `Amount of time to wait for the container to terminate before forcefully killing it.`

	var StopGracePeriodFlagName string
	if cmdPrefix == "" {
		StopGracePeriodFlagName = "StopGracePeriod"
	} else {
		StopGracePeriodFlagName = fmt.Sprintf("%v.StopGracePeriod", cmdPrefix)
	}

	var StopGracePeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(StopGracePeriodFlagName, StopGracePeriodFlagDefault, StopGracePeriodDescription)

	return nil
}

func registerTaskSpecContainerSpecStopSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StopSignalDescription := `Signal to stop the container.`

	var StopSignalFlagName string
	if cmdPrefix == "" {
		StopSignalFlagName = "StopSignal"
	} else {
		StopSignalFlagName = fmt.Sprintf("%v.StopSignal", cmdPrefix)
	}

	var StopSignalFlagDefault string

	_ = cmd.PersistentFlags().String(StopSignalFlagName, StopSignalFlagDefault, StopSignalDescription)

	return nil
}

func registerTaskSpecContainerSpecSysctls(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Sysctls map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecTTY(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TTYDescription := `Whether a pseudo-TTY should be allocated.`

	var TTYFlagName string
	if cmdPrefix == "" {
		TTYFlagName = "TTY"
	} else {
		TTYFlagName = fmt.Sprintf("%v.TTY", cmdPrefix)
	}

	var TTYFlagDefault bool

	_ = cmd.PersistentFlags().Bool(TTYFlagName, TTYFlagDefault, TTYDescription)

	return nil
}

func registerTaskSpecContainerSpecUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UserDescription := `The user inside the container.`

	var UserFlagName string
	if cmdPrefix == "" {
		UserFlagName = "User"
	} else {
		UserFlagName = fmt.Sprintf("%v.User", cmdPrefix)
	}

	var UserFlagDefault string

	_ = cmd.PersistentFlags().String(UserFlagName, UserFlagDefault, UserDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecContainerSpecFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ArgsAdded := retrieveTaskSpecContainerSpecArgsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArgsAdded

	err, CapabilitiesAdded := retrieveTaskSpecContainerSpecCapabilitiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapabilitiesAdded

	err, CommandAdded := retrieveTaskSpecContainerSpecCommandFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CommandAdded

	err, ConfigsAdded := retrieveTaskSpecContainerSpecConfigsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConfigsAdded

	err, DNSConfigAdded := retrieveTaskSpecContainerSpecDNSConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DNSConfigAdded

	err, DirAdded := retrieveTaskSpecContainerSpecDirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DirAdded

	err, EnvAdded := retrieveTaskSpecContainerSpecEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnvAdded

	err, GroupsAdded := retrieveTaskSpecContainerSpecGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GroupsAdded

	err, HealthCheckAdded := retrieveTaskSpecContainerSpecHealthCheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HealthCheckAdded

	err, HostnameAdded := retrieveTaskSpecContainerSpecHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostnameAdded

	err, HostsAdded := retrieveTaskSpecContainerSpecHostsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostsAdded

	err, ImageAdded := retrieveTaskSpecContainerSpecImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ImageAdded

	err, InitAdded := retrieveTaskSpecContainerSpecInitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InitAdded

	err, IsolationAdded := retrieveTaskSpecContainerSpecIsolationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsolationAdded

	err, LabelsAdded := retrieveTaskSpecContainerSpecLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, MountsAdded := retrieveTaskSpecContainerSpecMountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MountsAdded

	err, OpenStdinAdded := retrieveTaskSpecContainerSpecOpenStdinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OpenStdinAdded

	err, PrivilegesAdded := retrieveTaskSpecContainerSpecPrivilegesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PrivilegesAdded

	err, ReadOnlyAdded := retrieveTaskSpecContainerSpecReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadOnlyAdded

	err, SecretsAdded := retrieveTaskSpecContainerSpecSecretsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SecretsAdded

	err, StopGracePeriodAdded := retrieveTaskSpecContainerSpecStopGracePeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StopGracePeriodAdded

	err, StopSignalAdded := retrieveTaskSpecContainerSpecStopSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StopSignalAdded

	err, SysctlsAdded := retrieveTaskSpecContainerSpecSysctlsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SysctlsAdded

	err, TTYAdded := retrieveTaskSpecContainerSpecTTYFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TTYAdded

	err, UserAdded := retrieveTaskSpecContainerSpecUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UserAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecArgsFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ArgsFlagName := fmt.Sprintf("%v.Args", cmdPrefix)
	if cmd.Flags().Changed(ArgsFlagName) {
		// warning: Args array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecCapabilitiesFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CapabilitiesFlagName := fmt.Sprintf("%v.Capabilities", cmdPrefix)
	if cmd.Flags().Changed(CapabilitiesFlagName) {
		// warning: Capabilities array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecCommandFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CommandFlagName := fmt.Sprintf("%v.Command", cmdPrefix)
	if cmd.Flags().Changed(CommandFlagName) {
		// warning: Command array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecConfigsFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConfigsFlagName := fmt.Sprintf("%v.Configs", cmdPrefix)
	if cmd.Flags().Changed(ConfigsFlagName) {
		// warning: Configs array type []*TaskSpecContainerSpecConfigsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecDNSConfigFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DNSConfigFlagName := fmt.Sprintf("%v.DNSConfig", cmdPrefix)
	if cmd.Flags().Changed(DNSConfigFlagName) {
		// info: complex object DNSConfig TaskSpecContainerSpecDNSConfig is retrieved outside this Changed() block
	}
	DNSConfigFlagValue := m.DNSConfig
	if swag.IsZero(DNSConfigFlagValue) {
		DNSConfigFlagValue = &models.TaskSpecContainerSpecDNSConfig{}
	}

	err, DNSConfigAdded := retrieveModelTaskSpecContainerSpecDNSConfigFlags(depth+1, DNSConfigFlagValue, DNSConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DNSConfigAdded
	if DNSConfigAdded {
		m.DNSConfig = DNSConfigFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecDirFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DirFlagName := fmt.Sprintf("%v.Dir", cmdPrefix)
	if cmd.Flags().Changed(DirFlagName) {

		var DirFlagName string
		if cmdPrefix == "" {
			DirFlagName = "Dir"
		} else {
			DirFlagName = fmt.Sprintf("%v.Dir", cmdPrefix)
		}

		DirFlagValue, err := cmd.Flags().GetString(DirFlagName)
		if err != nil {
			return err, false
		}
		m.Dir = DirFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecEnvFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EnvFlagName := fmt.Sprintf("%v.Env", cmdPrefix)
	if cmd.Flags().Changed(EnvFlagName) {
		// warning: Env array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecGroupsFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GroupsFlagName := fmt.Sprintf("%v.Groups", cmdPrefix)
	if cmd.Flags().Changed(GroupsFlagName) {
		// warning: Groups array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecHealthCheckFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HealthCheckFlagName := fmt.Sprintf("%v.HealthCheck", cmdPrefix)
	if cmd.Flags().Changed(HealthCheckFlagName) {
		// info: complex object HealthCheck HealthConfig is retrieved outside this Changed() block
	}
	HealthCheckFlagValue := m.HealthCheck
	if swag.IsZero(HealthCheckFlagValue) {
		HealthCheckFlagValue = &models.HealthConfig{}
	}

	err, HealthCheckAdded := retrieveModelHealthConfigFlags(depth+1, HealthCheckFlagValue, HealthCheckFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HealthCheckAdded
	if HealthCheckAdded {
		m.HealthCheck = HealthCheckFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecHostnameFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostnameFlagName := fmt.Sprintf("%v.Hostname", cmdPrefix)
	if cmd.Flags().Changed(HostnameFlagName) {

		var HostnameFlagName string
		if cmdPrefix == "" {
			HostnameFlagName = "Hostname"
		} else {
			HostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
		}

		HostnameFlagValue, err := cmd.Flags().GetString(HostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = HostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecHostsFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostsFlagName := fmt.Sprintf("%v.Hosts", cmdPrefix)
	if cmd.Flags().Changed(HostsFlagName) {
		// warning: Hosts array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecImageFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ImageFlagName := fmt.Sprintf("%v.Image", cmdPrefix)
	if cmd.Flags().Changed(ImageFlagName) {

		var ImageFlagName string
		if cmdPrefix == "" {
			ImageFlagName = "Image"
		} else {
			ImageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
		}

		ImageFlagValue, err := cmd.Flags().GetString(ImageFlagName)
		if err != nil {
			return err, false
		}
		m.Image = ImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecInitFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	InitFlagName := fmt.Sprintf("%v.Init", cmdPrefix)
	if cmd.Flags().Changed(InitFlagName) {

		var InitFlagName string
		if cmdPrefix == "" {
			InitFlagName = "Init"
		} else {
			InitFlagName = fmt.Sprintf("%v.Init", cmdPrefix)
		}

		InitFlagValue, err := cmd.Flags().GetBool(InitFlagName)
		if err != nil {
			return err, false
		}
		m.Init = &InitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecIsolationFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IsolationFlagName := fmt.Sprintf("%v.Isolation", cmdPrefix)
	if cmd.Flags().Changed(IsolationFlagName) {

		var IsolationFlagName string
		if cmdPrefix == "" {
			IsolationFlagName = "Isolation"
		} else {
			IsolationFlagName = fmt.Sprintf("%v.Isolation", cmdPrefix)
		}

		IsolationFlagValue, err := cmd.Flags().GetString(IsolationFlagName)
		if err != nil {
			return err, false
		}
		m.Isolation = IsolationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecLabelsFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecMountsFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MountsFlagName := fmt.Sprintf("%v.Mounts", cmdPrefix)
	if cmd.Flags().Changed(MountsFlagName) {
		// warning: Mounts array type []*Mount is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecOpenStdinFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OpenStdinFlagName := fmt.Sprintf("%v.OpenStdin", cmdPrefix)
	if cmd.Flags().Changed(OpenStdinFlagName) {

		var OpenStdinFlagName string
		if cmdPrefix == "" {
			OpenStdinFlagName = "OpenStdin"
		} else {
			OpenStdinFlagName = fmt.Sprintf("%v.OpenStdin", cmdPrefix)
		}

		OpenStdinFlagValue, err := cmd.Flags().GetBool(OpenStdinFlagName)
		if err != nil {
			return err, false
		}
		m.OpenStdin = OpenStdinFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PrivilegesFlagName := fmt.Sprintf("%v.Privileges", cmdPrefix)
	if cmd.Flags().Changed(PrivilegesFlagName) {
		// info: complex object Privileges TaskSpecContainerSpecPrivileges is retrieved outside this Changed() block
	}
	PrivilegesFlagValue := m.Privileges
	if swag.IsZero(PrivilegesFlagValue) {
		PrivilegesFlagValue = &models.TaskSpecContainerSpecPrivileges{}
	}

	err, PrivilegesAdded := retrieveModelTaskSpecContainerSpecPrivilegesFlags(depth+1, PrivilegesFlagValue, PrivilegesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PrivilegesAdded
	if PrivilegesAdded {
		m.Privileges = PrivilegesFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecReadOnlyFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ReadOnlyFlagName := fmt.Sprintf("%v.ReadOnly", cmdPrefix)
	if cmd.Flags().Changed(ReadOnlyFlagName) {

		var ReadOnlyFlagName string
		if cmdPrefix == "" {
			ReadOnlyFlagName = "ReadOnly"
		} else {
			ReadOnlyFlagName = fmt.Sprintf("%v.ReadOnly", cmdPrefix)
		}

		ReadOnlyFlagValue, err := cmd.Flags().GetBool(ReadOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.ReadOnly = ReadOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecSecretsFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SecretsFlagName := fmt.Sprintf("%v.Secrets", cmdPrefix)
	if cmd.Flags().Changed(SecretsFlagName) {
		// warning: Secrets array type []*TaskSpecContainerSpecSecretsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecStopGracePeriodFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StopGracePeriodFlagName := fmt.Sprintf("%v.StopGracePeriod", cmdPrefix)
	if cmd.Flags().Changed(StopGracePeriodFlagName) {

		var StopGracePeriodFlagName string
		if cmdPrefix == "" {
			StopGracePeriodFlagName = "StopGracePeriod"
		} else {
			StopGracePeriodFlagName = fmt.Sprintf("%v.StopGracePeriod", cmdPrefix)
		}

		StopGracePeriodFlagValue, err := cmd.Flags().GetInt64(StopGracePeriodFlagName)
		if err != nil {
			return err, false
		}
		m.StopGracePeriod = StopGracePeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecStopSignalFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StopSignalFlagName := fmt.Sprintf("%v.StopSignal", cmdPrefix)
	if cmd.Flags().Changed(StopSignalFlagName) {

		var StopSignalFlagName string
		if cmdPrefix == "" {
			StopSignalFlagName = "StopSignal"
		} else {
			StopSignalFlagName = fmt.Sprintf("%v.StopSignal", cmdPrefix)
		}

		StopSignalFlagValue, err := cmd.Flags().GetString(StopSignalFlagName)
		if err != nil {
			return err, false
		}
		m.StopSignal = StopSignalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecSysctlsFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SysctlsFlagName := fmt.Sprintf("%v.Sysctls", cmdPrefix)
	if cmd.Flags().Changed(SysctlsFlagName) {
		// warning: Sysctls map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecTTYFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TTYFlagName := fmt.Sprintf("%v.TTY", cmdPrefix)
	if cmd.Flags().Changed(TTYFlagName) {

		var TTYFlagName string
		if cmdPrefix == "" {
			TTYFlagName = "TTY"
		} else {
			TTYFlagName = fmt.Sprintf("%v.TTY", cmdPrefix)
		}

		TTYFlagValue, err := cmd.Flags().GetBool(TTYFlagName)
		if err != nil {
			return err, false
		}
		m.TTY = TTYFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecUserFlags(depth int, m *models.TaskSpecContainerSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UserFlagName := fmt.Sprintf("%v.User", cmdPrefix)
	if cmd.Flags().Changed(UserFlagName) {

		var UserFlagName string
		if cmdPrefix == "" {
			UserFlagName = "User"
		} else {
			UserFlagName = fmt.Sprintf("%v.User", cmdPrefix)
		}

		UserFlagValue, err := cmd.Flags().GetString(UserFlagName)
		if err != nil {
			return err, false
		}
		m.User = UserFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecContainerSpecConfigsItems0

// register flags to command
func registerModelTaskSpecContainerSpecConfigsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpecConfigsItems0ConfigID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecConfigsItems0ConfigName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecConfigsItems0File(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecConfigsItems0Runtime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecConfigsItems0ConfigID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ConfigIDDescription := `ConfigID represents the ID of the specific config that we're referencing.`

	var ConfigIDFlagName string
	if cmdPrefix == "" {
		ConfigIDFlagName = "ConfigID"
	} else {
		ConfigIDFlagName = fmt.Sprintf("%v.ConfigID", cmdPrefix)
	}

	var ConfigIDFlagDefault string

	_ = cmd.PersistentFlags().String(ConfigIDFlagName, ConfigIDFlagDefault, ConfigIDDescription)

	return nil
}

func registerTaskSpecContainerSpecConfigsItems0ConfigName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ConfigNameDescription := `ConfigName is the name of the config that this references, but this is just provided for
lookup/display purposes. The config in the reference will be identified by its ID.
`

	var ConfigNameFlagName string
	if cmdPrefix == "" {
		ConfigNameFlagName = "ConfigName"
	} else {
		ConfigNameFlagName = fmt.Sprintf("%v.ConfigName", cmdPrefix)
	}

	var ConfigNameFlagDefault string

	_ = cmd.PersistentFlags().String(ConfigNameFlagName, ConfigNameFlagDefault, ConfigNameDescription)

	return nil
}

func registerTaskSpecContainerSpecConfigsItems0File(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var FileFlagName string
	if cmdPrefix == "" {
		FileFlagName = "File"
	} else {
		FileFlagName = fmt.Sprintf("%v.File", cmdPrefix)
	}

	if err := registerModelTaskSpecContainerSpecConfigsItems0FileFlags(depth+1, FileFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecConfigsItems0Runtime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Runtime interface{} map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecContainerSpecConfigsItems0Flags(depth int, m *models.TaskSpecContainerSpecConfigsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ConfigIDAdded := retrieveTaskSpecContainerSpecConfigsItems0ConfigIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConfigIDAdded

	err, ConfigNameAdded := retrieveTaskSpecContainerSpecConfigsItems0ConfigNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConfigNameAdded

	err, FileAdded := retrieveTaskSpecContainerSpecConfigsItems0FileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded

	err, RuntimeAdded := retrieveTaskSpecContainerSpecConfigsItems0RuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RuntimeAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecConfigsItems0ConfigIDFlags(depth int, m *models.TaskSpecContainerSpecConfigsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConfigIDFlagName := fmt.Sprintf("%v.ConfigID", cmdPrefix)
	if cmd.Flags().Changed(ConfigIDFlagName) {

		var ConfigIDFlagName string
		if cmdPrefix == "" {
			ConfigIDFlagName = "ConfigID"
		} else {
			ConfigIDFlagName = fmt.Sprintf("%v.ConfigID", cmdPrefix)
		}

		ConfigIDFlagValue, err := cmd.Flags().GetString(ConfigIDFlagName)
		if err != nil {
			return err, false
		}
		m.ConfigID = ConfigIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecConfigsItems0ConfigNameFlags(depth int, m *models.TaskSpecContainerSpecConfigsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConfigNameFlagName := fmt.Sprintf("%v.ConfigName", cmdPrefix)
	if cmd.Flags().Changed(ConfigNameFlagName) {

		var ConfigNameFlagName string
		if cmdPrefix == "" {
			ConfigNameFlagName = "ConfigName"
		} else {
			ConfigNameFlagName = fmt.Sprintf("%v.ConfigName", cmdPrefix)
		}

		ConfigNameFlagValue, err := cmd.Flags().GetString(ConfigNameFlagName)
		if err != nil {
			return err, false
		}
		m.ConfigName = ConfigNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecConfigsItems0FileFlags(depth int, m *models.TaskSpecContainerSpecConfigsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	FileFlagName := fmt.Sprintf("%v.File", cmdPrefix)
	if cmd.Flags().Changed(FileFlagName) {
		// info: complex object File TaskSpecContainerSpecConfigsItems0File is retrieved outside this Changed() block
	}
	FileFlagValue := m.File
	if swag.IsZero(FileFlagValue) {
		FileFlagValue = &models.TaskSpecContainerSpecConfigsItems0File{}
	}

	err, FileAdded := retrieveModelTaskSpecContainerSpecConfigsItems0FileFlags(depth+1, FileFlagValue, FileFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded
	if FileAdded {
		m.File = FileFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecConfigsItems0RuntimeFlags(depth int, m *models.TaskSpecContainerSpecConfigsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RuntimeFlagName := fmt.Sprintf("%v.Runtime", cmdPrefix)
	if cmd.Flags().Changed(RuntimeFlagName) {
		// warning: Runtime map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecContainerSpecConfigsItems0File

// register flags to command
func registerModelTaskSpecContainerSpecConfigsItems0FileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpecConfigsItems0FileGID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecConfigsItems0FileMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecConfigsItems0FileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecConfigsItems0FileUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecConfigsItems0FileGID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GIDDescription := `GID represents the file GID.`

	var GIDFlagName string
	if cmdPrefix == "" {
		GIDFlagName = "GID"
	} else {
		GIDFlagName = fmt.Sprintf("%v.GID", cmdPrefix)
	}

	var GIDFlagDefault string

	_ = cmd.PersistentFlags().String(GIDFlagName, GIDFlagDefault, GIDDescription)

	return nil
}

func registerTaskSpecContainerSpecConfigsItems0FileMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive Mode uint32 is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecConfigsItems0FileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Name represents the final filename in the filesystem.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerTaskSpecContainerSpecConfigsItems0FileUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UIDDescription := `UID represents the file UID.`

	var UIDFlagName string
	if cmdPrefix == "" {
		UIDFlagName = "UID"
	} else {
		UIDFlagName = fmt.Sprintf("%v.UID", cmdPrefix)
	}

	var UIDFlagDefault string

	_ = cmd.PersistentFlags().String(UIDFlagName, UIDFlagDefault, UIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecContainerSpecConfigsItems0FileFlags(depth int, m *models.TaskSpecContainerSpecConfigsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, GIDAdded := retrieveTaskSpecContainerSpecConfigsItems0FileGIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GIDAdded

	err, ModeAdded := retrieveTaskSpecContainerSpecConfigsItems0FileModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModeAdded

	err, NameAdded := retrieveTaskSpecContainerSpecConfigsItems0FileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UIDAdded := retrieveTaskSpecContainerSpecConfigsItems0FileUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UIDAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecConfigsItems0FileGIDFlags(depth int, m *models.TaskSpecContainerSpecConfigsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GIDFlagName := fmt.Sprintf("%v.GID", cmdPrefix)
	if cmd.Flags().Changed(GIDFlagName) {

		var GIDFlagName string
		if cmdPrefix == "" {
			GIDFlagName = "GID"
		} else {
			GIDFlagName = fmt.Sprintf("%v.GID", cmdPrefix)
		}

		GIDFlagValue, err := cmd.Flags().GetString(GIDFlagName)
		if err != nil {
			return err, false
		}
		m.GID = GIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecConfigsItems0FileModeFlags(depth int, m *models.TaskSpecContainerSpecConfigsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ModeFlagName := fmt.Sprintf("%v.Mode", cmdPrefix)
	if cmd.Flags().Changed(ModeFlagName) {

		// warning: primitive Mode uint32 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecConfigsItems0FileNameFlags(depth int, m *models.TaskSpecContainerSpecConfigsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecConfigsItems0FileUIDFlags(depth int, m *models.TaskSpecContainerSpecConfigsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UIDFlagName := fmt.Sprintf("%v.UID", cmdPrefix)
	if cmd.Flags().Changed(UIDFlagName) {

		var UIDFlagName string
		if cmdPrefix == "" {
			UIDFlagName = "UID"
		} else {
			UIDFlagName = fmt.Sprintf("%v.UID", cmdPrefix)
		}

		UIDFlagValue, err := cmd.Flags().GetString(UIDFlagName)
		if err != nil {
			return err, false
		}
		m.UID = UIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecContainerSpecDNSConfig

// register flags to command
func registerModelTaskSpecContainerSpecDNSConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpecDNSConfigNameservers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecDNSConfigOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecDNSConfigSearch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecDNSConfigNameservers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Nameservers []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecDNSConfigOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecDNSConfigSearch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Search []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecContainerSpecDNSConfigFlags(depth int, m *models.TaskSpecContainerSpecDNSConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameserversAdded := retrieveTaskSpecContainerSpecDNSConfigNameserversFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameserversAdded

	err, OptionsAdded := retrieveTaskSpecContainerSpecDNSConfigOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	err, SearchAdded := retrieveTaskSpecContainerSpecDNSConfigSearchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SearchAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecDNSConfigNameserversFlags(depth int, m *models.TaskSpecContainerSpecDNSConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameserversFlagName := fmt.Sprintf("%v.Nameservers", cmdPrefix)
	if cmd.Flags().Changed(NameserversFlagName) {
		// warning: Nameservers array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecDNSConfigOptionsFlags(depth int, m *models.TaskSpecContainerSpecDNSConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecDNSConfigSearchFlags(depth int, m *models.TaskSpecContainerSpecDNSConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SearchFlagName := fmt.Sprintf("%v.Search", cmdPrefix)
	if cmd.Flags().Changed(SearchFlagName) {
		// warning: Search array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecContainerSpecPrivileges

// register flags to command
func registerModelTaskSpecContainerSpecPrivilegesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpecPrivilegesCredentialSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecPrivilegesSELinuxContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecPrivilegesCredentialSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var CredentialSpecFlagName string
	if cmdPrefix == "" {
		CredentialSpecFlagName = "CredentialSpec"
	} else {
		CredentialSpecFlagName = fmt.Sprintf("%v.CredentialSpec", cmdPrefix)
	}

	if err := registerModelTaskSpecContainerSpecPrivilegesCredentialSpecFlags(depth+1, CredentialSpecFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecPrivilegesSELinuxContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var SELinuxContextFlagName string
	if cmdPrefix == "" {
		SELinuxContextFlagName = "SELinuxContext"
	} else {
		SELinuxContextFlagName = fmt.Sprintf("%v.SELinuxContext", cmdPrefix)
	}

	if err := registerModelTaskSpecContainerSpecPrivilegesSELinuxContextFlags(depth+1, SELinuxContextFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecContainerSpecPrivilegesFlags(depth int, m *models.TaskSpecContainerSpecPrivileges, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CredentialSpecAdded := retrieveTaskSpecContainerSpecPrivilegesCredentialSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CredentialSpecAdded

	err, SELinuxContextAdded := retrieveTaskSpecContainerSpecPrivilegesSELinuxContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SELinuxContextAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesCredentialSpecFlags(depth int, m *models.TaskSpecContainerSpecPrivileges, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CredentialSpecFlagName := fmt.Sprintf("%v.CredentialSpec", cmdPrefix)
	if cmd.Flags().Changed(CredentialSpecFlagName) {
		// info: complex object CredentialSpec TaskSpecContainerSpecPrivilegesCredentialSpec is retrieved outside this Changed() block
	}
	CredentialSpecFlagValue := m.CredentialSpec
	if swag.IsZero(CredentialSpecFlagValue) {
		CredentialSpecFlagValue = &models.TaskSpecContainerSpecPrivilegesCredentialSpec{}
	}

	err, CredentialSpecAdded := retrieveModelTaskSpecContainerSpecPrivilegesCredentialSpecFlags(depth+1, CredentialSpecFlagValue, CredentialSpecFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CredentialSpecAdded
	if CredentialSpecAdded {
		m.CredentialSpec = CredentialSpecFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesSELinuxContextFlags(depth int, m *models.TaskSpecContainerSpecPrivileges, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SELinuxContextFlagName := fmt.Sprintf("%v.SELinuxContext", cmdPrefix)
	if cmd.Flags().Changed(SELinuxContextFlagName) {
		// info: complex object SELinuxContext TaskSpecContainerSpecPrivilegesSELinuxContext is retrieved outside this Changed() block
	}
	SELinuxContextFlagValue := m.SELinuxContext
	if swag.IsZero(SELinuxContextFlagValue) {
		SELinuxContextFlagValue = &models.TaskSpecContainerSpecPrivilegesSELinuxContext{}
	}

	err, SELinuxContextAdded := retrieveModelTaskSpecContainerSpecPrivilegesSELinuxContextFlags(depth+1, SELinuxContextFlagValue, SELinuxContextFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SELinuxContextAdded
	if SELinuxContextAdded {
		m.SELinuxContext = SELinuxContextFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecContainerSpecPrivilegesCredentialSpec

// register flags to command
func registerModelTaskSpecContainerSpecPrivilegesCredentialSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpecPrivilegesCredentialSpecConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecPrivilegesCredentialSpecFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecPrivilegesCredentialSpecRegistry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecPrivilegesCredentialSpecConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ConfigDescription := `Load credential spec from a Swarm Config with the given ID.
The specified config must also be present in the Configs field with the Runtime property set.

<p><br /></p>


> **Note**: ` + "`" + `CredentialSpec.File` + "`" + `, ` + "`" + `CredentialSpec.Registry` + "`" + `, and ` + "`" + `CredentialSpec.Config` + "`" + ` are mutually exclusive.
`

	var ConfigFlagName string
	if cmdPrefix == "" {
		ConfigFlagName = "Config"
	} else {
		ConfigFlagName = fmt.Sprintf("%v.Config", cmdPrefix)
	}

	var ConfigFlagDefault string

	_ = cmd.PersistentFlags().String(ConfigFlagName, ConfigFlagDefault, ConfigDescription)

	return nil
}

func registerTaskSpecContainerSpecPrivilegesCredentialSpecFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	FileDescription := `Load credential spec from this file. The file is read by the daemon, and must be present in the
` + "`" + `CredentialSpecs` + "`" + ` subdirectory in the docker data directory, which defaults to
` + "`" + `C:\ProgramData\Docker\` + "`" + ` on Windows.

For example, specifying ` + "`" + `spec.json` + "`" + ` loads ` + "`" + `C:\ProgramData\Docker\CredentialSpecs\spec.json` + "`" + `.

<p><br /></p>

> **Note**: ` + "`" + `CredentialSpec.File` + "`" + `, ` + "`" + `CredentialSpec.Registry` + "`" + `, and ` + "`" + `CredentialSpec.Config` + "`" + ` are mutually exclusive.
`

	var FileFlagName string
	if cmdPrefix == "" {
		FileFlagName = "File"
	} else {
		FileFlagName = fmt.Sprintf("%v.File", cmdPrefix)
	}

	var FileFlagDefault string

	_ = cmd.PersistentFlags().String(FileFlagName, FileFlagDefault, FileDescription)

	return nil
}

func registerTaskSpecContainerSpecPrivilegesCredentialSpecRegistry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RegistryDescription := `Load credential spec from this value in the Windows registry. The specified registry value must be
located in:

` + "`" + `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs` + "`" + `

<p><br /></p>


> **Note**: ` + "`" + `CredentialSpec.File` + "`" + `, ` + "`" + `CredentialSpec.Registry` + "`" + `, and ` + "`" + `CredentialSpec.Config` + "`" + ` are mutually exclusive.
`

	var RegistryFlagName string
	if cmdPrefix == "" {
		RegistryFlagName = "Registry"
	} else {
		RegistryFlagName = fmt.Sprintf("%v.Registry", cmdPrefix)
	}

	var RegistryFlagDefault string

	_ = cmd.PersistentFlags().String(RegistryFlagName, RegistryFlagDefault, RegistryDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecContainerSpecPrivilegesCredentialSpecFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesCredentialSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ConfigAdded := retrieveTaskSpecContainerSpecPrivilegesCredentialSpecConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConfigAdded

	err, FileAdded := retrieveTaskSpecContainerSpecPrivilegesCredentialSpecFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded

	err, RegistryAdded := retrieveTaskSpecContainerSpecPrivilegesCredentialSpecRegistryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RegistryAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesCredentialSpecConfigFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesCredentialSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConfigFlagName := fmt.Sprintf("%v.Config", cmdPrefix)
	if cmd.Flags().Changed(ConfigFlagName) {

		var ConfigFlagName string
		if cmdPrefix == "" {
			ConfigFlagName = "Config"
		} else {
			ConfigFlagName = fmt.Sprintf("%v.Config", cmdPrefix)
		}

		ConfigFlagValue, err := cmd.Flags().GetString(ConfigFlagName)
		if err != nil {
			return err, false
		}
		m.Config = ConfigFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesCredentialSpecFileFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesCredentialSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	FileFlagName := fmt.Sprintf("%v.File", cmdPrefix)
	if cmd.Flags().Changed(FileFlagName) {

		var FileFlagName string
		if cmdPrefix == "" {
			FileFlagName = "File"
		} else {
			FileFlagName = fmt.Sprintf("%v.File", cmdPrefix)
		}

		FileFlagValue, err := cmd.Flags().GetString(FileFlagName)
		if err != nil {
			return err, false
		}
		m.File = FileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesCredentialSpecRegistryFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesCredentialSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RegistryFlagName := fmt.Sprintf("%v.Registry", cmdPrefix)
	if cmd.Flags().Changed(RegistryFlagName) {

		var RegistryFlagName string
		if cmdPrefix == "" {
			RegistryFlagName = "Registry"
		} else {
			RegistryFlagName = fmt.Sprintf("%v.Registry", cmdPrefix)
		}

		RegistryFlagValue, err := cmd.Flags().GetString(RegistryFlagName)
		if err != nil {
			return err, false
		}
		m.Registry = RegistryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecContainerSpecPrivilegesSELinuxContext

// register flags to command
func registerModelTaskSpecContainerSpecPrivilegesSELinuxContextFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpecPrivilegesSELinuxContextDisable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecPrivilegesSELinuxContextLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecPrivilegesSELinuxContextRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecPrivilegesSELinuxContextType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecPrivilegesSELinuxContextUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecPrivilegesSELinuxContextDisable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DisableDescription := `Disable SELinux`

	var DisableFlagName string
	if cmdPrefix == "" {
		DisableFlagName = "Disable"
	} else {
		DisableFlagName = fmt.Sprintf("%v.Disable", cmdPrefix)
	}

	var DisableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(DisableFlagName, DisableFlagDefault, DisableDescription)

	return nil
}

func registerTaskSpecContainerSpecPrivilegesSELinuxContextLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	LevelDescription := `SELinux level label`

	var LevelFlagName string
	if cmdPrefix == "" {
		LevelFlagName = "Level"
	} else {
		LevelFlagName = fmt.Sprintf("%v.Level", cmdPrefix)
	}

	var LevelFlagDefault string

	_ = cmd.PersistentFlags().String(LevelFlagName, LevelFlagDefault, LevelDescription)

	return nil
}

func registerTaskSpecContainerSpecPrivilegesSELinuxContextRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RoleDescription := `SELinux role label`

	var RoleFlagName string
	if cmdPrefix == "" {
		RoleFlagName = "Role"
	} else {
		RoleFlagName = fmt.Sprintf("%v.Role", cmdPrefix)
	}

	var RoleFlagDefault string

	_ = cmd.PersistentFlags().String(RoleFlagName, RoleFlagDefault, RoleDescription)

	return nil
}

func registerTaskSpecContainerSpecPrivilegesSELinuxContextType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := `SELinux type label`

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "Type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	return nil
}

func registerTaskSpecContainerSpecPrivilegesSELinuxContextUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UserDescription := `SELinux user label`

	var UserFlagName string
	if cmdPrefix == "" {
		UserFlagName = "User"
	} else {
		UserFlagName = fmt.Sprintf("%v.User", cmdPrefix)
	}

	var UserFlagDefault string

	_ = cmd.PersistentFlags().String(UserFlagName, UserFlagDefault, UserDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecContainerSpecPrivilegesSELinuxContextFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesSELinuxContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DisableAdded := retrieveTaskSpecContainerSpecPrivilegesSELinuxContextDisableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DisableAdded

	err, LevelAdded := retrieveTaskSpecContainerSpecPrivilegesSELinuxContextLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LevelAdded

	err, RoleAdded := retrieveTaskSpecContainerSpecPrivilegesSELinuxContextRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RoleAdded

	err, TypeAdded := retrieveTaskSpecContainerSpecPrivilegesSELinuxContextTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, UserAdded := retrieveTaskSpecContainerSpecPrivilegesSELinuxContextUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UserAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesSELinuxContextDisableFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesSELinuxContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DisableFlagName := fmt.Sprintf("%v.Disable", cmdPrefix)
	if cmd.Flags().Changed(DisableFlagName) {

		var DisableFlagName string
		if cmdPrefix == "" {
			DisableFlagName = "Disable"
		} else {
			DisableFlagName = fmt.Sprintf("%v.Disable", cmdPrefix)
		}

		DisableFlagValue, err := cmd.Flags().GetBool(DisableFlagName)
		if err != nil {
			return err, false
		}
		m.Disable = DisableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesSELinuxContextLevelFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesSELinuxContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LevelFlagName := fmt.Sprintf("%v.Level", cmdPrefix)
	if cmd.Flags().Changed(LevelFlagName) {

		var LevelFlagName string
		if cmdPrefix == "" {
			LevelFlagName = "Level"
		} else {
			LevelFlagName = fmt.Sprintf("%v.Level", cmdPrefix)
		}

		LevelFlagValue, err := cmd.Flags().GetString(LevelFlagName)
		if err != nil {
			return err, false
		}
		m.Level = LevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesSELinuxContextRoleFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesSELinuxContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RoleFlagName := fmt.Sprintf("%v.Role", cmdPrefix)
	if cmd.Flags().Changed(RoleFlagName) {

		var RoleFlagName string
		if cmdPrefix == "" {
			RoleFlagName = "Role"
		} else {
			RoleFlagName = fmt.Sprintf("%v.Role", cmdPrefix)
		}

		RoleFlagValue, err := cmd.Flags().GetString(RoleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = RoleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesSELinuxContextTypeFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesSELinuxContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "Type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecPrivilegesSELinuxContextUserFlags(depth int, m *models.TaskSpecContainerSpecPrivilegesSELinuxContext, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UserFlagName := fmt.Sprintf("%v.User", cmdPrefix)
	if cmd.Flags().Changed(UserFlagName) {

		var UserFlagName string
		if cmdPrefix == "" {
			UserFlagName = "User"
		} else {
			UserFlagName = fmt.Sprintf("%v.User", cmdPrefix)
		}

		UserFlagValue, err := cmd.Flags().GetString(UserFlagName)
		if err != nil {
			return err, false
		}
		m.User = UserFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecContainerSpecSecretsItems0

// register flags to command
func registerModelTaskSpecContainerSpecSecretsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpecSecretsItems0File(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecSecretsItems0SecretID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecSecretsItems0SecretName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecSecretsItems0File(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var FileFlagName string
	if cmdPrefix == "" {
		FileFlagName = "File"
	} else {
		FileFlagName = fmt.Sprintf("%v.File", cmdPrefix)
	}

	if err := registerModelTaskSpecContainerSpecSecretsItems0FileFlags(depth+1, FileFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecSecretsItems0SecretID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SecretIDDescription := `SecretID represents the ID of the specific secret that we're referencing.`

	var SecretIDFlagName string
	if cmdPrefix == "" {
		SecretIDFlagName = "SecretID"
	} else {
		SecretIDFlagName = fmt.Sprintf("%v.SecretID", cmdPrefix)
	}

	var SecretIDFlagDefault string

	_ = cmd.PersistentFlags().String(SecretIDFlagName, SecretIDFlagDefault, SecretIDDescription)

	return nil
}

func registerTaskSpecContainerSpecSecretsItems0SecretName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SecretNameDescription := `SecretName is the name of the secret that this references, but this is just provided for
lookup/display purposes. The secret in the reference will be identified by its ID.
`

	var SecretNameFlagName string
	if cmdPrefix == "" {
		SecretNameFlagName = "SecretName"
	} else {
		SecretNameFlagName = fmt.Sprintf("%v.SecretName", cmdPrefix)
	}

	var SecretNameFlagDefault string

	_ = cmd.PersistentFlags().String(SecretNameFlagName, SecretNameFlagDefault, SecretNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecContainerSpecSecretsItems0Flags(depth int, m *models.TaskSpecContainerSpecSecretsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FileAdded := retrieveTaskSpecContainerSpecSecretsItems0FileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded

	err, SecretIDAdded := retrieveTaskSpecContainerSpecSecretsItems0SecretIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SecretIDAdded

	err, SecretNameAdded := retrieveTaskSpecContainerSpecSecretsItems0SecretNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SecretNameAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecSecretsItems0FileFlags(depth int, m *models.TaskSpecContainerSpecSecretsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	FileFlagName := fmt.Sprintf("%v.File", cmdPrefix)
	if cmd.Flags().Changed(FileFlagName) {
		// info: complex object File TaskSpecContainerSpecSecretsItems0File is retrieved outside this Changed() block
	}
	FileFlagValue := m.File
	if swag.IsZero(FileFlagValue) {
		FileFlagValue = &models.TaskSpecContainerSpecSecretsItems0File{}
	}

	err, FileAdded := retrieveModelTaskSpecContainerSpecSecretsItems0FileFlags(depth+1, FileFlagValue, FileFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded
	if FileAdded {
		m.File = FileFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecSecretsItems0SecretIDFlags(depth int, m *models.TaskSpecContainerSpecSecretsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SecretIDFlagName := fmt.Sprintf("%v.SecretID", cmdPrefix)
	if cmd.Flags().Changed(SecretIDFlagName) {

		var SecretIDFlagName string
		if cmdPrefix == "" {
			SecretIDFlagName = "SecretID"
		} else {
			SecretIDFlagName = fmt.Sprintf("%v.SecretID", cmdPrefix)
		}

		SecretIDFlagValue, err := cmd.Flags().GetString(SecretIDFlagName)
		if err != nil {
			return err, false
		}
		m.SecretID = SecretIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecSecretsItems0SecretNameFlags(depth int, m *models.TaskSpecContainerSpecSecretsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SecretNameFlagName := fmt.Sprintf("%v.SecretName", cmdPrefix)
	if cmd.Flags().Changed(SecretNameFlagName) {

		var SecretNameFlagName string
		if cmdPrefix == "" {
			SecretNameFlagName = "SecretName"
		} else {
			SecretNameFlagName = fmt.Sprintf("%v.SecretName", cmdPrefix)
		}

		SecretNameFlagValue, err := cmd.Flags().GetString(SecretNameFlagName)
		if err != nil {
			return err, false
		}
		m.SecretName = SecretNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecContainerSpecSecretsItems0File

// register flags to command
func registerModelTaskSpecContainerSpecSecretsItems0FileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpecSecretsItems0FileGID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecSecretsItems0FileMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecSecretsItems0FileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecContainerSpecSecretsItems0FileUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpecSecretsItems0FileGID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GIDDescription := `GID represents the file GID.`

	var GIDFlagName string
	if cmdPrefix == "" {
		GIDFlagName = "GID"
	} else {
		GIDFlagName = fmt.Sprintf("%v.GID", cmdPrefix)
	}

	var GIDFlagDefault string

	_ = cmd.PersistentFlags().String(GIDFlagName, GIDFlagDefault, GIDDescription)

	return nil
}

func registerTaskSpecContainerSpecSecretsItems0FileMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive Mode uint32 is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecContainerSpecSecretsItems0FileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Name represents the final filename in the filesystem.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerTaskSpecContainerSpecSecretsItems0FileUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UIDDescription := `UID represents the file UID.`

	var UIDFlagName string
	if cmdPrefix == "" {
		UIDFlagName = "UID"
	} else {
		UIDFlagName = fmt.Sprintf("%v.UID", cmdPrefix)
	}

	var UIDFlagDefault string

	_ = cmd.PersistentFlags().String(UIDFlagName, UIDFlagDefault, UIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecContainerSpecSecretsItems0FileFlags(depth int, m *models.TaskSpecContainerSpecSecretsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, GIDAdded := retrieveTaskSpecContainerSpecSecretsItems0FileGIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GIDAdded

	err, ModeAdded := retrieveTaskSpecContainerSpecSecretsItems0FileModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModeAdded

	err, NameAdded := retrieveTaskSpecContainerSpecSecretsItems0FileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, UIDAdded := retrieveTaskSpecContainerSpecSecretsItems0FileUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UIDAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecSecretsItems0FileGIDFlags(depth int, m *models.TaskSpecContainerSpecSecretsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GIDFlagName := fmt.Sprintf("%v.GID", cmdPrefix)
	if cmd.Flags().Changed(GIDFlagName) {

		var GIDFlagName string
		if cmdPrefix == "" {
			GIDFlagName = "GID"
		} else {
			GIDFlagName = fmt.Sprintf("%v.GID", cmdPrefix)
		}

		GIDFlagValue, err := cmd.Flags().GetString(GIDFlagName)
		if err != nil {
			return err, false
		}
		m.GID = GIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecSecretsItems0FileModeFlags(depth int, m *models.TaskSpecContainerSpecSecretsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ModeFlagName := fmt.Sprintf("%v.Mode", cmdPrefix)
	if cmd.Flags().Changed(ModeFlagName) {

		// warning: primitive Mode uint32 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecSecretsItems0FileNameFlags(depth int, m *models.TaskSpecContainerSpecSecretsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecSecretsItems0FileUIDFlags(depth int, m *models.TaskSpecContainerSpecSecretsItems0File, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UIDFlagName := fmt.Sprintf("%v.UID", cmdPrefix)
	if cmd.Flags().Changed(UIDFlagName) {

		var UIDFlagName string
		if cmdPrefix == "" {
			UIDFlagName = "UID"
		} else {
			UIDFlagName = fmt.Sprintf("%v.UID", cmdPrefix)
		}

		UIDFlagValue, err := cmd.Flags().GetString(UIDFlagName)
		if err != nil {
			return err, false
		}
		m.UID = UIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecLogDriver

// register flags to command
func registerModelTaskSpecLogDriverFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecLogDriverName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecLogDriverOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecLogDriverName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := ``

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerTaskSpecLogDriverOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecLogDriverFlags(depth int, m *models.TaskSpecLogDriver, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveTaskSpecLogDriverNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OptionsAdded := retrieveTaskSpecLogDriverOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	return nil, retAdded
}

func retrieveTaskSpecLogDriverNameFlags(depth int, m *models.TaskSpecLogDriver, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecLogDriverOptionsFlags(depth int, m *models.TaskSpecLogDriver, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecNetworkAttachmentSpec

// register flags to command
func registerModelTaskSpecNetworkAttachmentSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecNetworkAttachmentSpecContainerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecNetworkAttachmentSpecContainerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ContainerIDDescription := `ID of the container represented by this task`

	var ContainerIDFlagName string
	if cmdPrefix == "" {
		ContainerIDFlagName = "ContainerID"
	} else {
		ContainerIDFlagName = fmt.Sprintf("%v.ContainerID", cmdPrefix)
	}

	var ContainerIDFlagDefault string

	_ = cmd.PersistentFlags().String(ContainerIDFlagName, ContainerIDFlagDefault, ContainerIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecNetworkAttachmentSpecFlags(depth int, m *models.TaskSpecNetworkAttachmentSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ContainerIDAdded := retrieveTaskSpecNetworkAttachmentSpecContainerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainerIDAdded

	return nil, retAdded
}

func retrieveTaskSpecNetworkAttachmentSpecContainerIDFlags(depth int, m *models.TaskSpecNetworkAttachmentSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ContainerIDFlagName := fmt.Sprintf("%v.ContainerID", cmdPrefix)
	if cmd.Flags().Changed(ContainerIDFlagName) {

		var ContainerIDFlagName string
		if cmdPrefix == "" {
			ContainerIDFlagName = "ContainerID"
		} else {
			ContainerIDFlagName = fmt.Sprintf("%v.ContainerID", cmdPrefix)
		}

		ContainerIDFlagValue, err := cmd.Flags().GetString(ContainerIDFlagName)
		if err != nil {
			return err, false
		}
		m.ContainerID = ContainerIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecPlacement

// register flags to command
func registerModelTaskSpecPlacementFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecPlacementConstraints(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPlacementMaxReplicas(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPlacementPlatforms(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPlacementPreferences(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecPlacementConstraints(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Constraints []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecPlacementMaxReplicas(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MaxReplicasDescription := `Maximum number of replicas for per node (default value is 0, which is unlimited)`

	var MaxReplicasFlagName string
	if cmdPrefix == "" {
		MaxReplicasFlagName = "MaxReplicas"
	} else {
		MaxReplicasFlagName = fmt.Sprintf("%v.MaxReplicas", cmdPrefix)
	}

	var MaxReplicasFlagDefault int64

	_ = cmd.PersistentFlags().Int64(MaxReplicasFlagName, MaxReplicasFlagDefault, MaxReplicasDescription)

	return nil
}

func registerTaskSpecPlacementPlatforms(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Platforms []*Platform array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecPlacementPreferences(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Preferences []*TaskSpecPlacementPreferencesItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecPlacementFlags(depth int, m *models.TaskSpecPlacement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ConstraintsAdded := retrieveTaskSpecPlacementConstraintsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConstraintsAdded

	err, MaxReplicasAdded := retrieveTaskSpecPlacementMaxReplicasFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxReplicasAdded

	err, PlatformsAdded := retrieveTaskSpecPlacementPlatformsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlatformsAdded

	err, PreferencesAdded := retrieveTaskSpecPlacementPreferencesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PreferencesAdded

	return nil, retAdded
}

func retrieveTaskSpecPlacementConstraintsFlags(depth int, m *models.TaskSpecPlacement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConstraintsFlagName := fmt.Sprintf("%v.Constraints", cmdPrefix)
	if cmd.Flags().Changed(ConstraintsFlagName) {
		// warning: Constraints array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecPlacementMaxReplicasFlags(depth int, m *models.TaskSpecPlacement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MaxReplicasFlagName := fmt.Sprintf("%v.MaxReplicas", cmdPrefix)
	if cmd.Flags().Changed(MaxReplicasFlagName) {

		var MaxReplicasFlagName string
		if cmdPrefix == "" {
			MaxReplicasFlagName = "MaxReplicas"
		} else {
			MaxReplicasFlagName = fmt.Sprintf("%v.MaxReplicas", cmdPrefix)
		}

		MaxReplicasFlagValue, err := cmd.Flags().GetInt64(MaxReplicasFlagName)
		if err != nil {
			return err, false
		}
		m.MaxReplicas = MaxReplicasFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecPlacementPlatformsFlags(depth int, m *models.TaskSpecPlacement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PlatformsFlagName := fmt.Sprintf("%v.Platforms", cmdPrefix)
	if cmd.Flags().Changed(PlatformsFlagName) {
		// warning: Platforms array type []*Platform is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecPlacementPreferencesFlags(depth int, m *models.TaskSpecPlacement, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PreferencesFlagName := fmt.Sprintf("%v.Preferences", cmdPrefix)
	if cmd.Flags().Changed(PreferencesFlagName) {
		// warning: Preferences array type []*TaskSpecPlacementPreferencesItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecPlacementPreferencesItems0

// register flags to command
func registerModelTaskSpecPlacementPreferencesItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecPlacementPreferencesItems0Spread(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecPlacementPreferencesItems0Spread(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var SpreadFlagName string
	if cmdPrefix == "" {
		SpreadFlagName = "Spread"
	} else {
		SpreadFlagName = fmt.Sprintf("%v.Spread", cmdPrefix)
	}

	if err := registerModelTaskSpecPlacementPreferencesItems0SpreadFlags(depth+1, SpreadFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecPlacementPreferencesItems0Flags(depth int, m *models.TaskSpecPlacementPreferencesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SpreadAdded := retrieveTaskSpecPlacementPreferencesItems0SpreadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpreadAdded

	return nil, retAdded
}

func retrieveTaskSpecPlacementPreferencesItems0SpreadFlags(depth int, m *models.TaskSpecPlacementPreferencesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SpreadFlagName := fmt.Sprintf("%v.Spread", cmdPrefix)
	if cmd.Flags().Changed(SpreadFlagName) {
		// info: complex object Spread TaskSpecPlacementPreferencesItems0Spread is retrieved outside this Changed() block
	}
	SpreadFlagValue := m.Spread
	if swag.IsZero(SpreadFlagValue) {
		SpreadFlagValue = &models.TaskSpecPlacementPreferencesItems0Spread{}
	}

	err, SpreadAdded := retrieveModelTaskSpecPlacementPreferencesItems0SpreadFlags(depth+1, SpreadFlagValue, SpreadFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpreadAdded
	if SpreadAdded {
		m.Spread = SpreadFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecPlacementPreferencesItems0Spread

// register flags to command
func registerModelTaskSpecPlacementPreferencesItems0SpreadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecPlacementPreferencesItems0SpreadSpreadDescriptor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecPlacementPreferencesItems0SpreadSpreadDescriptor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SpreadDescriptorDescription := `label descriptor, such as engine.labels.az`

	var SpreadDescriptorFlagName string
	if cmdPrefix == "" {
		SpreadDescriptorFlagName = "SpreadDescriptor"
	} else {
		SpreadDescriptorFlagName = fmt.Sprintf("%v.SpreadDescriptor", cmdPrefix)
	}

	var SpreadDescriptorFlagDefault string

	_ = cmd.PersistentFlags().String(SpreadDescriptorFlagName, SpreadDescriptorFlagDefault, SpreadDescriptorDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecPlacementPreferencesItems0SpreadFlags(depth int, m *models.TaskSpecPlacementPreferencesItems0Spread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SpreadDescriptorAdded := retrieveTaskSpecPlacementPreferencesItems0SpreadSpreadDescriptorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpreadDescriptorAdded

	return nil, retAdded
}

func retrieveTaskSpecPlacementPreferencesItems0SpreadSpreadDescriptorFlags(depth int, m *models.TaskSpecPlacementPreferencesItems0Spread, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SpreadDescriptorFlagName := fmt.Sprintf("%v.SpreadDescriptor", cmdPrefix)
	if cmd.Flags().Changed(SpreadDescriptorFlagName) {

		var SpreadDescriptorFlagName string
		if cmdPrefix == "" {
			SpreadDescriptorFlagName = "SpreadDescriptor"
		} else {
			SpreadDescriptorFlagName = fmt.Sprintf("%v.SpreadDescriptor", cmdPrefix)
		}

		SpreadDescriptorFlagValue, err := cmd.Flags().GetString(SpreadDescriptorFlagName)
		if err != nil {
			return err, false
		}
		m.SpreadDescriptor = SpreadDescriptorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecPluginSpec

// register flags to command
func registerModelTaskSpecPluginSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecPluginSpecDisabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPluginSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPluginSpecPluginPrivilege(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPluginSpecRemote(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecPluginSpecDisabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DisabledDescription := `Disable the plugin once scheduled.`

	var DisabledFlagName string
	if cmdPrefix == "" {
		DisabledFlagName = "Disabled"
	} else {
		DisabledFlagName = fmt.Sprintf("%v.Disabled", cmdPrefix)
	}

	var DisabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(DisabledFlagName, DisabledFlagDefault, DisabledDescription)

	return nil
}

func registerTaskSpecPluginSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `The name or 'alias' to use for the plugin.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerTaskSpecPluginSpecPluginPrivilege(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: PluginPrivilege []*TaskSpecPluginSpecPluginPrivilegeItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecPluginSpecRemote(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RemoteDescription := `The plugin image reference to use.`

	var RemoteFlagName string
	if cmdPrefix == "" {
		RemoteFlagName = "Remote"
	} else {
		RemoteFlagName = fmt.Sprintf("%v.Remote", cmdPrefix)
	}

	var RemoteFlagDefault string

	_ = cmd.PersistentFlags().String(RemoteFlagName, RemoteFlagDefault, RemoteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecPluginSpecFlags(depth int, m *models.TaskSpecPluginSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DisabledAdded := retrieveTaskSpecPluginSpecDisabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DisabledAdded

	err, NameAdded := retrieveTaskSpecPluginSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, PluginPrivilegeAdded := retrieveTaskSpecPluginSpecPluginPrivilegeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PluginPrivilegeAdded

	err, RemoteAdded := retrieveTaskSpecPluginSpecRemoteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RemoteAdded

	return nil, retAdded
}

func retrieveTaskSpecPluginSpecDisabledFlags(depth int, m *models.TaskSpecPluginSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DisabledFlagName := fmt.Sprintf("%v.Disabled", cmdPrefix)
	if cmd.Flags().Changed(DisabledFlagName) {

		var DisabledFlagName string
		if cmdPrefix == "" {
			DisabledFlagName = "Disabled"
		} else {
			DisabledFlagName = fmt.Sprintf("%v.Disabled", cmdPrefix)
		}

		DisabledFlagValue, err := cmd.Flags().GetBool(DisabledFlagName)
		if err != nil {
			return err, false
		}
		m.Disabled = DisabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecPluginSpecNameFlags(depth int, m *models.TaskSpecPluginSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecPluginSpecPluginPrivilegeFlags(depth int, m *models.TaskSpecPluginSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PluginPrivilegeFlagName := fmt.Sprintf("%v.PluginPrivilege", cmdPrefix)
	if cmd.Flags().Changed(PluginPrivilegeFlagName) {
		// warning: PluginPrivilege array type []*TaskSpecPluginSpecPluginPrivilegeItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskSpecPluginSpecRemoteFlags(depth int, m *models.TaskSpecPluginSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RemoteFlagName := fmt.Sprintf("%v.Remote", cmdPrefix)
	if cmd.Flags().Changed(RemoteFlagName) {

		var RemoteFlagName string
		if cmdPrefix == "" {
			RemoteFlagName = "Remote"
		} else {
			RemoteFlagName = fmt.Sprintf("%v.Remote", cmdPrefix)
		}

		RemoteFlagValue, err := cmd.Flags().GetString(RemoteFlagName)
		if err != nil {
			return err, false
		}
		m.Remote = RemoteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecPluginSpecPluginPrivilegeItems0

// register flags to command
func registerModelTaskSpecPluginSpecPluginPrivilegeItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecPluginSpecPluginPrivilegeItems0Description(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPluginSpecPluginPrivilegeItems0Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPluginSpecPluginPrivilegeItems0Value(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecPluginSpecPluginPrivilegeItems0Description(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := ``

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "Description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerTaskSpecPluginSpecPluginPrivilegeItems0Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := ``

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerTaskSpecPluginSpecPluginPrivilegeItems0Value(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Value []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecPluginSpecPluginPrivilegeItems0Flags(depth int, m *models.TaskSpecPluginSpecPluginPrivilegeItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptionAdded := retrieveTaskSpecPluginSpecPluginPrivilegeItems0DescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, NameAdded := retrieveTaskSpecPluginSpecPluginPrivilegeItems0NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, ValueAdded := retrieveTaskSpecPluginSpecPluginPrivilegeItems0ValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValueAdded

	return nil, retAdded
}

func retrieveTaskSpecPluginSpecPluginPrivilegeItems0DescriptionFlags(depth int, m *models.TaskSpecPluginSpecPluginPrivilegeItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "Description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecPluginSpecPluginPrivilegeItems0NameFlags(depth int, m *models.TaskSpecPluginSpecPluginPrivilegeItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecPluginSpecPluginPrivilegeItems0ValueFlags(depth int, m *models.TaskSpecPluginSpecPluginPrivilegeItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ValueFlagName := fmt.Sprintf("%v.Value", cmdPrefix)
	if cmd.Flags().Changed(ValueFlagName) {
		// warning: Value array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecResources

// register flags to command
func registerModelTaskSpecResourcesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecResourcesLimits(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecResourcesReservation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecResourcesLimits(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var LimitsFlagName string
	if cmdPrefix == "" {
		LimitsFlagName = "Limits"
	} else {
		LimitsFlagName = fmt.Sprintf("%v.Limits", cmdPrefix)
	}

	if err := registerModelResourceObjectFlags(depth+1, LimitsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecResourcesReservation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ReservationFlagName string
	if cmdPrefix == "" {
		ReservationFlagName = "Reservation"
	} else {
		ReservationFlagName = fmt.Sprintf("%v.Reservation", cmdPrefix)
	}

	if err := registerModelResourceObjectFlags(depth+1, ReservationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecResourcesFlags(depth int, m *models.TaskSpecResources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LimitsAdded := retrieveTaskSpecResourcesLimitsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LimitsAdded

	err, ReservationAdded := retrieveTaskSpecResourcesReservationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReservationAdded

	return nil, retAdded
}

func retrieveTaskSpecResourcesLimitsFlags(depth int, m *models.TaskSpecResources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LimitsFlagName := fmt.Sprintf("%v.Limits", cmdPrefix)
	if cmd.Flags().Changed(LimitsFlagName) {
		// info: complex object Limits ResourceObject is retrieved outside this Changed() block
	}
	LimitsFlagValue := m.Limits
	if swag.IsZero(LimitsFlagValue) {
		LimitsFlagValue = &models.ResourceObject{}
	}

	err, LimitsAdded := retrieveModelResourceObjectFlags(depth+1, LimitsFlagValue, LimitsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LimitsAdded
	if LimitsAdded {
		m.Limits = LimitsFlagValue
	}

	return nil, retAdded
}

func retrieveTaskSpecResourcesReservationFlags(depth int, m *models.TaskSpecResources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ReservationFlagName := fmt.Sprintf("%v.Reservation", cmdPrefix)
	if cmd.Flags().Changed(ReservationFlagName) {
		// info: complex object Reservation ResourceObject is retrieved outside this Changed() block
	}
	ReservationFlagValue := m.Reservation
	if swag.IsZero(ReservationFlagValue) {
		ReservationFlagValue = &models.ResourceObject{}
	}

	err, ReservationAdded := retrieveModelResourceObjectFlags(depth+1, ReservationFlagValue, ReservationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReservationAdded
	if ReservationAdded {
		m.Reservation = ReservationFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for TaskSpecRestartPolicy

// register flags to command
func registerModelTaskSpecRestartPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecRestartPolicyCondition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecRestartPolicyDelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecRestartPolicyMaxAttempts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecRestartPolicyWindow(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecRestartPolicyCondition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ConditionDescription := `Enum: ["none","on-failure","any"]. Condition for restart.`

	var ConditionFlagName string
	if cmdPrefix == "" {
		ConditionFlagName = "Condition"
	} else {
		ConditionFlagName = fmt.Sprintf("%v.Condition", cmdPrefix)
	}

	var ConditionFlagDefault string

	_ = cmd.PersistentFlags().String(ConditionFlagName, ConditionFlagDefault, ConditionDescription)

	if err := cmd.RegisterFlagCompletionFunc(ConditionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["none","on-failure","any"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecRestartPolicyDelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DelayDescription := `Delay between restart attempts.`

	var DelayFlagName string
	if cmdPrefix == "" {
		DelayFlagName = "Delay"
	} else {
		DelayFlagName = fmt.Sprintf("%v.Delay", cmdPrefix)
	}

	var DelayFlagDefault int64

	_ = cmd.PersistentFlags().Int64(DelayFlagName, DelayFlagDefault, DelayDescription)

	return nil
}

func registerTaskSpecRestartPolicyMaxAttempts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MaxAttemptsDescription := `Maximum attempts to restart a given container before giving up (default value is 0, which is ignored).`

	var MaxAttemptsFlagName string
	if cmdPrefix == "" {
		MaxAttemptsFlagName = "MaxAttempts"
	} else {
		MaxAttemptsFlagName = fmt.Sprintf("%v.MaxAttempts", cmdPrefix)
	}

	var MaxAttemptsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(MaxAttemptsFlagName, MaxAttemptsFlagDefault, MaxAttemptsDescription)

	return nil
}

func registerTaskSpecRestartPolicyWindow(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	WindowDescription := `Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded).`

	var WindowFlagName string
	if cmdPrefix == "" {
		WindowFlagName = "Window"
	} else {
		WindowFlagName = fmt.Sprintf("%v.Window", cmdPrefix)
	}

	var WindowFlagDefault int64

	_ = cmd.PersistentFlags().Int64(WindowFlagName, WindowFlagDefault, WindowDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecRestartPolicyFlags(depth int, m *models.TaskSpecRestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ConditionAdded := retrieveTaskSpecRestartPolicyConditionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConditionAdded

	err, DelayAdded := retrieveTaskSpecRestartPolicyDelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DelayAdded

	err, MaxAttemptsAdded := retrieveTaskSpecRestartPolicyMaxAttemptsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaxAttemptsAdded

	err, WindowAdded := retrieveTaskSpecRestartPolicyWindowFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WindowAdded

	return nil, retAdded
}

func retrieveTaskSpecRestartPolicyConditionFlags(depth int, m *models.TaskSpecRestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConditionFlagName := fmt.Sprintf("%v.Condition", cmdPrefix)
	if cmd.Flags().Changed(ConditionFlagName) {

		var ConditionFlagName string
		if cmdPrefix == "" {
			ConditionFlagName = "Condition"
		} else {
			ConditionFlagName = fmt.Sprintf("%v.Condition", cmdPrefix)
		}

		ConditionFlagValue, err := cmd.Flags().GetString(ConditionFlagName)
		if err != nil {
			return err, false
		}
		m.Condition = ConditionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecRestartPolicyDelayFlags(depth int, m *models.TaskSpecRestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DelayFlagName := fmt.Sprintf("%v.Delay", cmdPrefix)
	if cmd.Flags().Changed(DelayFlagName) {

		var DelayFlagName string
		if cmdPrefix == "" {
			DelayFlagName = "Delay"
		} else {
			DelayFlagName = fmt.Sprintf("%v.Delay", cmdPrefix)
		}

		DelayFlagValue, err := cmd.Flags().GetInt64(DelayFlagName)
		if err != nil {
			return err, false
		}
		m.Delay = DelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecRestartPolicyMaxAttemptsFlags(depth int, m *models.TaskSpecRestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MaxAttemptsFlagName := fmt.Sprintf("%v.MaxAttempts", cmdPrefix)
	if cmd.Flags().Changed(MaxAttemptsFlagName) {

		var MaxAttemptsFlagName string
		if cmdPrefix == "" {
			MaxAttemptsFlagName = "MaxAttempts"
		} else {
			MaxAttemptsFlagName = fmt.Sprintf("%v.MaxAttempts", cmdPrefix)
		}

		MaxAttemptsFlagValue, err := cmd.Flags().GetInt64(MaxAttemptsFlagName)
		if err != nil {
			return err, false
		}
		m.MaxAttempts = MaxAttemptsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskSpecRestartPolicyWindowFlags(depth int, m *models.TaskSpecRestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	WindowFlagName := fmt.Sprintf("%v.Window", cmdPrefix)
	if cmd.Flags().Changed(WindowFlagName) {

		var WindowFlagName string
		if cmdPrefix == "" {
			WindowFlagName = "Window"
		} else {
			WindowFlagName = fmt.Sprintf("%v.Window", cmdPrefix)
		}

		WindowFlagValue, err := cmd.Flags().GetInt64(WindowFlagName)
		if err != nil {
			return err, false
		}
		m.Window = WindowFlagValue

		retAdded = true
	}

	return nil, retAdded
}
