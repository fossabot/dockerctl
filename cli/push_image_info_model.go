// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for PushImageInfo

// register flags to command
func registerModelPushImageInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPushImageInfoError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPushImageInfoProgress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPushImageInfoProgressDetail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPushImageInfoStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPushImageInfoError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ErrorDescription := ``

	var ErrorFlagName string
	if cmdPrefix == "" {
		ErrorFlagName = "error"
	} else {
		ErrorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	var ErrorFlagDefault string

	_ = cmd.PersistentFlags().String(ErrorFlagName, ErrorFlagDefault, ErrorDescription)

	return nil
}

func registerPushImageInfoProgress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ProgressDescription := ``

	var ProgressFlagName string
	if cmdPrefix == "" {
		ProgressFlagName = "progress"
	} else {
		ProgressFlagName = fmt.Sprintf("%v.progress", cmdPrefix)
	}

	var ProgressFlagDefault string

	_ = cmd.PersistentFlags().String(ProgressFlagName, ProgressFlagDefault, ProgressDescription)

	return nil
}

func registerPushImageInfoProgressDetail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ProgressDetailFlagName string
	if cmdPrefix == "" {
		ProgressDetailFlagName = "progressDetail"
	} else {
		ProgressDetailFlagName = fmt.Sprintf("%v.progressDetail", cmdPrefix)
	}

	if err := registerModelProgressDetailFlags(depth+1, ProgressDetailFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPushImageInfoStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StatusDescription := ``

	var StatusFlagName string
	if cmdPrefix == "" {
		StatusFlagName = "status"
	} else {
		StatusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var StatusFlagDefault string

	_ = cmd.PersistentFlags().String(StatusFlagName, StatusFlagDefault, StatusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPushImageInfoFlags(depth int, m *models.PushImageInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ErrorAdded := retrievePushImageInfoErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded

	err, ProgressAdded := retrievePushImageInfoProgressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProgressAdded

	err, ProgressDetailAdded := retrievePushImageInfoProgressDetailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProgressDetailAdded

	err, StatusAdded := retrievePushImageInfoStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	return nil, retAdded
}

func retrievePushImageInfoErrorFlags(depth int, m *models.PushImageInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ErrorFlagName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(ErrorFlagName) {

		var ErrorFlagName string
		if cmdPrefix == "" {
			ErrorFlagName = "error"
		} else {
			ErrorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
		}

		ErrorFlagValue, err := cmd.Flags().GetString(ErrorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = ErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePushImageInfoProgressFlags(depth int, m *models.PushImageInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ProgressFlagName := fmt.Sprintf("%v.progress", cmdPrefix)
	if cmd.Flags().Changed(ProgressFlagName) {

		var ProgressFlagName string
		if cmdPrefix == "" {
			ProgressFlagName = "progress"
		} else {
			ProgressFlagName = fmt.Sprintf("%v.progress", cmdPrefix)
		}

		ProgressFlagValue, err := cmd.Flags().GetString(ProgressFlagName)
		if err != nil {
			return err, false
		}
		m.Progress = ProgressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePushImageInfoProgressDetailFlags(depth int, m *models.PushImageInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ProgressDetailFlagName := fmt.Sprintf("%v.progressDetail", cmdPrefix)
	if cmd.Flags().Changed(ProgressDetailFlagName) {
		// info: complex object progressDetail ProgressDetail is retrieved outside this Changed() block
	}
	ProgressDetailFlagValue := m.ProgressDetail
	if swag.IsZero(ProgressDetailFlagValue) {
		ProgressDetailFlagValue = &models.ProgressDetail{}
	}

	err, ProgressDetailAdded := retrieveModelProgressDetailFlags(depth+1, ProgressDetailFlagValue, ProgressDetailFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProgressDetailAdded
	if ProgressDetailAdded {
		m.ProgressDetail = ProgressDetailFlagValue
	}

	return nil, retAdded
}

func retrievePushImageInfoStatusFlags(depth int, m *models.PushImageInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StatusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(StatusFlagName) {

		var StatusFlagName string
		if cmdPrefix == "" {
			StatusFlagName = "status"
		} else {
			StatusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		StatusFlagValue, err := cmd.Flags().GetString(StatusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = StatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
