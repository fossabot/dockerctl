// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/image"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationImageImageHistoryCmd returns a cmd to handle operation imageHistory
func makeOperationImageImageHistoryCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ImageHistory",
		Short: `Return parent layers of an image.`,
		RunE:  runOperationImageImageHistory,
	}

	if err := registerOperationImageImageHistoryParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationImageImageHistory uses cmd flags to call endpoint api
func runOperationImageImageHistory(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := image.NewImageHistoryParams()
	if err, _ := retrieveOperationImageImageHistoryNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationImageImageHistoryResult(appCli.Image.ImageHistory(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationImageImageHistoryParamFlags registers all flags needed to fill params
func registerOperationImageImageHistoryParamFlags(cmd *cobra.Command) error {
	if err := registerOperationImageImageHistoryNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationImageImageHistoryNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	NameDescription := `Required. Image name or ID`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "name"
	} else {
		NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func retrieveOperationImageImageHistoryNameFlag(m *image.ImageHistoryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "name"
		} else {
			NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

	}
	return nil, retAdded
}

// parseOperationImageImageHistoryResult parses request result and return the string content
func parseOperationImageImageHistoryResult(resp0 *image.ImageHistoryOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*image.ImageHistoryOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*image.ImageHistoryNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*image.ImageHistoryInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelHistoryResponseItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHistoryResponseItemComment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHistoryResponseItemCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHistoryResponseItemCreatedBy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHistoryResponseItemID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHistoryResponseItemSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHistoryResponseItemTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHistoryResponseItemComment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CommentDescription := `Required. `

	var CommentFlagName string
	if cmdPrefix == "" {
		CommentFlagName = "Comment"
	} else {
		CommentFlagName = fmt.Sprintf("%v.Comment", cmdPrefix)
	}

	var CommentFlagDefault string

	_ = cmd.PersistentFlags().String(CommentFlagName, CommentFlagDefault, CommentDescription)

	return nil
}

func registerHistoryResponseItemCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedDescription := `Required. `

	var CreatedFlagName string
	if cmdPrefix == "" {
		CreatedFlagName = "Created"
	} else {
		CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
	}

	var CreatedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CreatedFlagName, CreatedFlagDefault, CreatedDescription)

	return nil
}

func registerHistoryResponseItemCreatedBy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedByDescription := `Required. `

	var CreatedByFlagName string
	if cmdPrefix == "" {
		CreatedByFlagName = "CreatedBy"
	} else {
		CreatedByFlagName = fmt.Sprintf("%v.CreatedBy", cmdPrefix)
	}

	var CreatedByFlagDefault string

	_ = cmd.PersistentFlags().String(CreatedByFlagName, CreatedByFlagDefault, CreatedByDescription)

	return nil
}

func registerHistoryResponseItemID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := `Required. `

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "Id"
	} else {
		IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerHistoryResponseItemSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeDescription := `Required. `

	var SizeFlagName string
	if cmdPrefix == "" {
		SizeFlagName = "Size"
	} else {
		SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
	}

	var SizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SizeFlagName, SizeFlagDefault, SizeDescription)

	return nil
}

func registerHistoryResponseItemTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Tags []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHistoryResponseItemFlags(depth int, m *image.HistoryResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CommentAdded := retrieveHistoryResponseItemCommentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CommentAdded

	err, CreatedAdded := retrieveHistoryResponseItemCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAdded

	err, CreatedByAdded := retrieveHistoryResponseItemCreatedByFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedByAdded

	err, IDAdded := retrieveHistoryResponseItemIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, SizeAdded := retrieveHistoryResponseItemSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	err, TagsAdded := retrieveHistoryResponseItemTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TagsAdded

	return nil, retAdded
}

func retrieveHistoryResponseItemCommentFlags(depth int, m *image.HistoryResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CommentFlagName := fmt.Sprintf("%v.Comment", cmdPrefix)
	if cmd.Flags().Changed(CommentFlagName) {

		var CommentFlagName string
		if cmdPrefix == "" {
			CommentFlagName = "Comment"
		} else {
			CommentFlagName = fmt.Sprintf("%v.Comment", cmdPrefix)
		}

		CommentFlagValue, err := cmd.Flags().GetString(CommentFlagName)
		if err != nil {
			return err, false
		}
		m.Comment = CommentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHistoryResponseItemCreatedFlags(depth int, m *image.HistoryResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedFlagName := fmt.Sprintf("%v.Created", cmdPrefix)
	if cmd.Flags().Changed(CreatedFlagName) {

		var CreatedFlagName string
		if cmdPrefix == "" {
			CreatedFlagName = "Created"
		} else {
			CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
		}

		CreatedFlagValue, err := cmd.Flags().GetInt64(CreatedFlagName)
		if err != nil {
			return err, false
		}
		m.Created = CreatedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHistoryResponseItemCreatedByFlags(depth int, m *image.HistoryResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedByFlagName := fmt.Sprintf("%v.CreatedBy", cmdPrefix)
	if cmd.Flags().Changed(CreatedByFlagName) {

		var CreatedByFlagName string
		if cmdPrefix == "" {
			CreatedByFlagName = "CreatedBy"
		} else {
			CreatedByFlagName = fmt.Sprintf("%v.CreatedBy", cmdPrefix)
		}

		CreatedByFlagValue, err := cmd.Flags().GetString(CreatedByFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedBy = CreatedByFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHistoryResponseItemIDFlags(depth int, m *image.HistoryResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "Id"
		} else {
			IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHistoryResponseItemSizeFlags(depth int, m *image.HistoryResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeFlagName := fmt.Sprintf("%v.Size", cmdPrefix)
	if cmd.Flags().Changed(SizeFlagName) {

		var SizeFlagName string
		if cmdPrefix == "" {
			SizeFlagName = "Size"
		} else {
			SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
		}

		SizeFlagValue, err := cmd.Flags().GetInt64(SizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = SizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHistoryResponseItemTagsFlags(depth int, m *image.HistoryResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TagsFlagName := fmt.Sprintf("%v.Tags", cmdPrefix)
	if cmd.Flags().Changed(TagsFlagName) {
		// warning: Tags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
