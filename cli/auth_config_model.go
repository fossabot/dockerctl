// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for AuthConfig

// register flags to command
func registerModelAuthConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAuthConfigEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthConfigPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthConfigServeraddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthConfigUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAuthConfigEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	EmailDescription := ``

	var EmailFlagName string
	if cmdPrefix == "" {
		EmailFlagName = "email"
	} else {
		EmailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var EmailFlagDefault string

	_ = cmd.PersistentFlags().String(EmailFlagName, EmailFlagDefault, EmailDescription)

	return nil
}

func registerAuthConfigPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PasswordDescription := ``

	var PasswordFlagName string
	if cmdPrefix == "" {
		PasswordFlagName = "password"
	} else {
		PasswordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var PasswordFlagDefault string

	_ = cmd.PersistentFlags().String(PasswordFlagName, PasswordFlagDefault, PasswordDescription)

	return nil
}

func registerAuthConfigServeraddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ServeraddressDescription := ``

	var ServeraddressFlagName string
	if cmdPrefix == "" {
		ServeraddressFlagName = "serveraddress"
	} else {
		ServeraddressFlagName = fmt.Sprintf("%v.serveraddress", cmdPrefix)
	}

	var ServeraddressFlagDefault string

	_ = cmd.PersistentFlags().String(ServeraddressFlagName, ServeraddressFlagDefault, ServeraddressDescription)

	return nil
}

func registerAuthConfigUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UsernameDescription := ``

	var UsernameFlagName string
	if cmdPrefix == "" {
		UsernameFlagName = "username"
	} else {
		UsernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var UsernameFlagDefault string

	_ = cmd.PersistentFlags().String(UsernameFlagName, UsernameFlagDefault, UsernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAuthConfigFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EmailAdded := retrieveAuthConfigEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EmailAdded

	err, PasswordAdded := retrieveAuthConfigPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PasswordAdded

	err, ServeraddressAdded := retrieveAuthConfigServeraddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ServeraddressAdded

	err, UsernameAdded := retrieveAuthConfigUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsernameAdded

	return nil, retAdded
}

func retrieveAuthConfigEmailFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EmailFlagName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(EmailFlagName) {

		var EmailFlagName string
		if cmdPrefix == "" {
			EmailFlagName = "email"
		} else {
			EmailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		EmailFlagValue, err := cmd.Flags().GetString(EmailFlagName)
		if err != nil {
			return err, false
		}
		m.Email = EmailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthConfigPasswordFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PasswordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(PasswordFlagName) {

		var PasswordFlagName string
		if cmdPrefix == "" {
			PasswordFlagName = "password"
		} else {
			PasswordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		PasswordFlagValue, err := cmd.Flags().GetString(PasswordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = PasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthConfigServeraddressFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ServeraddressFlagName := fmt.Sprintf("%v.serveraddress", cmdPrefix)
	if cmd.Flags().Changed(ServeraddressFlagName) {

		var ServeraddressFlagName string
		if cmdPrefix == "" {
			ServeraddressFlagName = "serveraddress"
		} else {
			ServeraddressFlagName = fmt.Sprintf("%v.serveraddress", cmdPrefix)
		}

		ServeraddressFlagValue, err := cmd.Flags().GetString(ServeraddressFlagName)
		if err != nil {
			return err, false
		}
		m.Serveraddress = ServeraddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthConfigUsernameFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UsernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(UsernameFlagName) {

		var UsernameFlagName string
		if cmdPrefix == "" {
			UsernameFlagName = "username"
		} else {
			UsernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		UsernameFlagValue, err := cmd.Flags().GetString(UsernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = UsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
