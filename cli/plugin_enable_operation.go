// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/plugin"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPluginPluginEnableCmd returns a cmd to handle operation pluginEnable
func makeOperationPluginPluginEnableCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PluginEnable",
		Short: ``,
		RunE:  runOperationPluginPluginEnable,
	}

	if err := registerOperationPluginPluginEnableParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPluginPluginEnable uses cmd flags to call endpoint api
func runOperationPluginPluginEnable(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := plugin.NewPluginEnableParams()
	if err, _ := retrieveOperationPluginPluginEnableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPluginPluginEnableTimeoutFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPluginPluginEnableResult(appCli.Plugin.PluginEnable(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationPluginPluginEnableParamFlags registers all flags needed to fill params
func registerOperationPluginPluginEnableParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPluginPluginEnableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPluginPluginEnableTimeoutParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPluginPluginEnableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	NameDescription := `Required. The name of the plugin. The ` + "`" + `:latest` + "`" + ` tag is optional, and is the default if omitted.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "name"
	} else {
		NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}
func registerOperationPluginPluginEnableTimeoutParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	TimeoutDescription := `Set the HTTP client timeout (in seconds)`

	var TimeoutFlagName string
	if cmdPrefix == "" {
		TimeoutFlagName = "timeout"
	} else {
		TimeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
	}

	var TimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(TimeoutFlagName, TimeoutFlagDefault, TimeoutDescription)

	return nil
}

func retrieveOperationPluginPluginEnableNameFlag(m *plugin.PluginEnableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "name"
		} else {
			NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPluginPluginEnableTimeoutFlag(m *plugin.PluginEnableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("timeout") {

		var TimeoutFlagName string
		if cmdPrefix == "" {
			TimeoutFlagName = "timeout"
		} else {
			TimeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
		}

		TimeoutFlagValue, err := cmd.Flags().GetInt64(TimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.Timeout = &TimeoutFlagValue

	}
	return nil, retAdded
}

// parseOperationPluginPluginEnableResult parses request result and return the string content
func parseOperationPluginPluginEnableResult(resp0 *plugin.PluginEnableOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning pluginEnableOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*plugin.PluginEnableNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*plugin.PluginEnableInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response pluginEnableOK is not supported by go-swagger cli yet.

	return "", nil
}
