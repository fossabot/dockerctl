// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for BuildCache

// register flags to command
func registerModelBuildCacheFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBuildCacheCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheInUse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheLastUsedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheParent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheShared(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheUsageCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuildCacheCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedAtDescription := ``

	var CreatedAtFlagName string
	if cmdPrefix == "" {
		CreatedAtFlagName = "CreatedAt"
	} else {
		CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	var CreatedAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CreatedAtFlagName, CreatedAtFlagDefault, CreatedAtDescription)

	return nil
}

func registerBuildCacheDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := ``

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "Description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerBuildCacheID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := ``

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "ID"
	} else {
		IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerBuildCacheInUse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	InUseDescription := ``

	var InUseFlagName string
	if cmdPrefix == "" {
		InUseFlagName = "InUse"
	} else {
		InUseFlagName = fmt.Sprintf("%v.InUse", cmdPrefix)
	}

	var InUseFlagDefault bool

	_ = cmd.PersistentFlags().Bool(InUseFlagName, InUseFlagDefault, InUseDescription)

	return nil
}

func registerBuildCacheLastUsedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	LastUsedAtDescription := ``

	var LastUsedAtFlagName string
	if cmdPrefix == "" {
		LastUsedAtFlagName = "LastUsedAt"
	} else {
		LastUsedAtFlagName = fmt.Sprintf("%v.LastUsedAt", cmdPrefix)
	}

	var LastUsedAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(LastUsedAtFlagName, LastUsedAtFlagDefault, LastUsedAtDescription)

	return nil
}

func registerBuildCacheParent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ParentDescription := ``

	var ParentFlagName string
	if cmdPrefix == "" {
		ParentFlagName = "Parent"
	} else {
		ParentFlagName = fmt.Sprintf("%v.Parent", cmdPrefix)
	}

	var ParentFlagDefault string

	_ = cmd.PersistentFlags().String(ParentFlagName, ParentFlagDefault, ParentDescription)

	return nil
}

func registerBuildCacheShared(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SharedDescription := ``

	var SharedFlagName string
	if cmdPrefix == "" {
		SharedFlagName = "Shared"
	} else {
		SharedFlagName = fmt.Sprintf("%v.Shared", cmdPrefix)
	}

	var SharedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(SharedFlagName, SharedFlagDefault, SharedDescription)

	return nil
}

func registerBuildCacheSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeDescription := ``

	var SizeFlagName string
	if cmdPrefix == "" {
		SizeFlagName = "Size"
	} else {
		SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
	}

	var SizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SizeFlagName, SizeFlagDefault, SizeDescription)

	return nil
}

func registerBuildCacheType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := ``

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "Type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	return nil
}

func registerBuildCacheUsageCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UsageCountDescription := ``

	var UsageCountFlagName string
	if cmdPrefix == "" {
		UsageCountFlagName = "UsageCount"
	} else {
		UsageCountFlagName = fmt.Sprintf("%v.UsageCount", cmdPrefix)
	}

	var UsageCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(UsageCountFlagName, UsageCountFlagDefault, UsageCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBuildCacheFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CreatedAtAdded := retrieveBuildCacheCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAtAdded

	err, DescriptionAdded := retrieveBuildCacheDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, IDAdded := retrieveBuildCacheIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, InUseAdded := retrieveBuildCacheInUseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InUseAdded

	err, LastUsedAtAdded := retrieveBuildCacheLastUsedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastUsedAtAdded

	err, ParentAdded := retrieveBuildCacheParentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParentAdded

	err, SharedAdded := retrieveBuildCacheSharedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SharedAdded

	err, SizeAdded := retrieveBuildCacheSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	err, TypeAdded := retrieveBuildCacheTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, UsageCountAdded := retrieveBuildCacheUsageCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsageCountAdded

	return nil, retAdded
}

func retrieveBuildCacheCreatedAtFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(CreatedAtFlagName) {

		var CreatedAtFlagName string
		if cmdPrefix == "" {
			CreatedAtFlagName = "CreatedAt"
		} else {
			CreatedAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		CreatedAtFlagValue, err := cmd.Flags().GetInt64(CreatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = CreatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildCacheDescriptionFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "Description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildCacheIDFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "ID"
		} else {
			IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildCacheInUseFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	InUseFlagName := fmt.Sprintf("%v.InUse", cmdPrefix)
	if cmd.Flags().Changed(InUseFlagName) {

		var InUseFlagName string
		if cmdPrefix == "" {
			InUseFlagName = "InUse"
		} else {
			InUseFlagName = fmt.Sprintf("%v.InUse", cmdPrefix)
		}

		InUseFlagValue, err := cmd.Flags().GetBool(InUseFlagName)
		if err != nil {
			return err, false
		}
		m.InUse = InUseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildCacheLastUsedAtFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LastUsedAtFlagName := fmt.Sprintf("%v.LastUsedAt", cmdPrefix)
	if cmd.Flags().Changed(LastUsedAtFlagName) {

		var LastUsedAtFlagName string
		if cmdPrefix == "" {
			LastUsedAtFlagName = "LastUsedAt"
		} else {
			LastUsedAtFlagName = fmt.Sprintf("%v.LastUsedAt", cmdPrefix)
		}

		LastUsedAtFlagValue, err := cmd.Flags().GetInt64(LastUsedAtFlagName)
		if err != nil {
			return err, false
		}
		m.LastUsedAt = &LastUsedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildCacheParentFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ParentFlagName := fmt.Sprintf("%v.Parent", cmdPrefix)
	if cmd.Flags().Changed(ParentFlagName) {

		var ParentFlagName string
		if cmdPrefix == "" {
			ParentFlagName = "Parent"
		} else {
			ParentFlagName = fmt.Sprintf("%v.Parent", cmdPrefix)
		}

		ParentFlagValue, err := cmd.Flags().GetString(ParentFlagName)
		if err != nil {
			return err, false
		}
		m.Parent = ParentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildCacheSharedFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SharedFlagName := fmt.Sprintf("%v.Shared", cmdPrefix)
	if cmd.Flags().Changed(SharedFlagName) {

		var SharedFlagName string
		if cmdPrefix == "" {
			SharedFlagName = "Shared"
		} else {
			SharedFlagName = fmt.Sprintf("%v.Shared", cmdPrefix)
		}

		SharedFlagValue, err := cmd.Flags().GetBool(SharedFlagName)
		if err != nil {
			return err, false
		}
		m.Shared = SharedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildCacheSizeFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeFlagName := fmt.Sprintf("%v.Size", cmdPrefix)
	if cmd.Flags().Changed(SizeFlagName) {

		var SizeFlagName string
		if cmdPrefix == "" {
			SizeFlagName = "Size"
		} else {
			SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
		}

		SizeFlagValue, err := cmd.Flags().GetInt64(SizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = SizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildCacheTypeFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "Type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuildCacheUsageCountFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UsageCountFlagName := fmt.Sprintf("%v.UsageCount", cmdPrefix)
	if cmd.Flags().Changed(UsageCountFlagName) {

		var UsageCountFlagName string
		if cmdPrefix == "" {
			UsageCountFlagName = "UsageCount"
		} else {
			UsageCountFlagName = fmt.Sprintf("%v.UsageCount", cmdPrefix)
		}

		UsageCountFlagValue, err := cmd.Flags().GetInt64(UsageCountFlagName)
		if err != nil {
			return err, false
		}
		m.UsageCount = UsageCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
