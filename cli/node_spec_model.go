// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for NodeSpec

// register flags to command
func registerModelNodeSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNodeSpecAvailability(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeSpecLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeSpecRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeSpecAvailability(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AvailabilityDescription := `Enum: ["active","pause","drain"]. Availability of the node.`

	var AvailabilityFlagName string
	if cmdPrefix == "" {
		AvailabilityFlagName = "Availability"
	} else {
		AvailabilityFlagName = fmt.Sprintf("%v.Availability", cmdPrefix)
	}

	var AvailabilityFlagDefault string

	_ = cmd.PersistentFlags().String(AvailabilityFlagName, AvailabilityFlagDefault, AvailabilityDescription)

	if err := cmd.RegisterFlagCompletionFunc(AvailabilityFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["active","pause","drain"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNodeSpecLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerNodeSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Name for the node.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerNodeSpecRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RoleDescription := `Enum: ["worker","manager"]. Role of the node.`

	var RoleFlagName string
	if cmdPrefix == "" {
		RoleFlagName = "Role"
	} else {
		RoleFlagName = fmt.Sprintf("%v.Role", cmdPrefix)
	}

	var RoleFlagDefault string

	_ = cmd.PersistentFlags().String(RoleFlagName, RoleFlagDefault, RoleDescription)

	if err := cmd.RegisterFlagCompletionFunc(RoleFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["worker","manager"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNodeSpecFlags(depth int, m *models.NodeSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AvailabilityAdded := retrieveNodeSpecAvailabilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AvailabilityAdded

	err, LabelsAdded := retrieveNodeSpecLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, NameAdded := retrieveNodeSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, RoleAdded := retrieveNodeSpecRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RoleAdded

	return nil, retAdded
}

func retrieveNodeSpecAvailabilityFlags(depth int, m *models.NodeSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AvailabilityFlagName := fmt.Sprintf("%v.Availability", cmdPrefix)
	if cmd.Flags().Changed(AvailabilityFlagName) {

		var AvailabilityFlagName string
		if cmdPrefix == "" {
			AvailabilityFlagName = "Availability"
		} else {
			AvailabilityFlagName = fmt.Sprintf("%v.Availability", cmdPrefix)
		}

		AvailabilityFlagValue, err := cmd.Flags().GetString(AvailabilityFlagName)
		if err != nil {
			return err, false
		}
		m.Availability = AvailabilityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeSpecLabelsFlags(depth int, m *models.NodeSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNodeSpecNameFlags(depth int, m *models.NodeSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeSpecRoleFlags(depth int, m *models.NodeSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RoleFlagName := fmt.Sprintf("%v.Role", cmdPrefix)
	if cmd.Flags().Changed(RoleFlagName) {

		var RoleFlagName string
		if cmdPrefix == "" {
			RoleFlagName = "Role"
		} else {
			RoleFlagName = fmt.Sprintf("%v.Role", cmdPrefix)
		}

		RoleFlagValue, err := cmd.Flags().GetString(RoleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = RoleFlagValue

		retAdded = true
	}

	return nil, retAdded
}
