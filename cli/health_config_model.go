// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for HealthConfig

// register flags to command
func registerModelHealthConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHealthConfigInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHealthConfigRetries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHealthConfigStartPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHealthConfigTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHealthConfigTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHealthConfigInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IntervalDescription := `The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.`

	var IntervalFlagName string
	if cmdPrefix == "" {
		IntervalFlagName = "Interval"
	} else {
		IntervalFlagName = fmt.Sprintf("%v.Interval", cmdPrefix)
	}

	var IntervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(IntervalFlagName, IntervalFlagDefault, IntervalDescription)

	return nil
}

func registerHealthConfigRetries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RetriesDescription := `The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.`

	var RetriesFlagName string
	if cmdPrefix == "" {
		RetriesFlagName = "Retries"
	} else {
		RetriesFlagName = fmt.Sprintf("%v.Retries", cmdPrefix)
	}

	var RetriesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(RetriesFlagName, RetriesFlagDefault, RetriesDescription)

	return nil
}

func registerHealthConfigStartPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StartPeriodDescription := `Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.`

	var StartPeriodFlagName string
	if cmdPrefix == "" {
		StartPeriodFlagName = "StartPeriod"
	} else {
		StartPeriodFlagName = fmt.Sprintf("%v.StartPeriod", cmdPrefix)
	}

	var StartPeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(StartPeriodFlagName, StartPeriodFlagDefault, StartPeriodDescription)

	return nil
}

func registerHealthConfigTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Test []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHealthConfigTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TimeoutDescription := `The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit.`

	var TimeoutFlagName string
	if cmdPrefix == "" {
		TimeoutFlagName = "Timeout"
	} else {
		TimeoutFlagName = fmt.Sprintf("%v.Timeout", cmdPrefix)
	}

	var TimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(TimeoutFlagName, TimeoutFlagDefault, TimeoutDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHealthConfigFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IntervalAdded := retrieveHealthConfigIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IntervalAdded

	err, RetriesAdded := retrieveHealthConfigRetriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RetriesAdded

	err, StartPeriodAdded := retrieveHealthConfigStartPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StartPeriodAdded

	err, TestAdded := retrieveHealthConfigTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TestAdded

	err, TimeoutAdded := retrieveHealthConfigTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimeoutAdded

	return nil, retAdded
}

func retrieveHealthConfigIntervalFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IntervalFlagName := fmt.Sprintf("%v.Interval", cmdPrefix)
	if cmd.Flags().Changed(IntervalFlagName) {

		var IntervalFlagName string
		if cmdPrefix == "" {
			IntervalFlagName = "Interval"
		} else {
			IntervalFlagName = fmt.Sprintf("%v.Interval", cmdPrefix)
		}

		IntervalFlagValue, err := cmd.Flags().GetInt64(IntervalFlagName)
		if err != nil {
			return err, false
		}
		m.Interval = IntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHealthConfigRetriesFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RetriesFlagName := fmt.Sprintf("%v.Retries", cmdPrefix)
	if cmd.Flags().Changed(RetriesFlagName) {

		var RetriesFlagName string
		if cmdPrefix == "" {
			RetriesFlagName = "Retries"
		} else {
			RetriesFlagName = fmt.Sprintf("%v.Retries", cmdPrefix)
		}

		RetriesFlagValue, err := cmd.Flags().GetInt64(RetriesFlagName)
		if err != nil {
			return err, false
		}
		m.Retries = RetriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHealthConfigStartPeriodFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StartPeriodFlagName := fmt.Sprintf("%v.StartPeriod", cmdPrefix)
	if cmd.Flags().Changed(StartPeriodFlagName) {

		var StartPeriodFlagName string
		if cmdPrefix == "" {
			StartPeriodFlagName = "StartPeriod"
		} else {
			StartPeriodFlagName = fmt.Sprintf("%v.StartPeriod", cmdPrefix)
		}

		StartPeriodFlagValue, err := cmd.Flags().GetInt64(StartPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.StartPeriod = StartPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHealthConfigTestFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TestFlagName := fmt.Sprintf("%v.Test", cmdPrefix)
	if cmd.Flags().Changed(TestFlagName) {
		// warning: Test array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHealthConfigTimeoutFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TimeoutFlagName := fmt.Sprintf("%v.Timeout", cmdPrefix)
	if cmd.Flags().Changed(TimeoutFlagName) {

		var TimeoutFlagName string
		if cmdPrefix == "" {
			TimeoutFlagName = "Timeout"
		} else {
			TimeoutFlagName = fmt.Sprintf("%v.Timeout", cmdPrefix)
		}

		TimeoutFlagValue, err := cmd.Flags().GetInt64(TimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.Timeout = TimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}
