// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for SecretSpec

// register flags to command
func registerModelSecretSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSecretSpecData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSecretSpecDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSecretSpecLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSecretSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSecretSpecTemplating(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSecretSpecData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DataDescription := `Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))
data to store as secret.

This field is only used to _create_ a secret, and is not returned by
other endpoints.
`

	var DataFlagName string
	if cmdPrefix == "" {
		DataFlagName = "Data"
	} else {
		DataFlagName = fmt.Sprintf("%v.Data", cmdPrefix)
	}

	var DataFlagDefault string

	_ = cmd.PersistentFlags().String(DataFlagName, DataFlagDefault, DataDescription)

	return nil
}

func registerSecretSpecDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var DriverFlagName string
	if cmdPrefix == "" {
		DriverFlagName = "Driver"
	} else {
		DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
	}

	if err := registerModelDriverFlags(depth+1, DriverFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSecretSpecLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerSecretSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `User-defined name of the secret.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerSecretSpecTemplating(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var TemplatingFlagName string
	if cmdPrefix == "" {
		TemplatingFlagName = "Templating"
	} else {
		TemplatingFlagName = fmt.Sprintf("%v.Templating", cmdPrefix)
	}

	if err := registerModelDriverFlags(depth+1, TemplatingFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSecretSpecFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DataAdded := retrieveSecretSpecDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded

	err, DriverAdded := retrieveSecretSpecDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverAdded

	err, LabelsAdded := retrieveSecretSpecLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, NameAdded := retrieveSecretSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, TemplatingAdded := retrieveSecretSpecTemplatingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TemplatingAdded

	return nil, retAdded
}

func retrieveSecretSpecDataFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DataFlagName := fmt.Sprintf("%v.Data", cmdPrefix)
	if cmd.Flags().Changed(DataFlagName) {

		var DataFlagName string
		if cmdPrefix == "" {
			DataFlagName = "Data"
		} else {
			DataFlagName = fmt.Sprintf("%v.Data", cmdPrefix)
		}

		DataFlagValue, err := cmd.Flags().GetString(DataFlagName)
		if err != nil {
			return err, false
		}
		m.Data = DataFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSecretSpecDriverFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DriverFlagName := fmt.Sprintf("%v.Driver", cmdPrefix)
	if cmd.Flags().Changed(DriverFlagName) {
		// info: complex object Driver Driver is retrieved outside this Changed() block
	}
	DriverFlagValue := m.Driver
	if swag.IsZero(DriverFlagValue) {
		DriverFlagValue = &models.Driver{}
	}

	err, DriverAdded := retrieveModelDriverFlags(depth+1, DriverFlagValue, DriverFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverAdded
	if DriverAdded {
		m.Driver = DriverFlagValue
	}

	return nil, retAdded
}

func retrieveSecretSpecLabelsFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSecretSpecNameFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSecretSpecTemplatingFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TemplatingFlagName := fmt.Sprintf("%v.Templating", cmdPrefix)
	if cmd.Flags().Changed(TemplatingFlagName) {
		// info: complex object Templating Driver is retrieved outside this Changed() block
	}
	TemplatingFlagValue := m.Templating
	if swag.IsZero(TemplatingFlagValue) {
		TemplatingFlagValue = &models.Driver{}
	}

	err, TemplatingAdded := retrieveModelDriverFlags(depth+1, TemplatingFlagValue, TemplatingFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TemplatingAdded
	if TemplatingAdded {
		m.Templating = TemplatingFlagValue
	}

	return nil, retAdded
}
