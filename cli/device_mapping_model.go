// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DeviceMapping

// register flags to command
func registerModelDeviceMappingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceMappingCgroupPermissions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceMappingPathInContainer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceMappingPathOnHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceMappingCgroupPermissions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CgroupPermissionsDescription := ``

	var CgroupPermissionsFlagName string
	if cmdPrefix == "" {
		CgroupPermissionsFlagName = "CgroupPermissions"
	} else {
		CgroupPermissionsFlagName = fmt.Sprintf("%v.CgroupPermissions", cmdPrefix)
	}

	var CgroupPermissionsFlagDefault string

	_ = cmd.PersistentFlags().String(CgroupPermissionsFlagName, CgroupPermissionsFlagDefault, CgroupPermissionsDescription)

	return nil
}

func registerDeviceMappingPathInContainer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PathInContainerDescription := ``

	var PathInContainerFlagName string
	if cmdPrefix == "" {
		PathInContainerFlagName = "PathInContainer"
	} else {
		PathInContainerFlagName = fmt.Sprintf("%v.PathInContainer", cmdPrefix)
	}

	var PathInContainerFlagDefault string

	_ = cmd.PersistentFlags().String(PathInContainerFlagName, PathInContainerFlagDefault, PathInContainerDescription)

	return nil
}

func registerDeviceMappingPathOnHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PathOnHostDescription := ``

	var PathOnHostFlagName string
	if cmdPrefix == "" {
		PathOnHostFlagName = "PathOnHost"
	} else {
		PathOnHostFlagName = fmt.Sprintf("%v.PathOnHost", cmdPrefix)
	}

	var PathOnHostFlagDefault string

	_ = cmd.PersistentFlags().String(PathOnHostFlagName, PathOnHostFlagDefault, PathOnHostDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceMappingFlags(depth int, m *models.DeviceMapping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CgroupPermissionsAdded := retrieveDeviceMappingCgroupPermissionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CgroupPermissionsAdded

	err, PathInContainerAdded := retrieveDeviceMappingPathInContainerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PathInContainerAdded

	err, PathOnHostAdded := retrieveDeviceMappingPathOnHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PathOnHostAdded

	return nil, retAdded
}

func retrieveDeviceMappingCgroupPermissionsFlags(depth int, m *models.DeviceMapping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CgroupPermissionsFlagName := fmt.Sprintf("%v.CgroupPermissions", cmdPrefix)
	if cmd.Flags().Changed(CgroupPermissionsFlagName) {

		var CgroupPermissionsFlagName string
		if cmdPrefix == "" {
			CgroupPermissionsFlagName = "CgroupPermissions"
		} else {
			CgroupPermissionsFlagName = fmt.Sprintf("%v.CgroupPermissions", cmdPrefix)
		}

		CgroupPermissionsFlagValue, err := cmd.Flags().GetString(CgroupPermissionsFlagName)
		if err != nil {
			return err, false
		}
		m.CgroupPermissions = CgroupPermissionsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceMappingPathInContainerFlags(depth int, m *models.DeviceMapping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PathInContainerFlagName := fmt.Sprintf("%v.PathInContainer", cmdPrefix)
	if cmd.Flags().Changed(PathInContainerFlagName) {

		var PathInContainerFlagName string
		if cmdPrefix == "" {
			PathInContainerFlagName = "PathInContainer"
		} else {
			PathInContainerFlagName = fmt.Sprintf("%v.PathInContainer", cmdPrefix)
		}

		PathInContainerFlagValue, err := cmd.Flags().GetString(PathInContainerFlagName)
		if err != nil {
			return err, false
		}
		m.PathInContainer = PathInContainerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceMappingPathOnHostFlags(depth int, m *models.DeviceMapping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PathOnHostFlagName := fmt.Sprintf("%v.PathOnHost", cmdPrefix)
	if cmd.Flags().Changed(PathOnHostFlagName) {

		var PathOnHostFlagName string
		if cmdPrefix == "" {
			PathOnHostFlagName = "PathOnHost"
		} else {
			PathOnHostFlagName = fmt.Sprintf("%v.PathOnHost", cmdPrefix)
		}

		PathOnHostFlagValue, err := cmd.Flags().GetString(PathOnHostFlagName)
		if err != nil {
			return err, false
		}
		m.PathOnHost = PathOnHostFlagValue

		retAdded = true
	}

	return nil, retAdded
}
