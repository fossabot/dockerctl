// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for NetworkSettings

// register flags to command
func registerModelNetworkSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNetworkSettingsBridge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsGlobalIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsGlobalIPV6PrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsHairpinMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsIPAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsIPPrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsIPV6Gateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsLinkLocalIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsLinkLocalIPV6PrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsMacAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsNetworks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsSandboxID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsSandboxKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsSecondaryIPAddresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsSecondaryIPV6Addresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkSettingsBridge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	BridgeDescription := `Name of the network'a bridge (for example, ` + "`" + `docker0` + "`" + `).`

	var BridgeFlagName string
	if cmdPrefix == "" {
		BridgeFlagName = "Bridge"
	} else {
		BridgeFlagName = fmt.Sprintf("%v.Bridge", cmdPrefix)
	}

	var BridgeFlagDefault string

	_ = cmd.PersistentFlags().String(BridgeFlagName, BridgeFlagDefault, BridgeDescription)

	return nil
}

func registerNetworkSettingsEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	EndpointIDDescription := `EndpointID uniquely represents a service endpoint in a Sandbox.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var EndpointIDFlagName string
	if cmdPrefix == "" {
		EndpointIDFlagName = "EndpointID"
	} else {
		EndpointIDFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
	}

	var EndpointIDFlagDefault string

	_ = cmd.PersistentFlags().String(EndpointIDFlagName, EndpointIDFlagDefault, EndpointIDDescription)

	return nil
}

func registerNetworkSettingsGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GatewayDescription := `Gateway address for the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var GatewayFlagName string
	if cmdPrefix == "" {
		GatewayFlagName = "Gateway"
	} else {
		GatewayFlagName = fmt.Sprintf("%v.Gateway", cmdPrefix)
	}

	var GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(GatewayFlagName, GatewayFlagDefault, GatewayDescription)

	return nil
}

func registerNetworkSettingsGlobalIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GlobalIPV6AddressDescription := `Global IPv6 address for the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var GlobalIPV6AddressFlagName string
	if cmdPrefix == "" {
		GlobalIPV6AddressFlagName = "GlobalIPv6Address"
	} else {
		GlobalIPV6AddressFlagName = fmt.Sprintf("%v.GlobalIPv6Address", cmdPrefix)
	}

	var GlobalIPV6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(GlobalIPV6AddressFlagName, GlobalIPV6AddressFlagDefault, GlobalIPV6AddressDescription)

	return nil
}

func registerNetworkSettingsGlobalIPV6PrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	GlobalIPV6PrefixLenDescription := `Mask length of the global IPv6 address.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var GlobalIPV6PrefixLenFlagName string
	if cmdPrefix == "" {
		GlobalIPV6PrefixLenFlagName = "GlobalIPv6PrefixLen"
	} else {
		GlobalIPV6PrefixLenFlagName = fmt.Sprintf("%v.GlobalIPv6PrefixLen", cmdPrefix)
	}

	var GlobalIPV6PrefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(GlobalIPV6PrefixLenFlagName, GlobalIPV6PrefixLenFlagDefault, GlobalIPV6PrefixLenDescription)

	return nil
}

func registerNetworkSettingsHairpinMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HairpinModeDescription := `Indicates if hairpin NAT should be enabled on the virtual interface.
`

	var HairpinModeFlagName string
	if cmdPrefix == "" {
		HairpinModeFlagName = "HairpinMode"
	} else {
		HairpinModeFlagName = fmt.Sprintf("%v.HairpinMode", cmdPrefix)
	}

	var HairpinModeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(HairpinModeFlagName, HairpinModeFlagDefault, HairpinModeDescription)

	return nil
}

func registerNetworkSettingsIPAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPAddressDescription := `IPv4 address for the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var IPAddressFlagName string
	if cmdPrefix == "" {
		IPAddressFlagName = "IPAddress"
	} else {
		IPAddressFlagName = fmt.Sprintf("%v.IPAddress", cmdPrefix)
	}

	var IPAddressFlagDefault string

	_ = cmd.PersistentFlags().String(IPAddressFlagName, IPAddressFlagDefault, IPAddressDescription)

	return nil
}

func registerNetworkSettingsIPPrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPPrefixLenDescription := `Mask length of the IPv4 address.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var IPPrefixLenFlagName string
	if cmdPrefix == "" {
		IPPrefixLenFlagName = "IPPrefixLen"
	} else {
		IPPrefixLenFlagName = fmt.Sprintf("%v.IPPrefixLen", cmdPrefix)
	}

	var IPPrefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(IPPrefixLenFlagName, IPPrefixLenFlagDefault, IPPrefixLenDescription)

	return nil
}

func registerNetworkSettingsIPV6Gateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPV6GatewayDescription := `IPv6 gateway address for this network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var IPV6GatewayFlagName string
	if cmdPrefix == "" {
		IPV6GatewayFlagName = "IPv6Gateway"
	} else {
		IPV6GatewayFlagName = fmt.Sprintf("%v.IPv6Gateway", cmdPrefix)
	}

	var IPV6GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(IPV6GatewayFlagName, IPV6GatewayFlagDefault, IPV6GatewayDescription)

	return nil
}

func registerNetworkSettingsLinkLocalIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	LinkLocalIPV6AddressDescription := `IPv6 unicast address using the link-local prefix.`

	var LinkLocalIPV6AddressFlagName string
	if cmdPrefix == "" {
		LinkLocalIPV6AddressFlagName = "LinkLocalIPv6Address"
	} else {
		LinkLocalIPV6AddressFlagName = fmt.Sprintf("%v.LinkLocalIPv6Address", cmdPrefix)
	}

	var LinkLocalIPV6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(LinkLocalIPV6AddressFlagName, LinkLocalIPV6AddressFlagDefault, LinkLocalIPV6AddressDescription)

	return nil
}

func registerNetworkSettingsLinkLocalIPV6PrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	LinkLocalIPV6PrefixLenDescription := `Prefix length of the IPv6 unicast address.`

	var LinkLocalIPV6PrefixLenFlagName string
	if cmdPrefix == "" {
		LinkLocalIPV6PrefixLenFlagName = "LinkLocalIPv6PrefixLen"
	} else {
		LinkLocalIPV6PrefixLenFlagName = fmt.Sprintf("%v.LinkLocalIPv6PrefixLen", cmdPrefix)
	}

	var LinkLocalIPV6PrefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(LinkLocalIPV6PrefixLenFlagName, LinkLocalIPV6PrefixLenFlagDefault, LinkLocalIPV6PrefixLenDescription)

	return nil
}

func registerNetworkSettingsMacAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MacAddressDescription := `MAC address for the container on the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var MacAddressFlagName string
	if cmdPrefix == "" {
		MacAddressFlagName = "MacAddress"
	} else {
		MacAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
	}

	var MacAddressFlagDefault string

	_ = cmd.PersistentFlags().String(MacAddressFlagName, MacAddressFlagDefault, MacAddressDescription)

	return nil
}

func registerNetworkSettingsNetworks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Networks map[string]EndpointSettings map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkSettingsPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Ports PortMap map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkSettingsSandboxID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SandboxIDDescription := `SandboxID uniquely represents a container's network stack.`

	var SandboxIDFlagName string
	if cmdPrefix == "" {
		SandboxIDFlagName = "SandboxID"
	} else {
		SandboxIDFlagName = fmt.Sprintf("%v.SandboxID", cmdPrefix)
	}

	var SandboxIDFlagDefault string

	_ = cmd.PersistentFlags().String(SandboxIDFlagName, SandboxIDFlagDefault, SandboxIDDescription)

	return nil
}

func registerNetworkSettingsSandboxKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SandboxKeyDescription := `SandboxKey identifies the sandbox`

	var SandboxKeyFlagName string
	if cmdPrefix == "" {
		SandboxKeyFlagName = "SandboxKey"
	} else {
		SandboxKeyFlagName = fmt.Sprintf("%v.SandboxKey", cmdPrefix)
	}

	var SandboxKeyFlagDefault string

	_ = cmd.PersistentFlags().String(SandboxKeyFlagName, SandboxKeyFlagDefault, SandboxKeyDescription)

	return nil
}

func registerNetworkSettingsSecondaryIPAddresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SecondaryIPAddresses []*Address array type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkSettingsSecondaryIPV6Addresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SecondaryIPv6Addresses []*Address array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNetworkSettingsFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BridgeAdded := retrieveNetworkSettingsBridgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BridgeAdded

	err, EndpointIDAdded := retrieveNetworkSettingsEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EndpointIDAdded

	err, GatewayAdded := retrieveNetworkSettingsGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GatewayAdded

	err, GlobalIPV6AddressAdded := retrieveNetworkSettingsGlobalIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GlobalIPV6AddressAdded

	err, GlobalIPV6PrefixLenAdded := retrieveNetworkSettingsGlobalIPV6PrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GlobalIPV6PrefixLenAdded

	err, HairpinModeAdded := retrieveNetworkSettingsHairpinModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HairpinModeAdded

	err, IPAddressAdded := retrieveNetworkSettingsIPAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAddressAdded

	err, IPPrefixLenAdded := retrieveNetworkSettingsIPPrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPPrefixLenAdded

	err, IPV6GatewayAdded := retrieveNetworkSettingsIPV6GatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPV6GatewayAdded

	err, LinkLocalIPV6AddressAdded := retrieveNetworkSettingsLinkLocalIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinkLocalIPV6AddressAdded

	err, LinkLocalIPV6PrefixLenAdded := retrieveNetworkSettingsLinkLocalIPV6PrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinkLocalIPV6PrefixLenAdded

	err, MacAddressAdded := retrieveNetworkSettingsMacAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MacAddressAdded

	err, NetworksAdded := retrieveNetworkSettingsNetworksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworksAdded

	err, PortsAdded := retrieveNetworkSettingsPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PortsAdded

	err, SandboxIDAdded := retrieveNetworkSettingsSandboxIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SandboxIDAdded

	err, SandboxKeyAdded := retrieveNetworkSettingsSandboxKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SandboxKeyAdded

	err, SecondaryIPAddressesAdded := retrieveNetworkSettingsSecondaryIPAddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SecondaryIPAddressesAdded

	err, SecondaryIPV6AddressesAdded := retrieveNetworkSettingsSecondaryIPV6AddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SecondaryIPV6AddressesAdded

	return nil, retAdded
}

func retrieveNetworkSettingsBridgeFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BridgeFlagName := fmt.Sprintf("%v.Bridge", cmdPrefix)
	if cmd.Flags().Changed(BridgeFlagName) {

		var BridgeFlagName string
		if cmdPrefix == "" {
			BridgeFlagName = "Bridge"
		} else {
			BridgeFlagName = fmt.Sprintf("%v.Bridge", cmdPrefix)
		}

		BridgeFlagValue, err := cmd.Flags().GetString(BridgeFlagName)
		if err != nil {
			return err, false
		}
		m.Bridge = BridgeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsEndpointIDFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EndpointIDFlagName := fmt.Sprintf("%v.EndpointID", cmdPrefix)
	if cmd.Flags().Changed(EndpointIDFlagName) {

		var EndpointIDFlagName string
		if cmdPrefix == "" {
			EndpointIDFlagName = "EndpointID"
		} else {
			EndpointIDFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
		}

		EndpointIDFlagValue, err := cmd.Flags().GetString(EndpointIDFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = EndpointIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsGatewayFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GatewayFlagName := fmt.Sprintf("%v.Gateway", cmdPrefix)
	if cmd.Flags().Changed(GatewayFlagName) {

		var GatewayFlagName string
		if cmdPrefix == "" {
			GatewayFlagName = "Gateway"
		} else {
			GatewayFlagName = fmt.Sprintf("%v.Gateway", cmdPrefix)
		}

		GatewayFlagValue, err := cmd.Flags().GetString(GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = GatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsGlobalIPV6AddressFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GlobalIPV6AddressFlagName := fmt.Sprintf("%v.GlobalIPv6Address", cmdPrefix)
	if cmd.Flags().Changed(GlobalIPV6AddressFlagName) {

		var GlobalIPV6AddressFlagName string
		if cmdPrefix == "" {
			GlobalIPV6AddressFlagName = "GlobalIPv6Address"
		} else {
			GlobalIPV6AddressFlagName = fmt.Sprintf("%v.GlobalIPv6Address", cmdPrefix)
		}

		GlobalIPV6AddressFlagValue, err := cmd.Flags().GetString(GlobalIPV6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.GlobalIPV6Address = GlobalIPV6AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsGlobalIPV6PrefixLenFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GlobalIPV6PrefixLenFlagName := fmt.Sprintf("%v.GlobalIPv6PrefixLen", cmdPrefix)
	if cmd.Flags().Changed(GlobalIPV6PrefixLenFlagName) {

		var GlobalIPV6PrefixLenFlagName string
		if cmdPrefix == "" {
			GlobalIPV6PrefixLenFlagName = "GlobalIPv6PrefixLen"
		} else {
			GlobalIPV6PrefixLenFlagName = fmt.Sprintf("%v.GlobalIPv6PrefixLen", cmdPrefix)
		}

		GlobalIPV6PrefixLenFlagValue, err := cmd.Flags().GetInt64(GlobalIPV6PrefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.GlobalIPV6PrefixLen = GlobalIPV6PrefixLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsHairpinModeFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HairpinModeFlagName := fmt.Sprintf("%v.HairpinMode", cmdPrefix)
	if cmd.Flags().Changed(HairpinModeFlagName) {

		var HairpinModeFlagName string
		if cmdPrefix == "" {
			HairpinModeFlagName = "HairpinMode"
		} else {
			HairpinModeFlagName = fmt.Sprintf("%v.HairpinMode", cmdPrefix)
		}

		HairpinModeFlagValue, err := cmd.Flags().GetBool(HairpinModeFlagName)
		if err != nil {
			return err, false
		}
		m.HairpinMode = HairpinModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsIPAddressFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPAddressFlagName := fmt.Sprintf("%v.IPAddress", cmdPrefix)
	if cmd.Flags().Changed(IPAddressFlagName) {

		var IPAddressFlagName string
		if cmdPrefix == "" {
			IPAddressFlagName = "IPAddress"
		} else {
			IPAddressFlagName = fmt.Sprintf("%v.IPAddress", cmdPrefix)
		}

		IPAddressFlagValue, err := cmd.Flags().GetString(IPAddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPAddress = IPAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsIPPrefixLenFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPPrefixLenFlagName := fmt.Sprintf("%v.IPPrefixLen", cmdPrefix)
	if cmd.Flags().Changed(IPPrefixLenFlagName) {

		var IPPrefixLenFlagName string
		if cmdPrefix == "" {
			IPPrefixLenFlagName = "IPPrefixLen"
		} else {
			IPPrefixLenFlagName = fmt.Sprintf("%v.IPPrefixLen", cmdPrefix)
		}

		IPPrefixLenFlagValue, err := cmd.Flags().GetInt64(IPPrefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.IPPrefixLen = IPPrefixLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsIPV6GatewayFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPV6GatewayFlagName := fmt.Sprintf("%v.IPv6Gateway", cmdPrefix)
	if cmd.Flags().Changed(IPV6GatewayFlagName) {

		var IPV6GatewayFlagName string
		if cmdPrefix == "" {
			IPV6GatewayFlagName = "IPv6Gateway"
		} else {
			IPV6GatewayFlagName = fmt.Sprintf("%v.IPv6Gateway", cmdPrefix)
		}

		IPV6GatewayFlagValue, err := cmd.Flags().GetString(IPV6GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Gateway = IPV6GatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsLinkLocalIPV6AddressFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LinkLocalIPV6AddressFlagName := fmt.Sprintf("%v.LinkLocalIPv6Address", cmdPrefix)
	if cmd.Flags().Changed(LinkLocalIPV6AddressFlagName) {

		var LinkLocalIPV6AddressFlagName string
		if cmdPrefix == "" {
			LinkLocalIPV6AddressFlagName = "LinkLocalIPv6Address"
		} else {
			LinkLocalIPV6AddressFlagName = fmt.Sprintf("%v.LinkLocalIPv6Address", cmdPrefix)
		}

		LinkLocalIPV6AddressFlagValue, err := cmd.Flags().GetString(LinkLocalIPV6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.LinkLocalIPV6Address = LinkLocalIPV6AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsLinkLocalIPV6PrefixLenFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LinkLocalIPV6PrefixLenFlagName := fmt.Sprintf("%v.LinkLocalIPv6PrefixLen", cmdPrefix)
	if cmd.Flags().Changed(LinkLocalIPV6PrefixLenFlagName) {

		var LinkLocalIPV6PrefixLenFlagName string
		if cmdPrefix == "" {
			LinkLocalIPV6PrefixLenFlagName = "LinkLocalIPv6PrefixLen"
		} else {
			LinkLocalIPV6PrefixLenFlagName = fmt.Sprintf("%v.LinkLocalIPv6PrefixLen", cmdPrefix)
		}

		LinkLocalIPV6PrefixLenFlagValue, err := cmd.Flags().GetInt64(LinkLocalIPV6PrefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.LinkLocalIPV6PrefixLen = LinkLocalIPV6PrefixLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsMacAddressFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MacAddressFlagName := fmt.Sprintf("%v.MacAddress", cmdPrefix)
	if cmd.Flags().Changed(MacAddressFlagName) {

		var MacAddressFlagName string
		if cmdPrefix == "" {
			MacAddressFlagName = "MacAddress"
		} else {
			MacAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
		}

		MacAddressFlagValue, err := cmd.Flags().GetString(MacAddressFlagName)
		if err != nil {
			return err, false
		}
		m.MacAddress = MacAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsNetworksFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworksFlagName := fmt.Sprintf("%v.Networks", cmdPrefix)
	if cmd.Flags().Changed(NetworksFlagName) {
		// warning: Networks map type map[string]EndpointSettings is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkSettingsPortsFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PortsFlagName := fmt.Sprintf("%v.Ports", cmdPrefix)
	if cmd.Flags().Changed(PortsFlagName) {
		// warning: Ports map type PortMap is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkSettingsSandboxIDFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SandboxIDFlagName := fmt.Sprintf("%v.SandboxID", cmdPrefix)
	if cmd.Flags().Changed(SandboxIDFlagName) {

		var SandboxIDFlagName string
		if cmdPrefix == "" {
			SandboxIDFlagName = "SandboxID"
		} else {
			SandboxIDFlagName = fmt.Sprintf("%v.SandboxID", cmdPrefix)
		}

		SandboxIDFlagValue, err := cmd.Flags().GetString(SandboxIDFlagName)
		if err != nil {
			return err, false
		}
		m.SandboxID = SandboxIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsSandboxKeyFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SandboxKeyFlagName := fmt.Sprintf("%v.SandboxKey", cmdPrefix)
	if cmd.Flags().Changed(SandboxKeyFlagName) {

		var SandboxKeyFlagName string
		if cmdPrefix == "" {
			SandboxKeyFlagName = "SandboxKey"
		} else {
			SandboxKeyFlagName = fmt.Sprintf("%v.SandboxKey", cmdPrefix)
		}

		SandboxKeyFlagValue, err := cmd.Flags().GetString(SandboxKeyFlagName)
		if err != nil {
			return err, false
		}
		m.SandboxKey = SandboxKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkSettingsSecondaryIPAddressesFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SecondaryIPAddressesFlagName := fmt.Sprintf("%v.SecondaryIPAddresses", cmdPrefix)
	if cmd.Flags().Changed(SecondaryIPAddressesFlagName) {
		// warning: SecondaryIPAddresses array type []*Address is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkSettingsSecondaryIPV6AddressesFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SecondaryIPV6AddressesFlagName := fmt.Sprintf("%v.SecondaryIPv6Addresses", cmdPrefix)
	if cmd.Flags().Changed(SecondaryIPV6AddressesFlagName) {
		// warning: SecondaryIPv6Addresses array type []*Address is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
