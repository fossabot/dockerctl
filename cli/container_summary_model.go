// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for []*ContainerSummaryItems0

// Name: [ContainerSummary], Type:[[]*ContainerSummaryItems0], register and retrieve functions are not rendered by go-swagger cli

// Extra schema cli for ContainerSummaryItems0

// register flags to command
func registerModelContainerSummaryItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerSummaryItems0Command(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0Created(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0HostConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0Image(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0ImageID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0Labels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0Mounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0Names(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0NetworkSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0Ports(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0SizeRootFs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0SizeRw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0State(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerSummaryItems0Status(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerSummaryItems0Command(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CommandDescription := `Command to run when starting the container`

	var CommandFlagName string
	if cmdPrefix == "" {
		CommandFlagName = "Command"
	} else {
		CommandFlagName = fmt.Sprintf("%v.Command", cmdPrefix)
	}

	var CommandFlagDefault string

	_ = cmd.PersistentFlags().String(CommandFlagName, CommandFlagDefault, CommandDescription)

	return nil
}

func registerContainerSummaryItems0Created(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedDescription := `When the container was created`

	var CreatedFlagName string
	if cmdPrefix == "" {
		CreatedFlagName = "Created"
	} else {
		CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
	}

	var CreatedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CreatedFlagName, CreatedFlagDefault, CreatedDescription)

	return nil
}

func registerContainerSummaryItems0HostConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var HostConfigFlagName string
	if cmdPrefix == "" {
		HostConfigFlagName = "HostConfig"
	} else {
		HostConfigFlagName = fmt.Sprintf("%v.HostConfig", cmdPrefix)
	}

	if err := registerModelContainerSummaryItems0HostConfigFlags(depth+1, HostConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerSummaryItems0ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := `The ID of this container`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "ID"
	} else {
		IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerContainerSummaryItems0Image(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ImageDescription := `The name of the image used when creating this container`

	var ImageFlagName string
	if cmdPrefix == "" {
		ImageFlagName = "Image"
	} else {
		ImageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
	}

	var ImageFlagDefault string

	_ = cmd.PersistentFlags().String(ImageFlagName, ImageFlagDefault, ImageDescription)

	return nil
}

func registerContainerSummaryItems0ImageID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ImageIDDescription := `The ID of the image that this container was created from`

	var ImageIDFlagName string
	if cmdPrefix == "" {
		ImageIDFlagName = "ImageID"
	} else {
		ImageIDFlagName = fmt.Sprintf("%v.ImageID", cmdPrefix)
	}

	var ImageIDFlagDefault string

	_ = cmd.PersistentFlags().String(ImageIDFlagName, ImageIDFlagDefault, ImageIDDescription)

	return nil
}

func registerContainerSummaryItems0Labels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerContainerSummaryItems0Mounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Mounts []*Mount array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerSummaryItems0Names(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Names []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerSummaryItems0NetworkSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var NetworkSettingsFlagName string
	if cmdPrefix == "" {
		NetworkSettingsFlagName = "NetworkSettings"
	} else {
		NetworkSettingsFlagName = fmt.Sprintf("%v.NetworkSettings", cmdPrefix)
	}

	if err := registerModelContainerSummaryItems0NetworkSettingsFlags(depth+1, NetworkSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerSummaryItems0Ports(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Ports []*Port array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerSummaryItems0SizeRootFs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeRootFsDescription := `The total size of all the files in this container`

	var SizeRootFsFlagName string
	if cmdPrefix == "" {
		SizeRootFsFlagName = "SizeRootFs"
	} else {
		SizeRootFsFlagName = fmt.Sprintf("%v.SizeRootFs", cmdPrefix)
	}

	var SizeRootFsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SizeRootFsFlagName, SizeRootFsFlagDefault, SizeRootFsDescription)

	return nil
}

func registerContainerSummaryItems0SizeRw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeRwDescription := `The size of files that have been created or changed by this container`

	var SizeRwFlagName string
	if cmdPrefix == "" {
		SizeRwFlagName = "SizeRw"
	} else {
		SizeRwFlagName = fmt.Sprintf("%v.SizeRw", cmdPrefix)
	}

	var SizeRwFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SizeRwFlagName, SizeRwFlagDefault, SizeRwDescription)

	return nil
}

func registerContainerSummaryItems0State(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StateDescription := `The state of this container (e.g. ` + "`" + `Exited` + "`" + `)`

	var StateFlagName string
	if cmdPrefix == "" {
		StateFlagName = "State"
	} else {
		StateFlagName = fmt.Sprintf("%v.State", cmdPrefix)
	}

	var StateFlagDefault string

	_ = cmd.PersistentFlags().String(StateFlagName, StateFlagDefault, StateDescription)

	return nil
}

func registerContainerSummaryItems0Status(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StatusDescription := `Additional human-readable status of this container (e.g. ` + "`" + `Exit 0` + "`" + `)`

	var StatusFlagName string
	if cmdPrefix == "" {
		StatusFlagName = "Status"
	} else {
		StatusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
	}

	var StatusFlagDefault string

	_ = cmd.PersistentFlags().String(StatusFlagName, StatusFlagDefault, StatusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerSummaryItems0Flags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CommandAdded := retrieveContainerSummaryItems0CommandFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CommandAdded

	err, CreatedAdded := retrieveContainerSummaryItems0CreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAdded

	err, HostConfigAdded := retrieveContainerSummaryItems0HostConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostConfigAdded

	err, IDAdded := retrieveContainerSummaryItems0IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, ImageAdded := retrieveContainerSummaryItems0ImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ImageAdded

	err, ImageIDAdded := retrieveContainerSummaryItems0ImageIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ImageIDAdded

	err, LabelsAdded := retrieveContainerSummaryItems0LabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, MountsAdded := retrieveContainerSummaryItems0MountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MountsAdded

	err, NamesAdded := retrieveContainerSummaryItems0NamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NamesAdded

	err, NetworkSettingsAdded := retrieveContainerSummaryItems0NetworkSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkSettingsAdded

	err, PortsAdded := retrieveContainerSummaryItems0PortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PortsAdded

	err, SizeRootFsAdded := retrieveContainerSummaryItems0SizeRootFsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeRootFsAdded

	err, SizeRwAdded := retrieveContainerSummaryItems0SizeRwFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeRwAdded

	err, StateAdded := retrieveContainerSummaryItems0StateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, StatusAdded := retrieveContainerSummaryItems0StatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusAdded

	return nil, retAdded
}

func retrieveContainerSummaryItems0CommandFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CommandFlagName := fmt.Sprintf("%v.Command", cmdPrefix)
	if cmd.Flags().Changed(CommandFlagName) {

		var CommandFlagName string
		if cmdPrefix == "" {
			CommandFlagName = "Command"
		} else {
			CommandFlagName = fmt.Sprintf("%v.Command", cmdPrefix)
		}

		CommandFlagValue, err := cmd.Flags().GetString(CommandFlagName)
		if err != nil {
			return err, false
		}
		m.Command = CommandFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0CreatedFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedFlagName := fmt.Sprintf("%v.Created", cmdPrefix)
	if cmd.Flags().Changed(CreatedFlagName) {

		var CreatedFlagName string
		if cmdPrefix == "" {
			CreatedFlagName = "Created"
		} else {
			CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
		}

		CreatedFlagValue, err := cmd.Flags().GetInt64(CreatedFlagName)
		if err != nil {
			return err, false
		}
		m.Created = CreatedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0HostConfigFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HostConfigFlagName := fmt.Sprintf("%v.HostConfig", cmdPrefix)
	if cmd.Flags().Changed(HostConfigFlagName) {
		// info: complex object HostConfig ContainerSummaryItems0HostConfig is retrieved outside this Changed() block
	}
	HostConfigFlagValue := m.HostConfig
	if swag.IsZero(HostConfigFlagValue) {
		HostConfigFlagValue = &models.ContainerSummaryItems0HostConfig{}
	}

	err, HostConfigAdded := retrieveModelContainerSummaryItems0HostConfigFlags(depth+1, HostConfigFlagValue, HostConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostConfigAdded
	if HostConfigAdded {
		m.HostConfig = HostConfigFlagValue
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0IDFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "ID"
		} else {
			IDFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0ImageFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ImageFlagName := fmt.Sprintf("%v.Image", cmdPrefix)
	if cmd.Flags().Changed(ImageFlagName) {

		var ImageFlagName string
		if cmdPrefix == "" {
			ImageFlagName = "Image"
		} else {
			ImageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
		}

		ImageFlagValue, err := cmd.Flags().GetString(ImageFlagName)
		if err != nil {
			return err, false
		}
		m.Image = ImageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0ImageIDFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ImageIDFlagName := fmt.Sprintf("%v.ImageID", cmdPrefix)
	if cmd.Flags().Changed(ImageIDFlagName) {

		var ImageIDFlagName string
		if cmdPrefix == "" {
			ImageIDFlagName = "ImageID"
		} else {
			ImageIDFlagName = fmt.Sprintf("%v.ImageID", cmdPrefix)
		}

		ImageIDFlagValue, err := cmd.Flags().GetString(ImageIDFlagName)
		if err != nil {
			return err, false
		}
		m.ImageID = ImageIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0LabelsFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0MountsFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MountsFlagName := fmt.Sprintf("%v.Mounts", cmdPrefix)
	if cmd.Flags().Changed(MountsFlagName) {
		// warning: Mounts array type []*Mount is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0NamesFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NamesFlagName := fmt.Sprintf("%v.Names", cmdPrefix)
	if cmd.Flags().Changed(NamesFlagName) {
		// warning: Names array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0NetworkSettingsFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworkSettingsFlagName := fmt.Sprintf("%v.NetworkSettings", cmdPrefix)
	if cmd.Flags().Changed(NetworkSettingsFlagName) {
		// info: complex object NetworkSettings ContainerSummaryItems0NetworkSettings is retrieved outside this Changed() block
	}
	NetworkSettingsFlagValue := m.NetworkSettings
	if swag.IsZero(NetworkSettingsFlagValue) {
		NetworkSettingsFlagValue = &models.ContainerSummaryItems0NetworkSettings{}
	}

	err, NetworkSettingsAdded := retrieveModelContainerSummaryItems0NetworkSettingsFlags(depth+1, NetworkSettingsFlagValue, NetworkSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkSettingsAdded
	if NetworkSettingsAdded {
		m.NetworkSettings = NetworkSettingsFlagValue
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0PortsFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PortsFlagName := fmt.Sprintf("%v.Ports", cmdPrefix)
	if cmd.Flags().Changed(PortsFlagName) {
		// warning: Ports array type []*Port is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0SizeRootFsFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeRootFsFlagName := fmt.Sprintf("%v.SizeRootFs", cmdPrefix)
	if cmd.Flags().Changed(SizeRootFsFlagName) {

		var SizeRootFsFlagName string
		if cmdPrefix == "" {
			SizeRootFsFlagName = "SizeRootFs"
		} else {
			SizeRootFsFlagName = fmt.Sprintf("%v.SizeRootFs", cmdPrefix)
		}

		SizeRootFsFlagValue, err := cmd.Flags().GetInt64(SizeRootFsFlagName)
		if err != nil {
			return err, false
		}
		m.SizeRootFs = SizeRootFsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0SizeRwFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeRwFlagName := fmt.Sprintf("%v.SizeRw", cmdPrefix)
	if cmd.Flags().Changed(SizeRwFlagName) {

		var SizeRwFlagName string
		if cmdPrefix == "" {
			SizeRwFlagName = "SizeRw"
		} else {
			SizeRwFlagName = fmt.Sprintf("%v.SizeRw", cmdPrefix)
		}

		SizeRwFlagValue, err := cmd.Flags().GetInt64(SizeRwFlagName)
		if err != nil {
			return err, false
		}
		m.SizeRw = SizeRwFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0StateFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StateFlagName := fmt.Sprintf("%v.State", cmdPrefix)
	if cmd.Flags().Changed(StateFlagName) {

		var StateFlagName string
		if cmdPrefix == "" {
			StateFlagName = "State"
		} else {
			StateFlagName = fmt.Sprintf("%v.State", cmdPrefix)
		}

		StateFlagValue, err := cmd.Flags().GetString(StateFlagName)
		if err != nil {
			return err, false
		}
		m.State = StateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerSummaryItems0StatusFlags(depth int, m *models.ContainerSummaryItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StatusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(StatusFlagName) {

		var StatusFlagName string
		if cmdPrefix == "" {
			StatusFlagName = "Status"
		} else {
			StatusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
		}

		StatusFlagValue, err := cmd.Flags().GetString(StatusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = StatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ContainerSummaryItems0HostConfig

// register flags to command
func registerModelContainerSummaryItems0HostConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerSummaryItems0HostConfigNetworkMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerSummaryItems0HostConfigNetworkMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NetworkModeDescription := ``

	var NetworkModeFlagName string
	if cmdPrefix == "" {
		NetworkModeFlagName = "NetworkMode"
	} else {
		NetworkModeFlagName = fmt.Sprintf("%v.NetworkMode", cmdPrefix)
	}

	var NetworkModeFlagDefault string

	_ = cmd.PersistentFlags().String(NetworkModeFlagName, NetworkModeFlagDefault, NetworkModeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerSummaryItems0HostConfigFlags(depth int, m *models.ContainerSummaryItems0HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NetworkModeAdded := retrieveContainerSummaryItems0HostConfigNetworkModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkModeAdded

	return nil, retAdded
}

func retrieveContainerSummaryItems0HostConfigNetworkModeFlags(depth int, m *models.ContainerSummaryItems0HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworkModeFlagName := fmt.Sprintf("%v.NetworkMode", cmdPrefix)
	if cmd.Flags().Changed(NetworkModeFlagName) {

		var NetworkModeFlagName string
		if cmdPrefix == "" {
			NetworkModeFlagName = "NetworkMode"
		} else {
			NetworkModeFlagName = fmt.Sprintf("%v.NetworkMode", cmdPrefix)
		}

		NetworkModeFlagValue, err := cmd.Flags().GetString(NetworkModeFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkMode = NetworkModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ContainerSummaryItems0NetworkSettings

// register flags to command
func registerModelContainerSummaryItems0NetworkSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerSummaryItems0NetworkSettingsNetworks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerSummaryItems0NetworkSettingsNetworks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Networks map[string]EndpointSettings map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerSummaryItems0NetworkSettingsFlags(depth int, m *models.ContainerSummaryItems0NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NetworksAdded := retrieveContainerSummaryItems0NetworkSettingsNetworksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworksAdded

	return nil, retAdded
}

func retrieveContainerSummaryItems0NetworkSettingsNetworksFlags(depth int, m *models.ContainerSummaryItems0NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworksFlagName := fmt.Sprintf("%v.Networks", cmdPrefix)
	if cmd.Flags().Changed(NetworksFlagName) {
		// warning: Networks map type map[string]EndpointSettings is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
