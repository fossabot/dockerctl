// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DeviceRequest

// register flags to command
func registerModelDeviceRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceRequestCapabilities(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceRequestCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceRequestDeviceIDs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceRequestDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceRequestOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceRequestCapabilities(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Capabilities [][]string array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceRequestCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CountDescription := ``

	var CountFlagName string
	if cmdPrefix == "" {
		CountFlagName = "Count"
	} else {
		CountFlagName = fmt.Sprintf("%v.Count", cmdPrefix)
	}

	var CountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CountFlagName, CountFlagDefault, CountDescription)

	return nil
}

func registerDeviceRequestDeviceIDs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: DeviceIDs []string array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceRequestDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DriverDescription := ``

	var DriverFlagName string
	if cmdPrefix == "" {
		DriverFlagName = "Driver"
	} else {
		DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
	}

	var DriverFlagDefault string

	_ = cmd.PersistentFlags().String(DriverFlagName, DriverFlagDefault, DriverDescription)

	return nil
}

func registerDeviceRequestOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceRequestFlags(depth int, m *models.DeviceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CapabilitiesAdded := retrieveDeviceRequestCapabilitiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapabilitiesAdded

	err, CountAdded := retrieveDeviceRequestCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountAdded

	err, DeviceIDsAdded := retrieveDeviceRequestDeviceIDsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DeviceIDsAdded

	err, DriverAdded := retrieveDeviceRequestDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverAdded

	err, OptionsAdded := retrieveDeviceRequestOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	return nil, retAdded
}

func retrieveDeviceRequestCapabilitiesFlags(depth int, m *models.DeviceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CapabilitiesFlagName := fmt.Sprintf("%v.Capabilities", cmdPrefix)
	if cmd.Flags().Changed(CapabilitiesFlagName) {
		// warning: Capabilities array type [][]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceRequestCountFlags(depth int, m *models.DeviceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CountFlagName := fmt.Sprintf("%v.Count", cmdPrefix)
	if cmd.Flags().Changed(CountFlagName) {

		var CountFlagName string
		if cmdPrefix == "" {
			CountFlagName = "Count"
		} else {
			CountFlagName = fmt.Sprintf("%v.Count", cmdPrefix)
		}

		CountFlagValue, err := cmd.Flags().GetInt64(CountFlagName)
		if err != nil {
			return err, false
		}
		m.Count = CountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceRequestDeviceIDsFlags(depth int, m *models.DeviceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DeviceIDsFlagName := fmt.Sprintf("%v.DeviceIDs", cmdPrefix)
	if cmd.Flags().Changed(DeviceIDsFlagName) {
		// warning: DeviceIDs array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceRequestDriverFlags(depth int, m *models.DeviceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DriverFlagName := fmt.Sprintf("%v.Driver", cmdPrefix)
	if cmd.Flags().Changed(DriverFlagName) {

		var DriverFlagName string
		if cmdPrefix == "" {
			DriverFlagName = "Driver"
		} else {
			DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
		}

		DriverFlagValue, err := cmd.Flags().GetString(DriverFlagName)
		if err != nil {
			return err, false
		}
		m.Driver = DriverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceRequestOptionsFlags(depth int, m *models.DeviceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
