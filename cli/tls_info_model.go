// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for TLSInfo

// register flags to command
func registerModelTLSInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTLSInfoCertIssuerPublicKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTLSInfoCertIssuerSubject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTLSInfoTrustRoot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTLSInfoCertIssuerPublicKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CertIssuerPublicKeyDescription := `The base64-url-safe-encoded raw public key bytes of the issuer`

	var CertIssuerPublicKeyFlagName string
	if cmdPrefix == "" {
		CertIssuerPublicKeyFlagName = "CertIssuerPublicKey"
	} else {
		CertIssuerPublicKeyFlagName = fmt.Sprintf("%v.CertIssuerPublicKey", cmdPrefix)
	}

	var CertIssuerPublicKeyFlagDefault string

	_ = cmd.PersistentFlags().String(CertIssuerPublicKeyFlagName, CertIssuerPublicKeyFlagDefault, CertIssuerPublicKeyDescription)

	return nil
}

func registerTLSInfoCertIssuerSubject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CertIssuerSubjectDescription := `The base64-url-safe-encoded raw subject bytes of the issuer`

	var CertIssuerSubjectFlagName string
	if cmdPrefix == "" {
		CertIssuerSubjectFlagName = "CertIssuerSubject"
	} else {
		CertIssuerSubjectFlagName = fmt.Sprintf("%v.CertIssuerSubject", cmdPrefix)
	}

	var CertIssuerSubjectFlagDefault string

	_ = cmd.PersistentFlags().String(CertIssuerSubjectFlagName, CertIssuerSubjectFlagDefault, CertIssuerSubjectDescription)

	return nil
}

func registerTLSInfoTrustRoot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TrustRootDescription := `The root CA certificate(s) that are used to validate leaf TLS certificates`

	var TrustRootFlagName string
	if cmdPrefix == "" {
		TrustRootFlagName = "TrustRoot"
	} else {
		TrustRootFlagName = fmt.Sprintf("%v.TrustRoot", cmdPrefix)
	}

	var TrustRootFlagDefault string

	_ = cmd.PersistentFlags().String(TrustRootFlagName, TrustRootFlagDefault, TrustRootDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTLSInfoFlags(depth int, m *models.TLSInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CertIssuerPublicKeyAdded := retrieveTLSInfoCertIssuerPublicKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CertIssuerPublicKeyAdded

	err, CertIssuerSubjectAdded := retrieveTLSInfoCertIssuerSubjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CertIssuerSubjectAdded

	err, TrustRootAdded := retrieveTLSInfoTrustRootFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TrustRootAdded

	return nil, retAdded
}

func retrieveTLSInfoCertIssuerPublicKeyFlags(depth int, m *models.TLSInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CertIssuerPublicKeyFlagName := fmt.Sprintf("%v.CertIssuerPublicKey", cmdPrefix)
	if cmd.Flags().Changed(CertIssuerPublicKeyFlagName) {

		var CertIssuerPublicKeyFlagName string
		if cmdPrefix == "" {
			CertIssuerPublicKeyFlagName = "CertIssuerPublicKey"
		} else {
			CertIssuerPublicKeyFlagName = fmt.Sprintf("%v.CertIssuerPublicKey", cmdPrefix)
		}

		CertIssuerPublicKeyFlagValue, err := cmd.Flags().GetString(CertIssuerPublicKeyFlagName)
		if err != nil {
			return err, false
		}
		m.CertIssuerPublicKey = CertIssuerPublicKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTLSInfoCertIssuerSubjectFlags(depth int, m *models.TLSInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CertIssuerSubjectFlagName := fmt.Sprintf("%v.CertIssuerSubject", cmdPrefix)
	if cmd.Flags().Changed(CertIssuerSubjectFlagName) {

		var CertIssuerSubjectFlagName string
		if cmdPrefix == "" {
			CertIssuerSubjectFlagName = "CertIssuerSubject"
		} else {
			CertIssuerSubjectFlagName = fmt.Sprintf("%v.CertIssuerSubject", cmdPrefix)
		}

		CertIssuerSubjectFlagValue, err := cmd.Flags().GetString(CertIssuerSubjectFlagName)
		if err != nil {
			return err, false
		}
		m.CertIssuerSubject = CertIssuerSubjectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTLSInfoTrustRootFlags(depth int, m *models.TLSInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TrustRootFlagName := fmt.Sprintf("%v.TrustRoot", cmdPrefix)
	if cmd.Flags().Changed(TrustRootFlagName) {

		var TrustRootFlagName string
		if cmdPrefix == "" {
			TrustRootFlagName = "TrustRoot"
		} else {
			TrustRootFlagName = fmt.Sprintf("%v.TrustRoot", cmdPrefix)
		}

		TrustRootFlagValue, err := cmd.Flags().GetString(TrustRootFlagName)
		if err != nil {
			return err, false
		}
		m.TrustRoot = TrustRootFlagValue

		retAdded = true
	}

	return nil, retAdded
}
