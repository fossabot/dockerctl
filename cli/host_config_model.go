// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for HostConfig

// register flags to command
func registerModelHostConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// register embedded Resources flags

	if err := registerModelResourcesFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	// register anonymous fields for AO1

	if err := registerHostConfigAnonAO1AutoRemove(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Binds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1CapAdd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1CapDrop(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Capabilities(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Cgroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1CgroupnsMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1ConsoleSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1ContainerIDFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1DNS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1DNSOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1DNSSearch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1ExtraHosts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1GroupAdd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1IpcMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Isolation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Links(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1LogConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1MaskedPaths(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Mounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1NetworkMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1OomScoreAdj(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1PidMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1PortBindings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Privileged(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1PublishAllPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1ReadonlyPaths(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1ReadonlyRootfs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1RestartPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Runtime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1SecurityOpt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1ShmSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1StorageOpt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Sysctls(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1Tmpfs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1UTSMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1UsernsMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1VolumeDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAnonAO1VolumesFrom(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

// inline definition name AO1, type

func registerHostConfigAnonAO1AutoRemove(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AutoRemoveDescription := `Automatically remove the container when the container's process exits. This has no effect if ` + "`" + `RestartPolicy` + "`" + ` is set.`

	var AutoRemoveFlagName string
	if cmdPrefix == "" {
		AutoRemoveFlagName = "AutoRemove"
	} else {
		AutoRemoveFlagName = fmt.Sprintf("%v.AutoRemove", cmdPrefix)
	}

	var AutoRemoveFlagDefault bool

	_ = cmd.PersistentFlags().Bool(AutoRemoveFlagName, AutoRemoveFlagDefault, AutoRemoveDescription)

	return nil
}

func registerHostConfigAnonAO1Binds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Binds []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1CapAdd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: CapAdd []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1CapDrop(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: CapDrop []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1Capabilities(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Capabilities []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1Cgroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CgroupDescription := `Cgroup to use for the container.`

	var CgroupFlagName string
	if cmdPrefix == "" {
		CgroupFlagName = "Cgroup"
	} else {
		CgroupFlagName = fmt.Sprintf("%v.Cgroup", cmdPrefix)
	}

	var CgroupFlagDefault string

	_ = cmd.PersistentFlags().String(CgroupFlagName, CgroupFlagDefault, CgroupDescription)

	return nil
}

func registerHostConfigAnonAO1CgroupnsMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CgroupnsModeDescription := `Enum: ["private","host"]. cgroup namespace mode for the container. Possible values are:

- ` + "`" + `"private"` + "`" + `: the container runs in its own private cgroup namespace
- ` + "`" + `"host"` + "`" + `: use the host system's cgroup namespace

If not specified, the daemon default is used, which can either be ` + "`" + `"private"` + "`" + `
or ` + "`" + `"host"` + "`" + `, depending on daemon version, kernel support and configuration.
`

	var CgroupnsModeFlagName string
	if cmdPrefix == "" {
		CgroupnsModeFlagName = "CgroupnsMode"
	} else {
		CgroupnsModeFlagName = fmt.Sprintf("%v.CgroupnsMode", cmdPrefix)
	}

	var CgroupnsModeFlagDefault string

	_ = cmd.PersistentFlags().String(CgroupnsModeFlagName, CgroupnsModeFlagDefault, CgroupnsModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(CgroupnsModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["private","host"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHostConfigAnonAO1ConsoleSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ConsoleSize []*int64 array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1ContainerIDFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ContainerIDFileDescription := `Path to a file where the container ID is written`

	var ContainerIDFileFlagName string
	if cmdPrefix == "" {
		ContainerIDFileFlagName = "ContainerIDFile"
	} else {
		ContainerIDFileFlagName = fmt.Sprintf("%v.ContainerIDFile", cmdPrefix)
	}

	var ContainerIDFileFlagDefault string

	_ = cmd.PersistentFlags().String(ContainerIDFileFlagName, ContainerIDFileFlagDefault, ContainerIDFileDescription)

	return nil
}

func registerHostConfigAnonAO1DNS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Dns []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1DNSOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: DnsOptions []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1DNSSearch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: DnsSearch []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1ExtraHosts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ExtraHosts []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1GroupAdd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: GroupAdd []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1IpcMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IpcModeDescription := `IPC sharing mode for the container. Possible values are:

- ` + "`" + `"none"` + "`" + `: own private IPC namespace, with /dev/shm not mounted
- ` + "`" + `"private"` + "`" + `: own private IPC namespace
- ` + "`" + `"shareable"` + "`" + `: own private IPC namespace, with a possibility to share it with other containers
- ` + "`" + `"container:<name|id>"` + "`" + `: join another (shareable) container's IPC namespace
- ` + "`" + `"host"` + "`" + `: use the host system's IPC namespace

If not specified, daemon default is used, which can either be ` + "`" + `"private"` + "`" + `
or ` + "`" + `"shareable"` + "`" + `, depending on daemon version and configuration.
`

	var IpcModeFlagName string
	if cmdPrefix == "" {
		IpcModeFlagName = "IpcMode"
	} else {
		IpcModeFlagName = fmt.Sprintf("%v.IpcMode", cmdPrefix)
	}

	var IpcModeFlagDefault string

	_ = cmd.PersistentFlags().String(IpcModeFlagName, IpcModeFlagDefault, IpcModeDescription)

	return nil
}

func registerHostConfigAnonAO1Isolation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IsolationDescription := `Enum: ["default","process","hyperv"]. Isolation technology of the container. (Windows only)`

	var IsolationFlagName string
	if cmdPrefix == "" {
		IsolationFlagName = "Isolation"
	} else {
		IsolationFlagName = fmt.Sprintf("%v.Isolation", cmdPrefix)
	}

	var IsolationFlagDefault string

	_ = cmd.PersistentFlags().String(IsolationFlagName, IsolationFlagDefault, IsolationDescription)

	if err := cmd.RegisterFlagCompletionFunc(IsolationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["default","process","hyperv"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerHostConfigAnonAO1Links(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Links []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1LogConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var LogConfigFlagName string
	if cmdPrefix == "" {
		LogConfigFlagName = "LogConfig"
	} else {
		LogConfigFlagName = fmt.Sprintf("%v.LogConfig", cmdPrefix)
	}

	if err := registerModelHostConfigAO1LogConfigFlags(depth+1, LogConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerHostConfigAnonAO1MaskedPaths(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: MaskedPaths []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1Mounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Mounts []*Mount array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1NetworkMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NetworkModeDescription := `Network mode to use for this container. Supported standard values are: ` + "`" + `bridge` + "`" + `, ` + "`" + `host` + "`" + `, ` + "`" + `none` + "`" + `, and ` + "`" + `container:<name|id>` + "`" + `. Any other value is taken as a custom network's name to which this container should connect to.`

	var NetworkModeFlagName string
	if cmdPrefix == "" {
		NetworkModeFlagName = "NetworkMode"
	} else {
		NetworkModeFlagName = fmt.Sprintf("%v.NetworkMode", cmdPrefix)
	}

	var NetworkModeFlagDefault string

	_ = cmd.PersistentFlags().String(NetworkModeFlagName, NetworkModeFlagDefault, NetworkModeDescription)

	return nil
}

func registerHostConfigAnonAO1OomScoreAdj(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	OomScoreAdjDescription := `An integer value containing the score given to the container in order to tune OOM killer preferences.`

	var OomScoreAdjFlagName string
	if cmdPrefix == "" {
		OomScoreAdjFlagName = "OomScoreAdj"
	} else {
		OomScoreAdjFlagName = fmt.Sprintf("%v.OomScoreAdj", cmdPrefix)
	}

	var OomScoreAdjFlagDefault int64

	_ = cmd.PersistentFlags().Int64(OomScoreAdjFlagName, OomScoreAdjFlagDefault, OomScoreAdjDescription)

	return nil
}

func registerHostConfigAnonAO1PidMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PidModeDescription := `Set the PID (Process) Namespace mode for the container. It can be either:

- ` + "`" + `"container:<name|id>"` + "`" + `: joins another container's PID namespace
- ` + "`" + `"host"` + "`" + `: use the host's PID namespace inside the container
`

	var PidModeFlagName string
	if cmdPrefix == "" {
		PidModeFlagName = "PidMode"
	} else {
		PidModeFlagName = fmt.Sprintf("%v.PidMode", cmdPrefix)
	}

	var PidModeFlagDefault string

	_ = cmd.PersistentFlags().String(PidModeFlagName, PidModeFlagDefault, PidModeDescription)

	return nil
}

func registerHostConfigAnonAO1PortBindings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: PortBindings PortMap map type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1Privileged(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PrivilegedDescription := `Gives the container full access to the host.`

	var PrivilegedFlagName string
	if cmdPrefix == "" {
		PrivilegedFlagName = "Privileged"
	} else {
		PrivilegedFlagName = fmt.Sprintf("%v.Privileged", cmdPrefix)
	}

	var PrivilegedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(PrivilegedFlagName, PrivilegedFlagDefault, PrivilegedDescription)

	return nil
}

func registerHostConfigAnonAO1PublishAllPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PublishAllPortsDescription := `Allocates an ephemeral host port for all of a container's
exposed ports.

Ports are de-allocated when the container stops and allocated when the container starts.
The allocated port might be changed when restarting the container.

The port is selected from the ephemeral port range that depends on the kernel.
For example, on Linux the range is defined by ` + "`" + `/proc/sys/net/ipv4/ip_local_port_range` + "`" + `.
`

	var PublishAllPortsFlagName string
	if cmdPrefix == "" {
		PublishAllPortsFlagName = "PublishAllPorts"
	} else {
		PublishAllPortsFlagName = fmt.Sprintf("%v.PublishAllPorts", cmdPrefix)
	}

	var PublishAllPortsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(PublishAllPortsFlagName, PublishAllPortsFlagDefault, PublishAllPortsDescription)

	return nil
}

func registerHostConfigAnonAO1ReadonlyPaths(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ReadonlyPaths []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1ReadonlyRootfs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ReadonlyRootfsDescription := `Mount the container's root filesystem as read only.`

	var ReadonlyRootfsFlagName string
	if cmdPrefix == "" {
		ReadonlyRootfsFlagName = "ReadonlyRootfs"
	} else {
		ReadonlyRootfsFlagName = fmt.Sprintf("%v.ReadonlyRootfs", cmdPrefix)
	}

	var ReadonlyRootfsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ReadonlyRootfsFlagName, ReadonlyRootfsFlagDefault, ReadonlyRootfsDescription)

	return nil
}

func registerHostConfigAnonAO1RestartPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var RestartPolicyFlagName string
	if cmdPrefix == "" {
		RestartPolicyFlagName = "RestartPolicy"
	} else {
		RestartPolicyFlagName = fmt.Sprintf("%v.RestartPolicy", cmdPrefix)
	}

	if err := registerModelRestartPolicyFlags(depth+1, RestartPolicyFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerHostConfigAnonAO1Runtime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	RuntimeDescription := `Runtime to use with this container.`

	var RuntimeFlagName string
	if cmdPrefix == "" {
		RuntimeFlagName = "Runtime"
	} else {
		RuntimeFlagName = fmt.Sprintf("%v.Runtime", cmdPrefix)
	}

	var RuntimeFlagDefault string

	_ = cmd.PersistentFlags().String(RuntimeFlagName, RuntimeFlagDefault, RuntimeDescription)

	return nil
}

func registerHostConfigAnonAO1SecurityOpt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SecurityOpt []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1ShmSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ShmSizeDescription := `Size of ` + "`" + `/dev/shm` + "`" + ` in bytes. If omitted, the system uses 64MB.`

	var ShmSizeFlagName string
	if cmdPrefix == "" {
		ShmSizeFlagName = "ShmSize"
	} else {
		ShmSizeFlagName = fmt.Sprintf("%v.ShmSize", cmdPrefix)
	}

	var ShmSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ShmSizeFlagName, ShmSizeFlagDefault, ShmSizeDescription)

	return nil
}

func registerHostConfigAnonAO1StorageOpt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: StorageOpt map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1Sysctls(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Sysctls map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1Tmpfs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Tmpfs map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAnonAO1UTSMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UTSModeDescription := `UTS namespace to use for the container.`

	var UTSModeFlagName string
	if cmdPrefix == "" {
		UTSModeFlagName = "UTSMode"
	} else {
		UTSModeFlagName = fmt.Sprintf("%v.UTSMode", cmdPrefix)
	}

	var UTSModeFlagDefault string

	_ = cmd.PersistentFlags().String(UTSModeFlagName, UTSModeFlagDefault, UTSModeDescription)

	return nil
}

func registerHostConfigAnonAO1UsernsMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UsernsModeDescription := `Sets the usernamespace mode for the container when usernamespace remapping option is enabled.`

	var UsernsModeFlagName string
	if cmdPrefix == "" {
		UsernsModeFlagName = "UsernsMode"
	} else {
		UsernsModeFlagName = fmt.Sprintf("%v.UsernsMode", cmdPrefix)
	}

	var UsernsModeFlagDefault string

	_ = cmd.PersistentFlags().String(UsernsModeFlagName, UsernsModeFlagDefault, UsernsModeDescription)

	return nil
}

func registerHostConfigAnonAO1VolumeDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	VolumeDriverDescription := `Driver that this container uses to mount volumes.`

	var VolumeDriverFlagName string
	if cmdPrefix == "" {
		VolumeDriverFlagName = "VolumeDriver"
	} else {
		VolumeDriverFlagName = fmt.Sprintf("%v.VolumeDriver", cmdPrefix)
	}

	var VolumeDriverFlagDefault string

	_ = cmd.PersistentFlags().String(VolumeDriverFlagName, VolumeDriverFlagDefault, VolumeDriverDescription)

	return nil
}

func registerHostConfigAnonAO1VolumesFrom(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: VolumesFrom []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHostConfigFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// retrieve model Resources
	err, AO0Added := retrieveModelResourcesFlags(depth, &m.Resources, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AO0Added

	// retrieve allOf AO1 fields

	err, AutoRemoveAdded := retrieveHostConfigAnonAO1AutoRemoveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutoRemoveAdded

	err, BindsAdded := retrieveHostConfigAnonAO1BindsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BindsAdded

	err, CapAddAdded := retrieveHostConfigAnonAO1CapAddFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapAddAdded

	err, CapDropAdded := retrieveHostConfigAnonAO1CapDropFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapDropAdded

	err, CapabilitiesAdded := retrieveHostConfigAnonAO1CapabilitiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapabilitiesAdded

	err, CgroupAdded := retrieveHostConfigAnonAO1CgroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CgroupAdded

	err, CgroupnsModeAdded := retrieveHostConfigAnonAO1CgroupnsModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CgroupnsModeAdded

	err, ConsoleSizeAdded := retrieveHostConfigAnonAO1ConsoleSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConsoleSizeAdded

	err, ContainerIDFileAdded := retrieveHostConfigAnonAO1ContainerIDFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainerIDFileAdded

	err, DNSAdded := retrieveHostConfigAnonAO1DNSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DNSAdded

	err, DNSOptionsAdded := retrieveHostConfigAnonAO1DNSOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DNSOptionsAdded

	err, DNSSearchAdded := retrieveHostConfigAnonAO1DNSSearchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DNSSearchAdded

	err, ExtraHostsAdded := retrieveHostConfigAnonAO1ExtraHostsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtraHostsAdded

	err, GroupAddAdded := retrieveHostConfigAnonAO1GroupAddFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GroupAddAdded

	err, IpcModeAdded := retrieveHostConfigAnonAO1IpcModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IpcModeAdded

	err, IsolationAdded := retrieveHostConfigAnonAO1IsolationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsolationAdded

	err, LinksAdded := retrieveHostConfigAnonAO1LinksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinksAdded

	err, LogConfigAdded := retrieveHostConfigAnonAO1LogConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogConfigAdded

	err, MaskedPathsAdded := retrieveHostConfigAnonAO1MaskedPathsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MaskedPathsAdded

	err, MountsAdded := retrieveHostConfigAnonAO1MountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MountsAdded

	err, NetworkModeAdded := retrieveHostConfigAnonAO1NetworkModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkModeAdded

	err, OomScoreAdjAdded := retrieveHostConfigAnonAO1OomScoreAdjFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OomScoreAdjAdded

	err, PidModeAdded := retrieveHostConfigAnonAO1PidModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PidModeAdded

	err, PortBindingsAdded := retrieveHostConfigAnonAO1PortBindingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PortBindingsAdded

	err, PrivilegedAdded := retrieveHostConfigAnonAO1PrivilegedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PrivilegedAdded

	err, PublishAllPortsAdded := retrieveHostConfigAnonAO1PublishAllPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PublishAllPortsAdded

	err, ReadonlyPathsAdded := retrieveHostConfigAnonAO1ReadonlyPathsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadonlyPathsAdded

	err, ReadonlyRootfsAdded := retrieveHostConfigAnonAO1ReadonlyRootfsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadonlyRootfsAdded

	err, RestartPolicyAdded := retrieveHostConfigAnonAO1RestartPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RestartPolicyAdded

	err, RuntimeAdded := retrieveHostConfigAnonAO1RuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RuntimeAdded

	err, SecurityOptAdded := retrieveHostConfigAnonAO1SecurityOptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SecurityOptAdded

	err, ShmSizeAdded := retrieveHostConfigAnonAO1ShmSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ShmSizeAdded

	err, StorageOptAdded := retrieveHostConfigAnonAO1StorageOptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StorageOptAdded

	err, SysctlsAdded := retrieveHostConfigAnonAO1SysctlsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SysctlsAdded

	err, TmpfsAdded := retrieveHostConfigAnonAO1TmpfsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TmpfsAdded

	err, UTSModeAdded := retrieveHostConfigAnonAO1UTSModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UTSModeAdded

	err, UsernsModeAdded := retrieveHostConfigAnonAO1UsernsModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UsernsModeAdded

	err, VolumeDriverAdded := retrieveHostConfigAnonAO1VolumeDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeDriverAdded

	err, VolumesFromAdded := retrieveHostConfigAnonAO1VolumesFromFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumesFromAdded

	return nil, retAdded
}

// define retrieve functions for fields for inline definition name AO1

func retrieveHostConfigAnonAO1AutoRemoveFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AutoRemoveFlagName := fmt.Sprintf("%v.AutoRemove", cmdPrefix)
	if cmd.Flags().Changed(AutoRemoveFlagName) {

		var AutoRemoveFlagName string
		if cmdPrefix == "" {
			AutoRemoveFlagName = "AutoRemove"
		} else {
			AutoRemoveFlagName = fmt.Sprintf("%v.AutoRemove", cmdPrefix)
		}

		AutoRemoveFlagValue, err := cmd.Flags().GetBool(AutoRemoveFlagName)
		if err != nil {
			return err, false
		}
		m.AutoRemove = AutoRemoveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1BindsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BindsFlagName := fmt.Sprintf("%v.Binds", cmdPrefix)
	if cmd.Flags().Changed(BindsFlagName) {
		// warning: Binds array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1CapAddFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CapAddFlagName := fmt.Sprintf("%v.CapAdd", cmdPrefix)
	if cmd.Flags().Changed(CapAddFlagName) {
		// warning: CapAdd array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1CapDropFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CapDropFlagName := fmt.Sprintf("%v.CapDrop", cmdPrefix)
	if cmd.Flags().Changed(CapDropFlagName) {
		// warning: CapDrop array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1CapabilitiesFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CapabilitiesFlagName := fmt.Sprintf("%v.Capabilities", cmdPrefix)
	if cmd.Flags().Changed(CapabilitiesFlagName) {
		// warning: Capabilities array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1CgroupFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CgroupFlagName := fmt.Sprintf("%v.Cgroup", cmdPrefix)
	if cmd.Flags().Changed(CgroupFlagName) {

		var CgroupFlagName string
		if cmdPrefix == "" {
			CgroupFlagName = "Cgroup"
		} else {
			CgroupFlagName = fmt.Sprintf("%v.Cgroup", cmdPrefix)
		}

		CgroupFlagValue, err := cmd.Flags().GetString(CgroupFlagName)
		if err != nil {
			return err, false
		}
		m.Cgroup = CgroupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1CgroupnsModeFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CgroupnsModeFlagName := fmt.Sprintf("%v.CgroupnsMode", cmdPrefix)
	if cmd.Flags().Changed(CgroupnsModeFlagName) {

		var CgroupnsModeFlagName string
		if cmdPrefix == "" {
			CgroupnsModeFlagName = "CgroupnsMode"
		} else {
			CgroupnsModeFlagName = fmt.Sprintf("%v.CgroupnsMode", cmdPrefix)
		}

		CgroupnsModeFlagValue, err := cmd.Flags().GetString(CgroupnsModeFlagName)
		if err != nil {
			return err, false
		}
		m.CgroupnsMode = CgroupnsModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1ConsoleSizeFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConsoleSizeFlagName := fmt.Sprintf("%v.ConsoleSize", cmdPrefix)
	if cmd.Flags().Changed(ConsoleSizeFlagName) {
		// warning: ConsoleSize array type []*int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1ContainerIDFileFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ContainerIDFileFlagName := fmt.Sprintf("%v.ContainerIDFile", cmdPrefix)
	if cmd.Flags().Changed(ContainerIDFileFlagName) {

		var ContainerIDFileFlagName string
		if cmdPrefix == "" {
			ContainerIDFileFlagName = "ContainerIDFile"
		} else {
			ContainerIDFileFlagName = fmt.Sprintf("%v.ContainerIDFile", cmdPrefix)
		}

		ContainerIDFileFlagValue, err := cmd.Flags().GetString(ContainerIDFileFlagName)
		if err != nil {
			return err, false
		}
		m.ContainerIDFile = ContainerIDFileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1DNSFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DNSFlagName := fmt.Sprintf("%v.Dns", cmdPrefix)
	if cmd.Flags().Changed(DNSFlagName) {
		// warning: Dns array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1DNSOptionsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DNSOptionsFlagName := fmt.Sprintf("%v.DnsOptions", cmdPrefix)
	if cmd.Flags().Changed(DNSOptionsFlagName) {
		// warning: DnsOptions array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1DNSSearchFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DNSSearchFlagName := fmt.Sprintf("%v.DnsSearch", cmdPrefix)
	if cmd.Flags().Changed(DNSSearchFlagName) {
		// warning: DnsSearch array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1ExtraHostsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ExtraHostsFlagName := fmt.Sprintf("%v.ExtraHosts", cmdPrefix)
	if cmd.Flags().Changed(ExtraHostsFlagName) {
		// warning: ExtraHosts array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1GroupAddFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	GroupAddFlagName := fmt.Sprintf("%v.GroupAdd", cmdPrefix)
	if cmd.Flags().Changed(GroupAddFlagName) {
		// warning: GroupAdd array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1IpcModeFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IpcModeFlagName := fmt.Sprintf("%v.IpcMode", cmdPrefix)
	if cmd.Flags().Changed(IpcModeFlagName) {

		var IpcModeFlagName string
		if cmdPrefix == "" {
			IpcModeFlagName = "IpcMode"
		} else {
			IpcModeFlagName = fmt.Sprintf("%v.IpcMode", cmdPrefix)
		}

		IpcModeFlagValue, err := cmd.Flags().GetString(IpcModeFlagName)
		if err != nil {
			return err, false
		}
		m.IpcMode = IpcModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1IsolationFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IsolationFlagName := fmt.Sprintf("%v.Isolation", cmdPrefix)
	if cmd.Flags().Changed(IsolationFlagName) {

		var IsolationFlagName string
		if cmdPrefix == "" {
			IsolationFlagName = "Isolation"
		} else {
			IsolationFlagName = fmt.Sprintf("%v.Isolation", cmdPrefix)
		}

		IsolationFlagValue, err := cmd.Flags().GetString(IsolationFlagName)
		if err != nil {
			return err, false
		}
		m.Isolation = IsolationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1LinksFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LinksFlagName := fmt.Sprintf("%v.Links", cmdPrefix)
	if cmd.Flags().Changed(LinksFlagName) {
		// warning: Links array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1LogConfigFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LogConfigFlagName := fmt.Sprintf("%v.LogConfig", cmdPrefix)
	if cmd.Flags().Changed(LogConfigFlagName) {
		// info: complex object LogConfig HostConfigAO1LogConfig is retrieved outside this Changed() block
	}
	LogConfigFlagValue := m.LogConfig
	if swag.IsZero(LogConfigFlagValue) {
		LogConfigFlagValue = &models.HostConfigAO1LogConfig{}
	}

	err, LogConfigAdded := retrieveModelHostConfigAO1LogConfigFlags(depth+1, LogConfigFlagValue, LogConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogConfigAdded
	if LogConfigAdded {
		m.LogConfig = LogConfigFlagValue
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1MaskedPathsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MaskedPathsFlagName := fmt.Sprintf("%v.MaskedPaths", cmdPrefix)
	if cmd.Flags().Changed(MaskedPathsFlagName) {
		// warning: MaskedPaths array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1MountsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MountsFlagName := fmt.Sprintf("%v.Mounts", cmdPrefix)
	if cmd.Flags().Changed(MountsFlagName) {
		// warning: Mounts array type []*Mount is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1NetworkModeFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NetworkModeFlagName := fmt.Sprintf("%v.NetworkMode", cmdPrefix)
	if cmd.Flags().Changed(NetworkModeFlagName) {

		var NetworkModeFlagName string
		if cmdPrefix == "" {
			NetworkModeFlagName = "NetworkMode"
		} else {
			NetworkModeFlagName = fmt.Sprintf("%v.NetworkMode", cmdPrefix)
		}

		NetworkModeFlagValue, err := cmd.Flags().GetString(NetworkModeFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkMode = NetworkModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1OomScoreAdjFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OomScoreAdjFlagName := fmt.Sprintf("%v.OomScoreAdj", cmdPrefix)
	if cmd.Flags().Changed(OomScoreAdjFlagName) {

		var OomScoreAdjFlagName string
		if cmdPrefix == "" {
			OomScoreAdjFlagName = "OomScoreAdj"
		} else {
			OomScoreAdjFlagName = fmt.Sprintf("%v.OomScoreAdj", cmdPrefix)
		}

		OomScoreAdjFlagValue, err := cmd.Flags().GetInt64(OomScoreAdjFlagName)
		if err != nil {
			return err, false
		}
		m.OomScoreAdj = OomScoreAdjFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1PidModeFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PidModeFlagName := fmt.Sprintf("%v.PidMode", cmdPrefix)
	if cmd.Flags().Changed(PidModeFlagName) {

		var PidModeFlagName string
		if cmdPrefix == "" {
			PidModeFlagName = "PidMode"
		} else {
			PidModeFlagName = fmt.Sprintf("%v.PidMode", cmdPrefix)
		}

		PidModeFlagValue, err := cmd.Flags().GetString(PidModeFlagName)
		if err != nil {
			return err, false
		}
		m.PidMode = PidModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1PortBindingsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PortBindingsFlagName := fmt.Sprintf("%v.PortBindings", cmdPrefix)
	if cmd.Flags().Changed(PortBindingsFlagName) {
		// warning: PortBindings map type PortMap is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1PrivilegedFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PrivilegedFlagName := fmt.Sprintf("%v.Privileged", cmdPrefix)
	if cmd.Flags().Changed(PrivilegedFlagName) {

		var PrivilegedFlagName string
		if cmdPrefix == "" {
			PrivilegedFlagName = "Privileged"
		} else {
			PrivilegedFlagName = fmt.Sprintf("%v.Privileged", cmdPrefix)
		}

		PrivilegedFlagValue, err := cmd.Flags().GetBool(PrivilegedFlagName)
		if err != nil {
			return err, false
		}
		m.Privileged = PrivilegedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1PublishAllPortsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PublishAllPortsFlagName := fmt.Sprintf("%v.PublishAllPorts", cmdPrefix)
	if cmd.Flags().Changed(PublishAllPortsFlagName) {

		var PublishAllPortsFlagName string
		if cmdPrefix == "" {
			PublishAllPortsFlagName = "PublishAllPorts"
		} else {
			PublishAllPortsFlagName = fmt.Sprintf("%v.PublishAllPorts", cmdPrefix)
		}

		PublishAllPortsFlagValue, err := cmd.Flags().GetBool(PublishAllPortsFlagName)
		if err != nil {
			return err, false
		}
		m.PublishAllPorts = PublishAllPortsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1ReadonlyPathsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ReadonlyPathsFlagName := fmt.Sprintf("%v.ReadonlyPaths", cmdPrefix)
	if cmd.Flags().Changed(ReadonlyPathsFlagName) {
		// warning: ReadonlyPaths array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1ReadonlyRootfsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ReadonlyRootfsFlagName := fmt.Sprintf("%v.ReadonlyRootfs", cmdPrefix)
	if cmd.Flags().Changed(ReadonlyRootfsFlagName) {

		var ReadonlyRootfsFlagName string
		if cmdPrefix == "" {
			ReadonlyRootfsFlagName = "ReadonlyRootfs"
		} else {
			ReadonlyRootfsFlagName = fmt.Sprintf("%v.ReadonlyRootfs", cmdPrefix)
		}

		ReadonlyRootfsFlagValue, err := cmd.Flags().GetBool(ReadonlyRootfsFlagName)
		if err != nil {
			return err, false
		}
		m.ReadonlyRootfs = ReadonlyRootfsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1RestartPolicyFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RestartPolicyFlagName := fmt.Sprintf("%v.RestartPolicy", cmdPrefix)
	if cmd.Flags().Changed(RestartPolicyFlagName) {
		// info: complex object RestartPolicy RestartPolicy is retrieved outside this Changed() block
	}
	RestartPolicyFlagValue := m.RestartPolicy
	if swag.IsZero(RestartPolicyFlagValue) {
		RestartPolicyFlagValue = &models.RestartPolicy{}
	}

	err, RestartPolicyAdded := retrieveModelRestartPolicyFlags(depth+1, RestartPolicyFlagValue, RestartPolicyFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RestartPolicyAdded
	if RestartPolicyAdded {
		m.RestartPolicy = RestartPolicyFlagValue
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1RuntimeFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RuntimeFlagName := fmt.Sprintf("%v.Runtime", cmdPrefix)
	if cmd.Flags().Changed(RuntimeFlagName) {

		var RuntimeFlagName string
		if cmdPrefix == "" {
			RuntimeFlagName = "Runtime"
		} else {
			RuntimeFlagName = fmt.Sprintf("%v.Runtime", cmdPrefix)
		}

		RuntimeFlagValue, err := cmd.Flags().GetString(RuntimeFlagName)
		if err != nil {
			return err, false
		}
		m.Runtime = RuntimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1SecurityOptFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SecurityOptFlagName := fmt.Sprintf("%v.SecurityOpt", cmdPrefix)
	if cmd.Flags().Changed(SecurityOptFlagName) {
		// warning: SecurityOpt array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1ShmSizeFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ShmSizeFlagName := fmt.Sprintf("%v.ShmSize", cmdPrefix)
	if cmd.Flags().Changed(ShmSizeFlagName) {

		var ShmSizeFlagName string
		if cmdPrefix == "" {
			ShmSizeFlagName = "ShmSize"
		} else {
			ShmSizeFlagName = fmt.Sprintf("%v.ShmSize", cmdPrefix)
		}

		ShmSizeFlagValue, err := cmd.Flags().GetInt64(ShmSizeFlagName)
		if err != nil {
			return err, false
		}
		m.ShmSize = &ShmSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1StorageOptFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StorageOptFlagName := fmt.Sprintf("%v.StorageOpt", cmdPrefix)
	if cmd.Flags().Changed(StorageOptFlagName) {
		// warning: StorageOpt map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1SysctlsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SysctlsFlagName := fmt.Sprintf("%v.Sysctls", cmdPrefix)
	if cmd.Flags().Changed(SysctlsFlagName) {
		// warning: Sysctls map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1TmpfsFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TmpfsFlagName := fmt.Sprintf("%v.Tmpfs", cmdPrefix)
	if cmd.Flags().Changed(TmpfsFlagName) {
		// warning: Tmpfs map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1UTSModeFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UTSModeFlagName := fmt.Sprintf("%v.UTSMode", cmdPrefix)
	if cmd.Flags().Changed(UTSModeFlagName) {

		var UTSModeFlagName string
		if cmdPrefix == "" {
			UTSModeFlagName = "UTSMode"
		} else {
			UTSModeFlagName = fmt.Sprintf("%v.UTSMode", cmdPrefix)
		}

		UTSModeFlagValue, err := cmd.Flags().GetString(UTSModeFlagName)
		if err != nil {
			return err, false
		}
		m.UTSMode = UTSModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1UsernsModeFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UsernsModeFlagName := fmt.Sprintf("%v.UsernsMode", cmdPrefix)
	if cmd.Flags().Changed(UsernsModeFlagName) {

		var UsernsModeFlagName string
		if cmdPrefix == "" {
			UsernsModeFlagName = "UsernsMode"
		} else {
			UsernsModeFlagName = fmt.Sprintf("%v.UsernsMode", cmdPrefix)
		}

		UsernsModeFlagValue, err := cmd.Flags().GetString(UsernsModeFlagName)
		if err != nil {
			return err, false
		}
		m.UsernsMode = UsernsModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1VolumeDriverFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VolumeDriverFlagName := fmt.Sprintf("%v.VolumeDriver", cmdPrefix)
	if cmd.Flags().Changed(VolumeDriverFlagName) {

		var VolumeDriverFlagName string
		if cmdPrefix == "" {
			VolumeDriverFlagName = "VolumeDriver"
		} else {
			VolumeDriverFlagName = fmt.Sprintf("%v.VolumeDriver", cmdPrefix)
		}

		VolumeDriverFlagValue, err := cmd.Flags().GetString(VolumeDriverFlagName)
		if err != nil {
			return err, false
		}
		m.VolumeDriver = VolumeDriverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveHostConfigAnonAO1VolumesFromFlags(depth int, m *models.HostConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VolumesFromFlagName := fmt.Sprintf("%v.VolumesFrom", cmdPrefix)
	if cmd.Flags().Changed(VolumesFromFlagName) {
		// warning: VolumesFrom array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for HostConfigAO1LogConfig

// register flags to command
func registerModelHostConfigAO1LogConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHostConfigAO1LogConfigConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHostConfigAO1LogConfigType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHostConfigAO1LogConfigConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Config map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerHostConfigAO1LogConfigType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := `Enum: ["json-file","syslog","journald","gelf","fluentd","awslogs","splunk","etwlogs","none"]. `

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "Type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(TypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["json-file","syslog","journald","gelf","fluentd","awslogs","splunk","etwlogs","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHostConfigAO1LogConfigFlags(depth int, m *models.HostConfigAO1LogConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ConfigAdded := retrieveHostConfigAO1LogConfigConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConfigAdded

	err, TypeAdded := retrieveHostConfigAO1LogConfigTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrieveHostConfigAO1LogConfigConfigFlags(depth int, m *models.HostConfigAO1LogConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConfigFlagName := fmt.Sprintf("%v.Config", cmdPrefix)
	if cmd.Flags().Changed(ConfigFlagName) {
		// warning: Config map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveHostConfigAO1LogConfigTypeFlags(depth int, m *models.HostConfigAO1LogConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "Type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
