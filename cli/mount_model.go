// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for Mount

// register flags to command
func registerModelMountFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMountBindOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountConsistency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountSource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountTarget(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountTmpfsOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountVolumeOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMountBindOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var BindOptionsFlagName string
	if cmdPrefix == "" {
		BindOptionsFlagName = "BindOptions"
	} else {
		BindOptionsFlagName = fmt.Sprintf("%v.BindOptions", cmdPrefix)
	}

	if err := registerModelMountBindOptionsFlags(depth+1, BindOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMountConsistency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ConsistencyDescription := `The consistency requirement for the mount: ` + "`" + `default` + "`" + `, ` + "`" + `consistent` + "`" + `, ` + "`" + `cached` + "`" + `, or ` + "`" + `delegated` + "`" + `.`

	var ConsistencyFlagName string
	if cmdPrefix == "" {
		ConsistencyFlagName = "Consistency"
	} else {
		ConsistencyFlagName = fmt.Sprintf("%v.Consistency", cmdPrefix)
	}

	var ConsistencyFlagDefault string

	_ = cmd.PersistentFlags().String(ConsistencyFlagName, ConsistencyFlagDefault, ConsistencyDescription)

	return nil
}

func registerMountReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ReadOnlyDescription := `Whether the mount should be read-only.`

	var ReadOnlyFlagName string
	if cmdPrefix == "" {
		ReadOnlyFlagName = "ReadOnly"
	} else {
		ReadOnlyFlagName = fmt.Sprintf("%v.ReadOnly", cmdPrefix)
	}

	var ReadOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ReadOnlyFlagName, ReadOnlyFlagDefault, ReadOnlyDescription)

	return nil
}

func registerMountSource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SourceDescription := `Mount source (e.g. a volume name, a host path).`

	var SourceFlagName string
	if cmdPrefix == "" {
		SourceFlagName = "Source"
	} else {
		SourceFlagName = fmt.Sprintf("%v.Source", cmdPrefix)
	}

	var SourceFlagDefault string

	_ = cmd.PersistentFlags().String(SourceFlagName, SourceFlagDefault, SourceDescription)

	return nil
}

func registerMountTarget(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TargetDescription := `Container path.`

	var TargetFlagName string
	if cmdPrefix == "" {
		TargetFlagName = "Target"
	} else {
		TargetFlagName = fmt.Sprintf("%v.Target", cmdPrefix)
	}

	var TargetFlagDefault string

	_ = cmd.PersistentFlags().String(TargetFlagName, TargetFlagDefault, TargetDescription)

	return nil
}

func registerMountTmpfsOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var TmpfsOptionsFlagName string
	if cmdPrefix == "" {
		TmpfsOptionsFlagName = "TmpfsOptions"
	} else {
		TmpfsOptionsFlagName = fmt.Sprintf("%v.TmpfsOptions", cmdPrefix)
	}

	if err := registerModelMountTmpfsOptionsFlags(depth+1, TmpfsOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMountType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := `Enum: ["bind","volume","tmpfs","npipe"]. The mount type. Available types:

- ` + "`" + `bind` + "`" + ` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
- ` + "`" + `volume` + "`" + ` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
- ` + "`" + `tmpfs` + "`" + ` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
- ` + "`" + `npipe` + "`" + ` Mounts a named pipe from the host into the container. Must exist prior to creating the container.
`

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "Type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(TypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["bind","volume","tmpfs","npipe"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerMountVolumeOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var VolumeOptionsFlagName string
	if cmdPrefix == "" {
		VolumeOptionsFlagName = "VolumeOptions"
	} else {
		VolumeOptionsFlagName = fmt.Sprintf("%v.VolumeOptions", cmdPrefix)
	}

	if err := registerModelMountVolumeOptionsFlags(depth+1, VolumeOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMountFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BindOptionsAdded := retrieveMountBindOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BindOptionsAdded

	err, ConsistencyAdded := retrieveMountConsistencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ConsistencyAdded

	err, ReadOnlyAdded := retrieveMountReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReadOnlyAdded

	err, SourceAdded := retrieveMountSourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SourceAdded

	err, TargetAdded := retrieveMountTargetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TargetAdded

	err, TmpfsOptionsAdded := retrieveMountTmpfsOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TmpfsOptionsAdded

	err, TypeAdded := retrieveMountTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, VolumeOptionsAdded := retrieveMountVolumeOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeOptionsAdded

	return nil, retAdded
}

func retrieveMountBindOptionsFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	BindOptionsFlagName := fmt.Sprintf("%v.BindOptions", cmdPrefix)
	if cmd.Flags().Changed(BindOptionsFlagName) {
		// info: complex object BindOptions MountBindOptions is retrieved outside this Changed() block
	}
	BindOptionsFlagValue := m.BindOptions
	if swag.IsZero(BindOptionsFlagValue) {
		BindOptionsFlagValue = &models.MountBindOptions{}
	}

	err, BindOptionsAdded := retrieveModelMountBindOptionsFlags(depth+1, BindOptionsFlagValue, BindOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BindOptionsAdded
	if BindOptionsAdded {
		m.BindOptions = BindOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveMountConsistencyFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ConsistencyFlagName := fmt.Sprintf("%v.Consistency", cmdPrefix)
	if cmd.Flags().Changed(ConsistencyFlagName) {

		var ConsistencyFlagName string
		if cmdPrefix == "" {
			ConsistencyFlagName = "Consistency"
		} else {
			ConsistencyFlagName = fmt.Sprintf("%v.Consistency", cmdPrefix)
		}

		ConsistencyFlagValue, err := cmd.Flags().GetString(ConsistencyFlagName)
		if err != nil {
			return err, false
		}
		m.Consistency = ConsistencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMountReadOnlyFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ReadOnlyFlagName := fmt.Sprintf("%v.ReadOnly", cmdPrefix)
	if cmd.Flags().Changed(ReadOnlyFlagName) {

		var ReadOnlyFlagName string
		if cmdPrefix == "" {
			ReadOnlyFlagName = "ReadOnly"
		} else {
			ReadOnlyFlagName = fmt.Sprintf("%v.ReadOnly", cmdPrefix)
		}

		ReadOnlyFlagValue, err := cmd.Flags().GetBool(ReadOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.ReadOnly = ReadOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMountSourceFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SourceFlagName := fmt.Sprintf("%v.Source", cmdPrefix)
	if cmd.Flags().Changed(SourceFlagName) {

		var SourceFlagName string
		if cmdPrefix == "" {
			SourceFlagName = "Source"
		} else {
			SourceFlagName = fmt.Sprintf("%v.Source", cmdPrefix)
		}

		SourceFlagValue, err := cmd.Flags().GetString(SourceFlagName)
		if err != nil {
			return err, false
		}
		m.Source = SourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMountTargetFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TargetFlagName := fmt.Sprintf("%v.Target", cmdPrefix)
	if cmd.Flags().Changed(TargetFlagName) {

		var TargetFlagName string
		if cmdPrefix == "" {
			TargetFlagName = "Target"
		} else {
			TargetFlagName = fmt.Sprintf("%v.Target", cmdPrefix)
		}

		TargetFlagValue, err := cmd.Flags().GetString(TargetFlagName)
		if err != nil {
			return err, false
		}
		m.Target = TargetFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMountTmpfsOptionsFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TmpfsOptionsFlagName := fmt.Sprintf("%v.TmpfsOptions", cmdPrefix)
	if cmd.Flags().Changed(TmpfsOptionsFlagName) {
		// info: complex object TmpfsOptions MountTmpfsOptions is retrieved outside this Changed() block
	}
	TmpfsOptionsFlagValue := m.TmpfsOptions
	if swag.IsZero(TmpfsOptionsFlagValue) {
		TmpfsOptionsFlagValue = &models.MountTmpfsOptions{}
	}

	err, TmpfsOptionsAdded := retrieveModelMountTmpfsOptionsFlags(depth+1, TmpfsOptionsFlagValue, TmpfsOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TmpfsOptionsAdded
	if TmpfsOptionsAdded {
		m.TmpfsOptions = TmpfsOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveMountTypeFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "Type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMountVolumeOptionsFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VolumeOptionsFlagName := fmt.Sprintf("%v.VolumeOptions", cmdPrefix)
	if cmd.Flags().Changed(VolumeOptionsFlagName) {
		// info: complex object VolumeOptions MountVolumeOptions is retrieved outside this Changed() block
	}
	VolumeOptionsFlagValue := m.VolumeOptions
	if swag.IsZero(VolumeOptionsFlagValue) {
		VolumeOptionsFlagValue = &models.MountVolumeOptions{}
	}

	err, VolumeOptionsAdded := retrieveModelMountVolumeOptionsFlags(depth+1, VolumeOptionsFlagValue, VolumeOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VolumeOptionsAdded
	if VolumeOptionsAdded {
		m.VolumeOptions = VolumeOptionsFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for MountBindOptions

// register flags to command
func registerModelMountBindOptionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMountBindOptionsNonRecursive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountBindOptionsPropagation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMountBindOptionsNonRecursive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NonRecursiveDescription := `Disable recursive bind mount.`

	var NonRecursiveFlagName string
	if cmdPrefix == "" {
		NonRecursiveFlagName = "NonRecursive"
	} else {
		NonRecursiveFlagName = fmt.Sprintf("%v.NonRecursive", cmdPrefix)
	}

	var NonRecursiveFlagDefault bool

	_ = cmd.PersistentFlags().Bool(NonRecursiveFlagName, NonRecursiveFlagDefault, NonRecursiveDescription)

	return nil
}

func registerMountBindOptionsPropagation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PropagationDescription := `Enum: ["private","rprivate","shared","rshared","slave","rslave"]. A propagation mode with the value ` + "`" + `[r]private` + "`" + `, ` + "`" + `[r]shared` + "`" + `, or ` + "`" + `[r]slave` + "`" + `.`

	var PropagationFlagName string
	if cmdPrefix == "" {
		PropagationFlagName = "Propagation"
	} else {
		PropagationFlagName = fmt.Sprintf("%v.Propagation", cmdPrefix)
	}

	var PropagationFlagDefault string

	_ = cmd.PersistentFlags().String(PropagationFlagName, PropagationFlagDefault, PropagationDescription)

	if err := cmd.RegisterFlagCompletionFunc(PropagationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["private","rprivate","shared","rshared","slave","rslave"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMountBindOptionsFlags(depth int, m *models.MountBindOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NonRecursiveAdded := retrieveMountBindOptionsNonRecursiveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NonRecursiveAdded

	err, PropagationAdded := retrieveMountBindOptionsPropagationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PropagationAdded

	return nil, retAdded
}

func retrieveMountBindOptionsNonRecursiveFlags(depth int, m *models.MountBindOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NonRecursiveFlagName := fmt.Sprintf("%v.NonRecursive", cmdPrefix)
	if cmd.Flags().Changed(NonRecursiveFlagName) {

		var NonRecursiveFlagName string
		if cmdPrefix == "" {
			NonRecursiveFlagName = "NonRecursive"
		} else {
			NonRecursiveFlagName = fmt.Sprintf("%v.NonRecursive", cmdPrefix)
		}

		NonRecursiveFlagValue, err := cmd.Flags().GetBool(NonRecursiveFlagName)
		if err != nil {
			return err, false
		}
		m.NonRecursive = &NonRecursiveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMountBindOptionsPropagationFlags(depth int, m *models.MountBindOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PropagationFlagName := fmt.Sprintf("%v.Propagation", cmdPrefix)
	if cmd.Flags().Changed(PropagationFlagName) {

		var PropagationFlagName string
		if cmdPrefix == "" {
			PropagationFlagName = "Propagation"
		} else {
			PropagationFlagName = fmt.Sprintf("%v.Propagation", cmdPrefix)
		}

		PropagationFlagValue, err := cmd.Flags().GetString(PropagationFlagName)
		if err != nil {
			return err, false
		}
		m.Propagation = PropagationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for MountTmpfsOptions

// register flags to command
func registerModelMountTmpfsOptionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMountTmpfsOptionsMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountTmpfsOptionsSizeBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMountTmpfsOptionsMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ModeDescription := `The permission mode for the tmpfs mount in an integer.`

	var ModeFlagName string
	if cmdPrefix == "" {
		ModeFlagName = "Mode"
	} else {
		ModeFlagName = fmt.Sprintf("%v.Mode", cmdPrefix)
	}

	var ModeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ModeFlagName, ModeFlagDefault, ModeDescription)

	return nil
}

func registerMountTmpfsOptionsSizeBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeBytesDescription := `The size for the tmpfs mount in bytes.`

	var SizeBytesFlagName string
	if cmdPrefix == "" {
		SizeBytesFlagName = "SizeBytes"
	} else {
		SizeBytesFlagName = fmt.Sprintf("%v.SizeBytes", cmdPrefix)
	}

	var SizeBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SizeBytesFlagName, SizeBytesFlagDefault, SizeBytesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMountTmpfsOptionsFlags(depth int, m *models.MountTmpfsOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ModeAdded := retrieveMountTmpfsOptionsModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModeAdded

	err, SizeBytesAdded := retrieveMountTmpfsOptionsSizeBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeBytesAdded

	return nil, retAdded
}

func retrieveMountTmpfsOptionsModeFlags(depth int, m *models.MountTmpfsOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ModeFlagName := fmt.Sprintf("%v.Mode", cmdPrefix)
	if cmd.Flags().Changed(ModeFlagName) {

		var ModeFlagName string
		if cmdPrefix == "" {
			ModeFlagName = "Mode"
		} else {
			ModeFlagName = fmt.Sprintf("%v.Mode", cmdPrefix)
		}

		ModeFlagValue, err := cmd.Flags().GetInt64(ModeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = ModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMountTmpfsOptionsSizeBytesFlags(depth int, m *models.MountTmpfsOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeBytesFlagName := fmt.Sprintf("%v.SizeBytes", cmdPrefix)
	if cmd.Flags().Changed(SizeBytesFlagName) {

		var SizeBytesFlagName string
		if cmdPrefix == "" {
			SizeBytesFlagName = "SizeBytes"
		} else {
			SizeBytesFlagName = fmt.Sprintf("%v.SizeBytes", cmdPrefix)
		}

		SizeBytesFlagValue, err := cmd.Flags().GetInt64(SizeBytesFlagName)
		if err != nil {
			return err, false
		}
		m.SizeBytes = SizeBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for MountVolumeOptions

// register flags to command
func registerModelMountVolumeOptionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMountVolumeOptionsDriverConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountVolumeOptionsLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountVolumeOptionsNoCopy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMountVolumeOptionsDriverConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var DriverConfigFlagName string
	if cmdPrefix == "" {
		DriverConfigFlagName = "DriverConfig"
	} else {
		DriverConfigFlagName = fmt.Sprintf("%v.DriverConfig", cmdPrefix)
	}

	if err := registerModelMountVolumeOptionsDriverConfigFlags(depth+1, DriverConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMountVolumeOptionsLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerMountVolumeOptionsNoCopy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NoCopyDescription := `Populate volume with data from the target.`

	var NoCopyFlagName string
	if cmdPrefix == "" {
		NoCopyFlagName = "NoCopy"
	} else {
		NoCopyFlagName = fmt.Sprintf("%v.NoCopy", cmdPrefix)
	}

	var NoCopyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(NoCopyFlagName, NoCopyFlagDefault, NoCopyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMountVolumeOptionsFlags(depth int, m *models.MountVolumeOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DriverConfigAdded := retrieveMountVolumeOptionsDriverConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverConfigAdded

	err, LabelsAdded := retrieveMountVolumeOptionsLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, NoCopyAdded := retrieveMountVolumeOptionsNoCopyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NoCopyAdded

	return nil, retAdded
}

func retrieveMountVolumeOptionsDriverConfigFlags(depth int, m *models.MountVolumeOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DriverConfigFlagName := fmt.Sprintf("%v.DriverConfig", cmdPrefix)
	if cmd.Flags().Changed(DriverConfigFlagName) {
		// info: complex object DriverConfig MountVolumeOptionsDriverConfig is retrieved outside this Changed() block
	}
	DriverConfigFlagValue := m.DriverConfig
	if swag.IsZero(DriverConfigFlagValue) {
		DriverConfigFlagValue = &models.MountVolumeOptionsDriverConfig{}
	}

	err, DriverConfigAdded := retrieveModelMountVolumeOptionsDriverConfigFlags(depth+1, DriverConfigFlagValue, DriverConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverConfigAdded
	if DriverConfigAdded {
		m.DriverConfig = DriverConfigFlagValue
	}

	return nil, retAdded
}

func retrieveMountVolumeOptionsLabelsFlags(depth int, m *models.MountVolumeOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMountVolumeOptionsNoCopyFlags(depth int, m *models.MountVolumeOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NoCopyFlagName := fmt.Sprintf("%v.NoCopy", cmdPrefix)
	if cmd.Flags().Changed(NoCopyFlagName) {

		var NoCopyFlagName string
		if cmdPrefix == "" {
			NoCopyFlagName = "NoCopy"
		} else {
			NoCopyFlagName = fmt.Sprintf("%v.NoCopy", cmdPrefix)
		}

		NoCopyFlagValue, err := cmd.Flags().GetBool(NoCopyFlagName)
		if err != nil {
			return err, false
		}
		m.NoCopy = &NoCopyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for MountVolumeOptionsDriverConfig

// register flags to command
func registerModelMountVolumeOptionsDriverConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMountVolumeOptionsDriverConfigName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountVolumeOptionsDriverConfigOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMountVolumeOptionsDriverConfigName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Name of the driver to use to create the volume.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerMountVolumeOptionsDriverConfigOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMountVolumeOptionsDriverConfigFlags(depth int, m *models.MountVolumeOptionsDriverConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveMountVolumeOptionsDriverConfigNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OptionsAdded := retrieveMountVolumeOptionsDriverConfigOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	return nil, retAdded
}

func retrieveMountVolumeOptionsDriverConfigNameFlags(depth int, m *models.MountVolumeOptionsDriverConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMountVolumeOptionsDriverConfigOptionsFlags(depth int, m *models.MountVolumeOptionsDriverConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
