// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ErrorResponse

// register flags to command
func registerModelErrorResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerErrorResponseMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerErrorResponseMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MessageDescription := `Required. The error message.`

	var MessageFlagName string
	if cmdPrefix == "" {
		MessageFlagName = "message"
	} else {
		MessageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var MessageFlagDefault string

	_ = cmd.PersistentFlags().String(MessageFlagName, MessageFlagDefault, MessageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelErrorResponseFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MessageAdded := retrieveErrorResponseMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	return nil, retAdded
}

func retrieveErrorResponseMessageFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MessageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(MessageFlagName) {

		var MessageFlagName string
		if cmdPrefix == "" {
			MessageFlagName = "message"
		} else {
			MessageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		MessageFlagValue, err := cmd.Flags().GetString(MessageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = MessageFlagValue

		retAdded = true
	}

	return nil, retAdded
}
