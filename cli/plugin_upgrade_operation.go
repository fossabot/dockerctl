// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/plugin"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPluginPluginUpgradeCmd returns a cmd to handle operation pluginUpgrade
func makeOperationPluginPluginUpgradeCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PluginUpgrade",
		Short: ``,
		RunE:  runOperationPluginPluginUpgrade,
	}

	if err := registerOperationPluginPluginUpgradeParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPluginPluginUpgrade uses cmd flags to call endpoint api
func runOperationPluginPluginUpgrade(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := plugin.NewPluginUpgradeParams()
	if err, _ := retrieveOperationPluginPluginUpgradeXRegistryAuthFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPluginPluginUpgradeBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPluginPluginUpgradeNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPluginPluginUpgradeRemoteFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPluginPluginUpgradeResult(appCli.Plugin.PluginUpgrade(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationPluginPluginUpgradeParamFlags registers all flags needed to fill params
func registerOperationPluginPluginUpgradeParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPluginPluginUpgradeXRegistryAuthParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPluginPluginUpgradeBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPluginPluginUpgradeNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPluginPluginUpgradeRemoteParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPluginPluginUpgradeXRegistryAuthParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	XRegistryAuthDescription := `A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)`

	var XRegistryAuthFlagName string
	if cmdPrefix == "" {
		XRegistryAuthFlagName = "X-Registry-Auth"
	} else {
		XRegistryAuthFlagName = fmt.Sprintf("%v.X-Registry-Auth", cmdPrefix)
	}

	var XRegistryAuthFlagDefault string

	_ = cmd.PersistentFlags().String(XRegistryAuthFlagName, XRegistryAuthFlagDefault, XRegistryAuthDescription)

	return nil
}
func registerOperationPluginPluginUpgradeBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: array body []*PluginUpgradeParamsBodyItems0 is not supported by go-swagger cli yet

	return nil
}
func registerOperationPluginPluginUpgradeNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	NameDescription := `Required. The name of the plugin. The ` + "`" + `:latest` + "`" + ` tag is optional, and is the default if omitted.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "name"
	} else {
		NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}
func registerOperationPluginPluginUpgradeRemoteParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	RemoteDescription := `Required. Remote reference to upgrade to.

The ` + "`" + `:latest` + "`" + ` tag is optional, and is used as the default if omitted.
`

	var RemoteFlagName string
	if cmdPrefix == "" {
		RemoteFlagName = "remote"
	} else {
		RemoteFlagName = fmt.Sprintf("%v.remote", cmdPrefix)
	}

	var RemoteFlagDefault string

	_ = cmd.PersistentFlags().String(RemoteFlagName, RemoteFlagDefault, RemoteDescription)

	return nil
}

func retrieveOperationPluginPluginUpgradeXRegistryAuthFlag(m *plugin.PluginUpgradeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Registry-Auth") {

		var XRegistryAuthFlagName string
		if cmdPrefix == "" {
			XRegistryAuthFlagName = "X-Registry-Auth"
		} else {
			XRegistryAuthFlagName = fmt.Sprintf("%v.X-Registry-Auth", cmdPrefix)
		}

		XRegistryAuthFlagValue, err := cmd.Flags().GetString(XRegistryAuthFlagName)
		if err != nil {
			return err, false
		}
		m.XRegistryAuth = &XRegistryAuthFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPluginPluginUpgradeBodyFlag(m *plugin.PluginUpgradeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {

		// warning: array body []*PluginUpgradeParamsBodyItems0 is not supported by go-swagger cli yet

	}
	return nil, retAdded
}
func retrieveOperationPluginPluginUpgradeNameFlag(m *plugin.PluginUpgradeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "name"
		} else {
			NameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPluginPluginUpgradeRemoteFlag(m *plugin.PluginUpgradeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("remote") {

		var RemoteFlagName string
		if cmdPrefix == "" {
			RemoteFlagName = "remote"
		} else {
			RemoteFlagName = fmt.Sprintf("%v.remote", cmdPrefix)
		}

		RemoteFlagValue, err := cmd.Flags().GetString(RemoteFlagName)
		if err != nil {
			return err, false
		}
		m.Remote = RemoteFlagValue

	}
	return nil, retAdded
}

// parseOperationPluginPluginUpgradeResult parses request result and return the string content
func parseOperationPluginPluginUpgradeResult(resp0 *plugin.PluginUpgradeNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning pluginUpgradeNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*plugin.PluginUpgradeNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*plugin.PluginUpgradeInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response pluginUpgradeNoContent is not supported by go-swagger cli yet.

	return "", nil
}

// register flags to command
func registerModelPluginUpgradeParamsBodyItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginUpgradeParamsBodyItems0Description(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginUpgradeParamsBodyItems0Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginUpgradeParamsBodyItems0Value(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginUpgradeParamsBodyItems0Description(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := ``

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "Description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerPluginUpgradeParamsBodyItems0Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := ``

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerPluginUpgradeParamsBodyItems0Value(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Value []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginUpgradeParamsBodyItems0Flags(depth int, m *plugin.PluginUpgradeParamsBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptionAdded := retrievePluginUpgradeParamsBodyItems0DescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, NameAdded := retrievePluginUpgradeParamsBodyItems0NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, ValueAdded := retrievePluginUpgradeParamsBodyItems0ValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValueAdded

	return nil, retAdded
}

func retrievePluginUpgradeParamsBodyItems0DescriptionFlags(depth int, m *plugin.PluginUpgradeParamsBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "Description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginUpgradeParamsBodyItems0NameFlags(depth int, m *plugin.PluginUpgradeParamsBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginUpgradeParamsBodyItems0ValueFlags(depth int, m *plugin.PluginUpgradeParamsBodyItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ValueFlagName := fmt.Sprintf("%v.Value", cmdPrefix)
	if cmd.Flags().Changed(ValueFlagName) {
		// warning: Value array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
