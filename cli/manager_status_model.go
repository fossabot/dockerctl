// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ManagerStatus

// register flags to command
func registerModelManagerStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerManagerStatusAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerManagerStatusLeader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerManagerStatusReachability(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerManagerStatusAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AddrDescription := `The IP address and port at which the manager is reachable.
`

	var AddrFlagName string
	if cmdPrefix == "" {
		AddrFlagName = "Addr"
	} else {
		AddrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
	}

	var AddrFlagDefault string

	_ = cmd.PersistentFlags().String(AddrFlagName, AddrFlagDefault, AddrDescription)

	return nil
}

func registerManagerStatusLeader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	LeaderDescription := ``

	var LeaderFlagName string
	if cmdPrefix == "" {
		LeaderFlagName = "Leader"
	} else {
		LeaderFlagName = fmt.Sprintf("%v.Leader", cmdPrefix)
	}

	var LeaderFlagDefault bool

	_ = cmd.PersistentFlags().Bool(LeaderFlagName, LeaderFlagDefault, LeaderDescription)

	return nil
}

func registerManagerStatusReachability(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive Reachability Reachability is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelManagerStatusFlags(depth int, m *models.ManagerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AddrAdded := retrieveManagerStatusAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AddrAdded

	err, LeaderAdded := retrieveManagerStatusLeaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LeaderAdded

	err, ReachabilityAdded := retrieveManagerStatusReachabilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReachabilityAdded

	return nil, retAdded
}

func retrieveManagerStatusAddrFlags(depth int, m *models.ManagerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AddrFlagName := fmt.Sprintf("%v.Addr", cmdPrefix)
	if cmd.Flags().Changed(AddrFlagName) {

		var AddrFlagName string
		if cmdPrefix == "" {
			AddrFlagName = "Addr"
		} else {
			AddrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
		}

		AddrFlagValue, err := cmd.Flags().GetString(AddrFlagName)
		if err != nil {
			return err, false
		}
		m.Addr = AddrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveManagerStatusLeaderFlags(depth int, m *models.ManagerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LeaderFlagName := fmt.Sprintf("%v.Leader", cmdPrefix)
	if cmd.Flags().Changed(LeaderFlagName) {

		var LeaderFlagName string
		if cmdPrefix == "" {
			LeaderFlagName = "Leader"
		} else {
			LeaderFlagName = fmt.Sprintf("%v.Leader", cmdPrefix)
		}

		LeaderFlagValue, err := cmd.Flags().GetBool(LeaderFlagName)
		if err != nil {
			return err, false
		}
		m.Leader = &LeaderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveManagerStatusReachabilityFlags(depth int, m *models.ManagerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ReachabilityFlagName := fmt.Sprintf("%v.Reachability", cmdPrefix)
	if cmd.Flags().Changed(ReachabilityFlagName) {

		// warning: primitive Reachability Reachability is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}
