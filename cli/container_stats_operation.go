// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerStatsCmd returns a cmd to handle operation containerStats
func makeOperationContainerContainerStatsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ContainerStats",
		Short: `This endpoint returns a live stream of a containerâ€™s resource usage
statistics.

The ` + "`" + `precpu_stats` + "`" + ` is the CPU statistic of the *previous* read, and is
used to calculate the CPU usage percentage. It is not an exact copy
of the ` + "`" + `cpu_stats` + "`" + ` field.

If either ` + "`" + `precpu_stats.online_cpus` + "`" + ` or ` + "`" + `cpu_stats.online_cpus` + "`" + ` is
nil then for compatibility with older daemons the length of the
corresponding ` + "`" + `cpu_usage.percpu_usage` + "`" + ` array should be used.
`,
		RunE: runOperationContainerContainerStats,
	}

	if err := registerOperationContainerContainerStatsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerStats uses cmd flags to call endpoint api
func runOperationContainerContainerStats(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerStatsParams()
	if err, _ := retrieveOperationContainerContainerStatsIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerStatsStreamFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationContainerContainerStatsResult(appCli.Container.ContainerStats(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationContainerContainerStatsParamFlags registers all flags needed to fill params
func registerOperationContainerContainerStatsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerStatsIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerStatsStreamParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerStatsIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	IDDescription := `Required. ID or name of the container`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}
func registerOperationContainerContainerStatsStreamParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	StreamDescription := `Stream the output. If false, the stats will be output once and then it will disconnect.`

	var StreamFlagName string
	if cmdPrefix == "" {
		StreamFlagName = "stream"
	} else {
		StreamFlagName = fmt.Sprintf("%v.stream", cmdPrefix)
	}

	var StreamFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(StreamFlagName, StreamFlagDefault, StreamDescription)

	return nil
}

func retrieveOperationContainerContainerStatsIDFlag(m *container.ContainerStatsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerStatsStreamFlag(m *container.ContainerStatsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stream") {

		var StreamFlagName string
		if cmdPrefix == "" {
			StreamFlagName = "stream"
		} else {
			StreamFlagName = fmt.Sprintf("%v.stream", cmdPrefix)
		}

		StreamFlagValue, err := cmd.Flags().GetBool(StreamFlagName)
		if err != nil {
			return err, false
		}
		m.Stream = &StreamFlagValue

	}
	return nil, retAdded
}

// parseOperationContainerContainerStatsResult parses request result and return the string content
func parseOperationContainerContainerStatsResult(resp0 *container.ContainerStatsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*container.ContainerStatsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerStatsNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerStatsInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
