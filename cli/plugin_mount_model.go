// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for PluginMount

// register flags to command
func registerModelPluginMountFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginMountDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginMountDestination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginMountName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginMountOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginMountSettable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginMountSource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginMountType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginMountDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := `Required. `

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "Description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerPluginMountDestination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DestinationDescription := `Required. `

	var DestinationFlagName string
	if cmdPrefix == "" {
		DestinationFlagName = "Destination"
	} else {
		DestinationFlagName = fmt.Sprintf("%v.Destination", cmdPrefix)
	}

	var DestinationFlagDefault string

	_ = cmd.PersistentFlags().String(DestinationFlagName, DestinationFlagDefault, DestinationDescription)

	return nil
}

func registerPluginMountName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Required. `

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerPluginMountOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginMountSettable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Settable []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPluginMountSource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SourceDescription := `Required. `

	var SourceFlagName string
	if cmdPrefix == "" {
		SourceFlagName = "Source"
	} else {
		SourceFlagName = fmt.Sprintf("%v.Source", cmdPrefix)
	}

	var SourceFlagDefault string

	_ = cmd.PersistentFlags().String(SourceFlagName, SourceFlagDefault, SourceDescription)

	return nil
}

func registerPluginMountType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TypeDescription := `Required. `

	var TypeFlagName string
	if cmdPrefix == "" {
		TypeFlagName = "Type"
	} else {
		TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var TypeFlagDefault string

	_ = cmd.PersistentFlags().String(TypeFlagName, TypeFlagDefault, TypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginMountFlags(depth int, m *models.PluginMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptionAdded := retrievePluginMountDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, DestinationAdded := retrievePluginMountDestinationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DestinationAdded

	err, NameAdded := retrievePluginMountNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OptionsAdded := retrievePluginMountOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	err, SettableAdded := retrievePluginMountSettableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SettableAdded

	err, SourceAdded := retrievePluginMountSourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SourceAdded

	err, TypeAdded := retrievePluginMountTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrievePluginMountDescriptionFlags(depth int, m *models.PluginMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "Description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginMountDestinationFlags(depth int, m *models.PluginMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DestinationFlagName := fmt.Sprintf("%v.Destination", cmdPrefix)
	if cmd.Flags().Changed(DestinationFlagName) {

		var DestinationFlagName string
		if cmdPrefix == "" {
			DestinationFlagName = "Destination"
		} else {
			DestinationFlagName = fmt.Sprintf("%v.Destination", cmdPrefix)
		}

		DestinationFlagValue, err := cmd.Flags().GetString(DestinationFlagName)
		if err != nil {
			return err, false
		}
		m.Destination = DestinationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginMountNameFlags(depth int, m *models.PluginMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginMountOptionsFlags(depth int, m *models.PluginMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginMountSettableFlags(depth int, m *models.PluginMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SettableFlagName := fmt.Sprintf("%v.Settable", cmdPrefix)
	if cmd.Flags().Changed(SettableFlagName) {
		// warning: Settable array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePluginMountSourceFlags(depth int, m *models.PluginMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SourceFlagName := fmt.Sprintf("%v.Source", cmdPrefix)
	if cmd.Flags().Changed(SourceFlagName) {

		var SourceFlagName string
		if cmdPrefix == "" {
			SourceFlagName = "Source"
		} else {
			SourceFlagName = fmt.Sprintf("%v.Source", cmdPrefix)
		}

		SourceFlagValue, err := cmd.Flags().GetString(SourceFlagName)
		if err != nil {
			return err, false
		}
		m.Source = &SourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginMountTypeFlags(depth int, m *models.PluginMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TypeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(TypeFlagName) {

		var TypeFlagName string
		if cmdPrefix == "" {
			TypeFlagName = "Type"
		} else {
			TypeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		TypeFlagValue, err := cmd.Flags().GetString(TypeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = TypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
