// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/network"
	"github.com/go-swagger/dockerctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationNetworkNetworkCreateCmd returns a cmd to handle operation networkCreate
func makeOperationNetworkNetworkCreateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "NetworkCreate",
		Short: ``,
		RunE:  runOperationNetworkNetworkCreate,
	}

	if err := registerOperationNetworkNetworkCreateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationNetworkNetworkCreate uses cmd flags to call endpoint api
func runOperationNetworkNetworkCreate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := network.NewNetworkCreateParams()
	if err, _ := retrieveOperationNetworkNetworkCreateNetworkConfigFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationNetworkNetworkCreateResult(appCli.Network.NetworkCreate(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationNetworkNetworkCreateParamFlags registers all flags needed to fill params
func registerOperationNetworkNetworkCreateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationNetworkNetworkCreateNetworkConfigParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationNetworkNetworkCreateNetworkConfigParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var NetworkConfigFlagName string
	if cmdPrefix == "" {
		NetworkConfigFlagName = "networkConfig"
	} else {
		NetworkConfigFlagName = fmt.Sprintf("%v.networkConfig", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(NetworkConfigFlagName, "", "Optional json string for [networkConfig]. Network configuration")

	// add flags for body
	if err := registerModelNetworkCreateBodyFlags(0, "networkCreateBody", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationNetworkNetworkCreateNetworkConfigFlag(m *network.NetworkCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("networkConfig") {
		// Read networkConfig string from cmd and unmarshal
		networkConfigValueStr, err := cmd.Flags().GetString("networkConfig")
		if err != nil {
			return err, false
		}

		networkConfigValue := network.NetworkCreateBody{}
		if err := json.Unmarshal([]byte(networkConfigValueStr), &networkConfigValue); err != nil {
			return fmt.Errorf("cannot unmarshal networkConfig string in NetworkCreateBody: %v", err), false
		}
		m.NetworkConfig = networkConfigValue
	}
	networkConfigValueModel := m.NetworkConfig
	if swag.IsZero(networkConfigValueModel) {
		networkConfigValueModel = network.NetworkCreateBody{}
	}
	err, added := retrieveModelNetworkCreateBodyFlags(0, &networkConfigValueModel, "networkCreateBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.NetworkConfig = networkConfigValueModel
	}
	if dryRun && debug {

		networkConfigValueDebugBytes, err := json.Marshal(m.NetworkConfig)
		if err != nil {
			return err, false
		}
		logDebugf("NetworkConfig dry-run payload: %v", string(networkConfigValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationNetworkNetworkCreateResult parses request result and return the string content
func parseOperationNetworkNetworkCreateResult(resp0 *network.NetworkCreateCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*network.NetworkCreateCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*network.NetworkCreateForbidden)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*network.NetworkCreateNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*network.NetworkCreateInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelNetworkCreateBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNetworkCreateBodyAttachable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateBodyCheckDuplicate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateBodyDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateBodyEnableIPV6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateBodyIPAM(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateBodyIngress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateBodyInternal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateBodyLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateBodyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateBodyOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkCreateBodyAttachable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AttachableDescription := `Globally scoped network is manually attachable by regular containers from workers in swarm mode.`

	var AttachableFlagName string
	if cmdPrefix == "" {
		AttachableFlagName = "Attachable"
	} else {
		AttachableFlagName = fmt.Sprintf("%v.Attachable", cmdPrefix)
	}

	var AttachableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(AttachableFlagName, AttachableFlagDefault, AttachableDescription)

	return nil
}

func registerNetworkCreateBodyCheckDuplicate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CheckDuplicateDescription := `Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions.`

	var CheckDuplicateFlagName string
	if cmdPrefix == "" {
		CheckDuplicateFlagName = "CheckDuplicate"
	} else {
		CheckDuplicateFlagName = fmt.Sprintf("%v.CheckDuplicate", cmdPrefix)
	}

	var CheckDuplicateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(CheckDuplicateFlagName, CheckDuplicateFlagDefault, CheckDuplicateDescription)

	return nil
}

func registerNetworkCreateBodyDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DriverDescription := `Name of the network driver plugin to use.`

	var DriverFlagName string
	if cmdPrefix == "" {
		DriverFlagName = "Driver"
	} else {
		DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
	}

	var DriverFlagDefault string = "bridge"

	_ = cmd.PersistentFlags().String(DriverFlagName, DriverFlagDefault, DriverDescription)

	return nil
}

func registerNetworkCreateBodyEnableIPV6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	EnableIPV6Description := `Enable IPv6 on the network.`

	var EnableIPV6FlagName string
	if cmdPrefix == "" {
		EnableIPV6FlagName = "EnableIPv6"
	} else {
		EnableIPV6FlagName = fmt.Sprintf("%v.EnableIPv6", cmdPrefix)
	}

	var EnableIPV6FlagDefault bool

	_ = cmd.PersistentFlags().Bool(EnableIPV6FlagName, EnableIPV6FlagDefault, EnableIPV6Description)

	return nil
}

func registerNetworkCreateBodyIPAM(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var IPAMFlagName string
	if cmdPrefix == "" {
		IPAMFlagName = "IPAM"
	} else {
		IPAMFlagName = fmt.Sprintf("%v.IPAM", cmdPrefix)
	}

	if err := registerModelIPAMFlags(depth+1, IPAMFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkCreateBodyIngress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IngressDescription := `Ingress network is the network which provides the routing-mesh in swarm mode.`

	var IngressFlagName string
	if cmdPrefix == "" {
		IngressFlagName = "Ingress"
	} else {
		IngressFlagName = fmt.Sprintf("%v.Ingress", cmdPrefix)
	}

	var IngressFlagDefault bool

	_ = cmd.PersistentFlags().Bool(IngressFlagName, IngressFlagDefault, IngressDescription)

	return nil
}

func registerNetworkCreateBodyInternal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	InternalDescription := `Restrict external access to the network.`

	var InternalFlagName string
	if cmdPrefix == "" {
		InternalFlagName = "Internal"
	} else {
		InternalFlagName = fmt.Sprintf("%v.Internal", cmdPrefix)
	}

	var InternalFlagDefault bool

	_ = cmd.PersistentFlags().Bool(InternalFlagName, InternalFlagDefault, InternalDescription)

	return nil
}

func registerNetworkCreateBodyLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkCreateBodyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Required. The network's name.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerNetworkCreateBodyOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNetworkCreateBodyFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AttachableAdded := retrieveNetworkCreateBodyAttachableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttachableAdded

	err, CheckDuplicateAdded := retrieveNetworkCreateBodyCheckDuplicateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CheckDuplicateAdded

	err, DriverAdded := retrieveNetworkCreateBodyDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverAdded

	err, EnableIPV6Added := retrieveNetworkCreateBodyEnableIPV6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnableIPV6Added

	err, IPAMAdded := retrieveNetworkCreateBodyIPAMFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAMAdded

	err, IngressAdded := retrieveNetworkCreateBodyIngressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IngressAdded

	err, InternalAdded := retrieveNetworkCreateBodyInternalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InternalAdded

	err, LabelsAdded := retrieveNetworkCreateBodyLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, NameAdded := retrieveNetworkCreateBodyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OptionsAdded := retrieveNetworkCreateBodyOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	return nil, retAdded
}

func retrieveNetworkCreateBodyAttachableFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AttachableFlagName := fmt.Sprintf("%v.Attachable", cmdPrefix)
	if cmd.Flags().Changed(AttachableFlagName) {

		var AttachableFlagName string
		if cmdPrefix == "" {
			AttachableFlagName = "Attachable"
		} else {
			AttachableFlagName = fmt.Sprintf("%v.Attachable", cmdPrefix)
		}

		AttachableFlagValue, err := cmd.Flags().GetBool(AttachableFlagName)
		if err != nil {
			return err, false
		}
		m.Attachable = AttachableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkCreateBodyCheckDuplicateFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CheckDuplicateFlagName := fmt.Sprintf("%v.CheckDuplicate", cmdPrefix)
	if cmd.Flags().Changed(CheckDuplicateFlagName) {

		var CheckDuplicateFlagName string
		if cmdPrefix == "" {
			CheckDuplicateFlagName = "CheckDuplicate"
		} else {
			CheckDuplicateFlagName = fmt.Sprintf("%v.CheckDuplicate", cmdPrefix)
		}

		CheckDuplicateFlagValue, err := cmd.Flags().GetBool(CheckDuplicateFlagName)
		if err != nil {
			return err, false
		}
		m.CheckDuplicate = CheckDuplicateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkCreateBodyDriverFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DriverFlagName := fmt.Sprintf("%v.Driver", cmdPrefix)
	if cmd.Flags().Changed(DriverFlagName) {

		var DriverFlagName string
		if cmdPrefix == "" {
			DriverFlagName = "Driver"
		} else {
			DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
		}

		DriverFlagValue, err := cmd.Flags().GetString(DriverFlagName)
		if err != nil {
			return err, false
		}
		m.Driver = &DriverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkCreateBodyEnableIPV6Flags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EnableIPV6FlagName := fmt.Sprintf("%v.EnableIPv6", cmdPrefix)
	if cmd.Flags().Changed(EnableIPV6FlagName) {

		var EnableIPV6FlagName string
		if cmdPrefix == "" {
			EnableIPV6FlagName = "EnableIPv6"
		} else {
			EnableIPV6FlagName = fmt.Sprintf("%v.EnableIPv6", cmdPrefix)
		}

		EnableIPV6FlagValue, err := cmd.Flags().GetBool(EnableIPV6FlagName)
		if err != nil {
			return err, false
		}
		m.EnableIPV6 = EnableIPV6FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkCreateBodyIPAMFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPAMFlagName := fmt.Sprintf("%v.IPAM", cmdPrefix)
	if cmd.Flags().Changed(IPAMFlagName) {
		// info: complex object IPAM models.IPAM is retrieved outside this Changed() block
	}
	IPAMFlagValue := m.IPAM
	if swag.IsZero(IPAMFlagValue) {
		IPAMFlagValue = &models.IPAM{}
	}

	err, IPAMAdded := retrieveModelIPAMFlags(depth+1, IPAMFlagValue, IPAMFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAMAdded
	if IPAMAdded {
		m.IPAM = IPAMFlagValue
	}

	return nil, retAdded
}

func retrieveNetworkCreateBodyIngressFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IngressFlagName := fmt.Sprintf("%v.Ingress", cmdPrefix)
	if cmd.Flags().Changed(IngressFlagName) {

		var IngressFlagName string
		if cmdPrefix == "" {
			IngressFlagName = "Ingress"
		} else {
			IngressFlagName = fmt.Sprintf("%v.Ingress", cmdPrefix)
		}

		IngressFlagValue, err := cmd.Flags().GetBool(IngressFlagName)
		if err != nil {
			return err, false
		}
		m.Ingress = IngressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkCreateBodyInternalFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	InternalFlagName := fmt.Sprintf("%v.Internal", cmdPrefix)
	if cmd.Flags().Changed(InternalFlagName) {

		var InternalFlagName string
		if cmdPrefix == "" {
			InternalFlagName = "Internal"
		} else {
			InternalFlagName = fmt.Sprintf("%v.Internal", cmdPrefix)
		}

		InternalFlagValue, err := cmd.Flags().GetBool(InternalFlagName)
		if err != nil {
			return err, false
		}
		m.Internal = InternalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkCreateBodyLabelsFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkCreateBodyNameFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkCreateBodyOptionsFlags(depth int, m *network.NetworkCreateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// register flags to command
func registerModelNetworkCreateCreatedBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNetworkCreateCreatedBodyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreateCreatedBodyWarning(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkCreateCreatedBodyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := `The ID of the created network.`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "Id"
	} else {
		IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerNetworkCreateCreatedBodyWarning(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	WarningDescription := ``

	var WarningFlagName string
	if cmdPrefix == "" {
		WarningFlagName = "Warning"
	} else {
		WarningFlagName = fmt.Sprintf("%v.Warning", cmdPrefix)
	}

	var WarningFlagDefault string

	_ = cmd.PersistentFlags().String(WarningFlagName, WarningFlagDefault, WarningDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNetworkCreateCreatedBodyFlags(depth int, m *network.NetworkCreateCreatedBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IDAdded := retrieveNetworkCreateCreatedBodyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, WarningAdded := retrieveNetworkCreateCreatedBodyWarningFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WarningAdded

	return nil, retAdded
}

func retrieveNetworkCreateCreatedBodyIDFlags(depth int, m *network.NetworkCreateCreatedBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "Id"
		} else {
			IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkCreateCreatedBodyWarningFlags(depth int, m *network.NetworkCreateCreatedBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	WarningFlagName := fmt.Sprintf("%v.Warning", cmdPrefix)
	if cmd.Flags().Changed(WarningFlagName) {

		var WarningFlagName string
		if cmdPrefix == "" {
			WarningFlagName = "Warning"
		} else {
			WarningFlagName = fmt.Sprintf("%v.Warning", cmdPrefix)
		}

		WarningFlagValue, err := cmd.Flags().GetString(WarningFlagName)
		if err != nil {
			return err, false
		}
		m.Warning = WarningFlagValue

		retAdded = true
	}

	return nil, retAdded
}
