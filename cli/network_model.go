// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for Network

// register flags to command
func registerModelNetworkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNetworkAttachable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkContainers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkEnableIPV6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkIPAM(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkIngress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkInternal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkAttachable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AttachableDescription := ``

	var AttachableFlagName string
	if cmdPrefix == "" {
		AttachableFlagName = "Attachable"
	} else {
		AttachableFlagName = fmt.Sprintf("%v.Attachable", cmdPrefix)
	}

	var AttachableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(AttachableFlagName, AttachableFlagDefault, AttachableDescription)

	return nil
}

func registerNetworkContainers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Containers map[string]NetworkContainer map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedDescription := ``

	var CreatedFlagName string
	if cmdPrefix == "" {
		CreatedFlagName = "Created"
	} else {
		CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
	}

	var CreatedFlagDefault string

	_ = cmd.PersistentFlags().String(CreatedFlagName, CreatedFlagDefault, CreatedDescription)

	return nil
}

func registerNetworkDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DriverDescription := ``

	var DriverFlagName string
	if cmdPrefix == "" {
		DriverFlagName = "Driver"
	} else {
		DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
	}

	var DriverFlagDefault string

	_ = cmd.PersistentFlags().String(DriverFlagName, DriverFlagDefault, DriverDescription)

	return nil
}

func registerNetworkEnableIPV6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	EnableIPV6Description := ``

	var EnableIPV6FlagName string
	if cmdPrefix == "" {
		EnableIPV6FlagName = "EnableIPv6"
	} else {
		EnableIPV6FlagName = fmt.Sprintf("%v.EnableIPv6", cmdPrefix)
	}

	var EnableIPV6FlagDefault bool

	_ = cmd.PersistentFlags().Bool(EnableIPV6FlagName, EnableIPV6FlagDefault, EnableIPV6Description)

	return nil
}

func registerNetworkIPAM(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var IPAMFlagName string
	if cmdPrefix == "" {
		IPAMFlagName = "IPAM"
	} else {
		IPAMFlagName = fmt.Sprintf("%v.IPAM", cmdPrefix)
	}

	if err := registerModelIPAMFlags(depth+1, IPAMFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := ``

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "Id"
	} else {
		IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerNetworkIngress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IngressDescription := ``

	var IngressFlagName string
	if cmdPrefix == "" {
		IngressFlagName = "Ingress"
	} else {
		IngressFlagName = fmt.Sprintf("%v.Ingress", cmdPrefix)
	}

	var IngressFlagDefault bool

	_ = cmd.PersistentFlags().Bool(IngressFlagName, IngressFlagDefault, IngressDescription)

	return nil
}

func registerNetworkInternal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	InternalDescription := ``

	var InternalFlagName string
	if cmdPrefix == "" {
		InternalFlagName = "Internal"
	} else {
		InternalFlagName = fmt.Sprintf("%v.Internal", cmdPrefix)
	}

	var InternalFlagDefault bool

	_ = cmd.PersistentFlags().Bool(InternalFlagName, InternalFlagDefault, InternalDescription)

	return nil
}

func registerNetworkLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := ``

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerNetworkOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ScopeDescription := ``

	var ScopeFlagName string
	if cmdPrefix == "" {
		ScopeFlagName = "Scope"
	} else {
		ScopeFlagName = fmt.Sprintf("%v.Scope", cmdPrefix)
	}

	var ScopeFlagDefault string

	_ = cmd.PersistentFlags().String(ScopeFlagName, ScopeFlagDefault, ScopeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNetworkFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AttachableAdded := retrieveNetworkAttachableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AttachableAdded

	err, ContainersAdded := retrieveNetworkContainersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainersAdded

	err, CreatedAdded := retrieveNetworkCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAdded

	err, DriverAdded := retrieveNetworkDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DriverAdded

	err, EnableIPV6Added := retrieveNetworkEnableIPV6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EnableIPV6Added

	err, IPAMAdded := retrieveNetworkIPAMFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAMAdded

	err, IDAdded := retrieveNetworkIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, IngressAdded := retrieveNetworkIngressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IngressAdded

	err, InternalAdded := retrieveNetworkInternalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InternalAdded

	err, LabelsAdded := retrieveNetworkLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, NameAdded := retrieveNetworkNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OptionsAdded := retrieveNetworkOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	err, ScopeAdded := retrieveNetworkScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScopeAdded

	return nil, retAdded
}

func retrieveNetworkAttachableFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AttachableFlagName := fmt.Sprintf("%v.Attachable", cmdPrefix)
	if cmd.Flags().Changed(AttachableFlagName) {

		var AttachableFlagName string
		if cmdPrefix == "" {
			AttachableFlagName = "Attachable"
		} else {
			AttachableFlagName = fmt.Sprintf("%v.Attachable", cmdPrefix)
		}

		AttachableFlagValue, err := cmd.Flags().GetBool(AttachableFlagName)
		if err != nil {
			return err, false
		}
		m.Attachable = AttachableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkContainersFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ContainersFlagName := fmt.Sprintf("%v.Containers", cmdPrefix)
	if cmd.Flags().Changed(ContainersFlagName) {
		// warning: Containers map type map[string]NetworkContainer is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkCreatedFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedFlagName := fmt.Sprintf("%v.Created", cmdPrefix)
	if cmd.Flags().Changed(CreatedFlagName) {

		var CreatedFlagName string
		if cmdPrefix == "" {
			CreatedFlagName = "Created"
		} else {
			CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
		}

		CreatedFlagValue, err := cmd.Flags().GetString(CreatedFlagName)
		if err != nil {
			return err, false
		}
		m.Created = CreatedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkDriverFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DriverFlagName := fmt.Sprintf("%v.Driver", cmdPrefix)
	if cmd.Flags().Changed(DriverFlagName) {

		var DriverFlagName string
		if cmdPrefix == "" {
			DriverFlagName = "Driver"
		} else {
			DriverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
		}

		DriverFlagValue, err := cmd.Flags().GetString(DriverFlagName)
		if err != nil {
			return err, false
		}
		m.Driver = DriverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkEnableIPV6Flags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EnableIPV6FlagName := fmt.Sprintf("%v.EnableIPv6", cmdPrefix)
	if cmd.Flags().Changed(EnableIPV6FlagName) {

		var EnableIPV6FlagName string
		if cmdPrefix == "" {
			EnableIPV6FlagName = "EnableIPv6"
		} else {
			EnableIPV6FlagName = fmt.Sprintf("%v.EnableIPv6", cmdPrefix)
		}

		EnableIPV6FlagValue, err := cmd.Flags().GetBool(EnableIPV6FlagName)
		if err != nil {
			return err, false
		}
		m.EnableIPV6 = EnableIPV6FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkIPAMFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPAMFlagName := fmt.Sprintf("%v.IPAM", cmdPrefix)
	if cmd.Flags().Changed(IPAMFlagName) {
		// info: complex object IPAM IPAM is retrieved outside this Changed() block
	}
	IPAMFlagValue := m.IPAM
	if swag.IsZero(IPAMFlagValue) {
		IPAMFlagValue = &models.IPAM{}
	}

	err, IPAMAdded := retrieveModelIPAMFlags(depth+1, IPAMFlagValue, IPAMFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAMAdded
	if IPAMAdded {
		m.IPAM = IPAMFlagValue
	}

	return nil, retAdded
}

func retrieveNetworkIDFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "Id"
		} else {
			IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkIngressFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IngressFlagName := fmt.Sprintf("%v.Ingress", cmdPrefix)
	if cmd.Flags().Changed(IngressFlagName) {

		var IngressFlagName string
		if cmdPrefix == "" {
			IngressFlagName = "Ingress"
		} else {
			IngressFlagName = fmt.Sprintf("%v.Ingress", cmdPrefix)
		}

		IngressFlagValue, err := cmd.Flags().GetBool(IngressFlagName)
		if err != nil {
			return err, false
		}
		m.Ingress = IngressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkInternalFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	InternalFlagName := fmt.Sprintf("%v.Internal", cmdPrefix)
	if cmd.Flags().Changed(InternalFlagName) {

		var InternalFlagName string
		if cmdPrefix == "" {
			InternalFlagName = "Internal"
		} else {
			InternalFlagName = fmt.Sprintf("%v.Internal", cmdPrefix)
		}

		InternalFlagValue, err := cmd.Flags().GetBool(InternalFlagName)
		if err != nil {
			return err, false
		}
		m.Internal = InternalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkLabelsFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkNameFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkOptionsFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNetworkScopeFlags(depth int, m *models.Network, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ScopeFlagName := fmt.Sprintf("%v.Scope", cmdPrefix)
	if cmd.Flags().Changed(ScopeFlagName) {

		var ScopeFlagName string
		if cmdPrefix == "" {
			ScopeFlagName = "Scope"
		} else {
			ScopeFlagName = fmt.Sprintf("%v.Scope", cmdPrefix)
		}

		ScopeFlagValue, err := cmd.Flags().GetString(ScopeFlagName)
		if err != nil {
			return err, false
		}
		m.Scope = ScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
