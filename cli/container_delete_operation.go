// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerDeleteCmd returns a cmd to handle operation containerDelete
func makeOperationContainerContainerDeleteCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerDelete",
		Short: ``,
		RunE:  runOperationContainerContainerDelete,
	}

	if err := registerOperationContainerContainerDeleteParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerDelete uses cmd flags to call endpoint api
func runOperationContainerContainerDelete(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerDeleteParams()
	if err, _ := retrieveOperationContainerContainerDeleteForceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerDeleteIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerDeleteLinkFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerDeleteVFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationContainerContainerDeleteResult(appCli.Container.ContainerDelete(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationContainerContainerDeleteParamFlags registers all flags needed to fill params
func registerOperationContainerContainerDeleteParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerDeleteForceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerDeleteIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerDeleteLinkParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerDeleteVParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerDeleteForceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	ForceDescription := `If the container is running, kill it before removing it.`

	var ForceFlagName string
	if cmdPrefix == "" {
		ForceFlagName = "force"
	} else {
		ForceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
	}

	var ForceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ForceFlagName, ForceFlagDefault, ForceDescription)

	return nil
}
func registerOperationContainerContainerDeleteIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	IDDescription := `Required. ID or name of the container`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}
func registerOperationContainerContainerDeleteLinkParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	LinkDescription := `Remove the specified link associated with the container.`

	var LinkFlagName string
	if cmdPrefix == "" {
		LinkFlagName = "link"
	} else {
		LinkFlagName = fmt.Sprintf("%v.link", cmdPrefix)
	}

	var LinkFlagDefault bool

	_ = cmd.PersistentFlags().Bool(LinkFlagName, LinkFlagDefault, LinkDescription)

	return nil
}
func registerOperationContainerContainerDeleteVParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	VDescription := `Remove the volumes associated with the container.`

	var VFlagName string
	if cmdPrefix == "" {
		VFlagName = "v"
	} else {
		VFlagName = fmt.Sprintf("%v.v", cmdPrefix)
	}

	var VFlagDefault bool

	_ = cmd.PersistentFlags().Bool(VFlagName, VFlagDefault, VDescription)

	return nil
}

func retrieveOperationContainerContainerDeleteForceFlag(m *container.ContainerDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force") {

		var ForceFlagName string
		if cmdPrefix == "" {
			ForceFlagName = "force"
		} else {
			ForceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
		}

		ForceFlagValue, err := cmd.Flags().GetBool(ForceFlagName)
		if err != nil {
			return err, false
		}
		m.Force = &ForceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerDeleteIDFlag(m *container.ContainerDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerDeleteLinkFlag(m *container.ContainerDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("link") {

		var LinkFlagName string
		if cmdPrefix == "" {
			LinkFlagName = "link"
		} else {
			LinkFlagName = fmt.Sprintf("%v.link", cmdPrefix)
		}

		LinkFlagValue, err := cmd.Flags().GetBool(LinkFlagName)
		if err != nil {
			return err, false
		}
		m.Link = &LinkFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerDeleteVFlag(m *container.ContainerDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("v") {

		var VFlagName string
		if cmdPrefix == "" {
			VFlagName = "v"
		} else {
			VFlagName = fmt.Sprintf("%v.v", cmdPrefix)
		}

		VFlagValue, err := cmd.Flags().GetBool(VFlagName)
		if err != nil {
			return err, false
		}
		m.V = &VFlagValue

	}
	return nil, retAdded
}

// parseOperationContainerContainerDeleteResult parses request result and return the string content
func parseOperationContainerContainerDeleteResult(resp0 *container.ContainerDeleteNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning containerDeleteNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerDeleteBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerDeleteNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*container.ContainerDeleteConflict)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*container.ContainerDeleteInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response containerDeleteNoContent is not supported by go-swagger cli yet.

	return "", nil
}
