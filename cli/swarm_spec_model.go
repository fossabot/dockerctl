// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for SwarmSpec

// register flags to command
func registerModelSwarmSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecCAConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecDispatcher(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecEncryptionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecOrchestration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecRaft(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecTaskDefaults(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecCAConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var CAConfigFlagName string
	if cmdPrefix == "" {
		CAConfigFlagName = "CAConfig"
	} else {
		CAConfigFlagName = fmt.Sprintf("%v.CAConfig", cmdPrefix)
	}

	if err := registerModelSwarmSpecCAConfigFlags(depth+1, CAConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecDispatcher(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var DispatcherFlagName string
	if cmdPrefix == "" {
		DispatcherFlagName = "Dispatcher"
	} else {
		DispatcherFlagName = fmt.Sprintf("%v.Dispatcher", cmdPrefix)
	}

	if err := registerModelSwarmSpecDispatcherFlags(depth+1, DispatcherFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecEncryptionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var EncryptionConfigFlagName string
	if cmdPrefix == "" {
		EncryptionConfigFlagName = "EncryptionConfig"
	} else {
		EncryptionConfigFlagName = fmt.Sprintf("%v.EncryptionConfig", cmdPrefix)
	}

	if err := registerModelSwarmSpecEncryptionConfigFlags(depth+1, EncryptionConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerSwarmSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `Name of the swarm.`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerSwarmSpecOrchestration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var OrchestrationFlagName string
	if cmdPrefix == "" {
		OrchestrationFlagName = "Orchestration"
	} else {
		OrchestrationFlagName = fmt.Sprintf("%v.Orchestration", cmdPrefix)
	}

	if err := registerModelSwarmSpecOrchestrationFlags(depth+1, OrchestrationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecRaft(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var RaftFlagName string
	if cmdPrefix == "" {
		RaftFlagName = "Raft"
	} else {
		RaftFlagName = fmt.Sprintf("%v.Raft", cmdPrefix)
	}

	if err := registerModelSwarmSpecRaftFlags(depth+1, RaftFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecTaskDefaults(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var TaskDefaultsFlagName string
	if cmdPrefix == "" {
		TaskDefaultsFlagName = "TaskDefaults"
	} else {
		TaskDefaultsFlagName = fmt.Sprintf("%v.TaskDefaults", cmdPrefix)
	}

	if err := registerModelSwarmSpecTaskDefaultsFlags(depth+1, TaskDefaultsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CAConfigAdded := retrieveSwarmSpecCAConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CAConfigAdded

	err, DispatcherAdded := retrieveSwarmSpecDispatcherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DispatcherAdded

	err, EncryptionConfigAdded := retrieveSwarmSpecEncryptionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EncryptionConfigAdded

	err, LabelsAdded := retrieveSwarmSpecLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, NameAdded := retrieveSwarmSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OrchestrationAdded := retrieveSwarmSpecOrchestrationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OrchestrationAdded

	err, RaftAdded := retrieveSwarmSpecRaftFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RaftAdded

	err, TaskDefaultsAdded := retrieveSwarmSpecTaskDefaultsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TaskDefaultsAdded

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CAConfigFlagName := fmt.Sprintf("%v.CAConfig", cmdPrefix)
	if cmd.Flags().Changed(CAConfigFlagName) {
		// info: complex object CAConfig SwarmSpecCAConfig is retrieved outside this Changed() block
	}
	CAConfigFlagValue := m.CAConfig
	if swag.IsZero(CAConfigFlagValue) {
		CAConfigFlagValue = &models.SwarmSpecCAConfig{}
	}

	err, CAConfigAdded := retrieveModelSwarmSpecCAConfigFlags(depth+1, CAConfigFlagValue, CAConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CAConfigAdded
	if CAConfigAdded {
		m.CAConfig = CAConfigFlagValue
	}

	return nil, retAdded
}

func retrieveSwarmSpecDispatcherFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DispatcherFlagName := fmt.Sprintf("%v.Dispatcher", cmdPrefix)
	if cmd.Flags().Changed(DispatcherFlagName) {
		// info: complex object Dispatcher SwarmSpecDispatcher is retrieved outside this Changed() block
	}
	DispatcherFlagValue := m.Dispatcher
	if swag.IsZero(DispatcherFlagValue) {
		DispatcherFlagValue = &models.SwarmSpecDispatcher{}
	}

	err, DispatcherAdded := retrieveModelSwarmSpecDispatcherFlags(depth+1, DispatcherFlagValue, DispatcherFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DispatcherAdded
	if DispatcherAdded {
		m.Dispatcher = DispatcherFlagValue
	}

	return nil, retAdded
}

func retrieveSwarmSpecEncryptionConfigFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EncryptionConfigFlagName := fmt.Sprintf("%v.EncryptionConfig", cmdPrefix)
	if cmd.Flags().Changed(EncryptionConfigFlagName) {
		// info: complex object EncryptionConfig SwarmSpecEncryptionConfig is retrieved outside this Changed() block
	}
	EncryptionConfigFlagValue := m.EncryptionConfig
	if swag.IsZero(EncryptionConfigFlagValue) {
		EncryptionConfigFlagValue = &models.SwarmSpecEncryptionConfig{}
	}

	err, EncryptionConfigAdded := retrieveModelSwarmSpecEncryptionConfigFlags(depth+1, EncryptionConfigFlagValue, EncryptionConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EncryptionConfigAdded
	if EncryptionConfigAdded {
		m.EncryptionConfig = EncryptionConfigFlagValue
	}

	return nil, retAdded
}

func retrieveSwarmSpecLabelsFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSwarmSpecNameFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecOrchestrationFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OrchestrationFlagName := fmt.Sprintf("%v.Orchestration", cmdPrefix)
	if cmd.Flags().Changed(OrchestrationFlagName) {
		// info: complex object Orchestration SwarmSpecOrchestration is retrieved outside this Changed() block
	}
	OrchestrationFlagValue := m.Orchestration
	if swag.IsZero(OrchestrationFlagValue) {
		OrchestrationFlagValue = &models.SwarmSpecOrchestration{}
	}

	err, OrchestrationAdded := retrieveModelSwarmSpecOrchestrationFlags(depth+1, OrchestrationFlagValue, OrchestrationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OrchestrationAdded
	if OrchestrationAdded {
		m.Orchestration = OrchestrationFlagValue
	}

	return nil, retAdded
}

func retrieveSwarmSpecRaftFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RaftFlagName := fmt.Sprintf("%v.Raft", cmdPrefix)
	if cmd.Flags().Changed(RaftFlagName) {
		// info: complex object Raft SwarmSpecRaft is retrieved outside this Changed() block
	}
	RaftFlagValue := m.Raft
	if swag.IsZero(RaftFlagValue) {
		RaftFlagValue = &models.SwarmSpecRaft{}
	}

	err, RaftAdded := retrieveModelSwarmSpecRaftFlags(depth+1, RaftFlagValue, RaftFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RaftAdded
	if RaftAdded {
		m.Raft = RaftFlagValue
	}

	return nil, retAdded
}

func retrieveSwarmSpecTaskDefaultsFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TaskDefaultsFlagName := fmt.Sprintf("%v.TaskDefaults", cmdPrefix)
	if cmd.Flags().Changed(TaskDefaultsFlagName) {
		// info: complex object TaskDefaults SwarmSpecTaskDefaults is retrieved outside this Changed() block
	}
	TaskDefaultsFlagValue := m.TaskDefaults
	if swag.IsZero(TaskDefaultsFlagValue) {
		TaskDefaultsFlagValue = &models.SwarmSpecTaskDefaults{}
	}

	err, TaskDefaultsAdded := retrieveModelSwarmSpecTaskDefaultsFlags(depth+1, TaskDefaultsFlagValue, TaskDefaultsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TaskDefaultsAdded
	if TaskDefaultsAdded {
		m.TaskDefaults = TaskDefaultsFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for SwarmSpecCAConfig

// register flags to command
func registerModelSwarmSpecCAConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecCAConfigExternalCAs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecCAConfigForceRotate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecCAConfigNodeCertExpiry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecCAConfigSigningCACert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecCAConfigSigningCAKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecCAConfigExternalCAs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ExternalCAs []*SwarmSpecCAConfigExternalCAsItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerSwarmSpecCAConfigForceRotate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive ForceRotate uint64 is not supported by go-swagger cli yet

	return nil
}

func registerSwarmSpecCAConfigNodeCertExpiry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NodeCertExpiryDescription := `The duration node certificates are issued for.`

	var NodeCertExpiryFlagName string
	if cmdPrefix == "" {
		NodeCertExpiryFlagName = "NodeCertExpiry"
	} else {
		NodeCertExpiryFlagName = fmt.Sprintf("%v.NodeCertExpiry", cmdPrefix)
	}

	var NodeCertExpiryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(NodeCertExpiryFlagName, NodeCertExpiryFlagDefault, NodeCertExpiryDescription)

	return nil
}

func registerSwarmSpecCAConfigSigningCACert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SigningCACertDescription := `The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.`

	var SigningCACertFlagName string
	if cmdPrefix == "" {
		SigningCACertFlagName = "SigningCACert"
	} else {
		SigningCACertFlagName = fmt.Sprintf("%v.SigningCACert", cmdPrefix)
	}

	var SigningCACertFlagDefault string

	_ = cmd.PersistentFlags().String(SigningCACertFlagName, SigningCACertFlagDefault, SigningCACertDescription)

	return nil
}

func registerSwarmSpecCAConfigSigningCAKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SigningCAKeyDescription := `The desired signing CA key for all swarm node TLS leaf certificates, in PEM format.`

	var SigningCAKeyFlagName string
	if cmdPrefix == "" {
		SigningCAKeyFlagName = "SigningCAKey"
	} else {
		SigningCAKeyFlagName = fmt.Sprintf("%v.SigningCAKey", cmdPrefix)
	}

	var SigningCAKeyFlagDefault string

	_ = cmd.PersistentFlags().String(SigningCAKeyFlagName, SigningCAKeyFlagDefault, SigningCAKeyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecCAConfigFlags(depth int, m *models.SwarmSpecCAConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ExternalCAsAdded := retrieveSwarmSpecCAConfigExternalCAsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExternalCAsAdded

	err, ForceRotateAdded := retrieveSwarmSpecCAConfigForceRotateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ForceRotateAdded

	err, NodeCertExpiryAdded := retrieveSwarmSpecCAConfigNodeCertExpiryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NodeCertExpiryAdded

	err, SigningCACertAdded := retrieveSwarmSpecCAConfigSigningCACertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SigningCACertAdded

	err, SigningCAKeyAdded := retrieveSwarmSpecCAConfigSigningCAKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SigningCAKeyAdded

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigExternalCAsFlags(depth int, m *models.SwarmSpecCAConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ExternalCAsFlagName := fmt.Sprintf("%v.ExternalCAs", cmdPrefix)
	if cmd.Flags().Changed(ExternalCAsFlagName) {
		// warning: ExternalCAs array type []*SwarmSpecCAConfigExternalCAsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigForceRotateFlags(depth int, m *models.SwarmSpecCAConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ForceRotateFlagName := fmt.Sprintf("%v.ForceRotate", cmdPrefix)
	if cmd.Flags().Changed(ForceRotateFlagName) {

		// warning: primitive ForceRotate uint64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigNodeCertExpiryFlags(depth int, m *models.SwarmSpecCAConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NodeCertExpiryFlagName := fmt.Sprintf("%v.NodeCertExpiry", cmdPrefix)
	if cmd.Flags().Changed(NodeCertExpiryFlagName) {

		var NodeCertExpiryFlagName string
		if cmdPrefix == "" {
			NodeCertExpiryFlagName = "NodeCertExpiry"
		} else {
			NodeCertExpiryFlagName = fmt.Sprintf("%v.NodeCertExpiry", cmdPrefix)
		}

		NodeCertExpiryFlagValue, err := cmd.Flags().GetInt64(NodeCertExpiryFlagName)
		if err != nil {
			return err, false
		}
		m.NodeCertExpiry = NodeCertExpiryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigSigningCACertFlags(depth int, m *models.SwarmSpecCAConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SigningCACertFlagName := fmt.Sprintf("%v.SigningCACert", cmdPrefix)
	if cmd.Flags().Changed(SigningCACertFlagName) {

		var SigningCACertFlagName string
		if cmdPrefix == "" {
			SigningCACertFlagName = "SigningCACert"
		} else {
			SigningCACertFlagName = fmt.Sprintf("%v.SigningCACert", cmdPrefix)
		}

		SigningCACertFlagValue, err := cmd.Flags().GetString(SigningCACertFlagName)
		if err != nil {
			return err, false
		}
		m.SigningCACert = SigningCACertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigSigningCAKeyFlags(depth int, m *models.SwarmSpecCAConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SigningCAKeyFlagName := fmt.Sprintf("%v.SigningCAKey", cmdPrefix)
	if cmd.Flags().Changed(SigningCAKeyFlagName) {

		var SigningCAKeyFlagName string
		if cmdPrefix == "" {
			SigningCAKeyFlagName = "SigningCAKey"
		} else {
			SigningCAKeyFlagName = fmt.Sprintf("%v.SigningCAKey", cmdPrefix)
		}

		SigningCAKeyFlagValue, err := cmd.Flags().GetString(SigningCAKeyFlagName)
		if err != nil {
			return err, false
		}
		m.SigningCAKey = SigningCAKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SwarmSpecCAConfigExternalCAsItems0

// register flags to command
func registerModelSwarmSpecCAConfigExternalCAsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecCAConfigExternalCAsItems0CACert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecCAConfigExternalCAsItems0Options(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecCAConfigExternalCAsItems0Protocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecCAConfigExternalCAsItems0URL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecCAConfigExternalCAsItems0CACert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CACertDescription := `The root CA certificate (in PEM format) this external CA uses to issue TLS certificates (assumed to be to the current swarm root CA certificate if not provided).`

	var CACertFlagName string
	if cmdPrefix == "" {
		CACertFlagName = "CACert"
	} else {
		CACertFlagName = fmt.Sprintf("%v.CACert", cmdPrefix)
	}

	var CACertFlagDefault string

	_ = cmd.PersistentFlags().String(CACertFlagName, CACertFlagDefault, CACertDescription)

	return nil
}

func registerSwarmSpecCAConfigExternalCAsItems0Options(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerSwarmSpecCAConfigExternalCAsItems0Protocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ProtocolDescription := `Enum: ["cfssl"]. Protocol for communication with the external CA (currently only ` + "`" + `cfssl` + "`" + ` is supported).`

	var ProtocolFlagName string
	if cmdPrefix == "" {
		ProtocolFlagName = "Protocol"
	} else {
		ProtocolFlagName = fmt.Sprintf("%v.Protocol", cmdPrefix)
	}

	var ProtocolFlagDefault string = "cfssl"

	_ = cmd.PersistentFlags().String(ProtocolFlagName, ProtocolFlagDefault, ProtocolDescription)

	if err := cmd.RegisterFlagCompletionFunc(ProtocolFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["cfssl"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecCAConfigExternalCAsItems0URL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	URLDescription := `URL where certificate signing requests should be sent.`

	var URLFlagName string
	if cmdPrefix == "" {
		URLFlagName = "URL"
	} else {
		URLFlagName = fmt.Sprintf("%v.URL", cmdPrefix)
	}

	var URLFlagDefault string

	_ = cmd.PersistentFlags().String(URLFlagName, URLFlagDefault, URLDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecCAConfigExternalCAsItems0Flags(depth int, m *models.SwarmSpecCAConfigExternalCAsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CACertAdded := retrieveSwarmSpecCAConfigExternalCAsItems0CACertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CACertAdded

	err, OptionsAdded := retrieveSwarmSpecCAConfigExternalCAsItems0OptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	err, ProtocolAdded := retrieveSwarmSpecCAConfigExternalCAsItems0ProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProtocolAdded

	err, URLAdded := retrieveSwarmSpecCAConfigExternalCAsItems0URLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || URLAdded

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigExternalCAsItems0CACertFlags(depth int, m *models.SwarmSpecCAConfigExternalCAsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CACertFlagName := fmt.Sprintf("%v.CACert", cmdPrefix)
	if cmd.Flags().Changed(CACertFlagName) {

		var CACertFlagName string
		if cmdPrefix == "" {
			CACertFlagName = "CACert"
		} else {
			CACertFlagName = fmt.Sprintf("%v.CACert", cmdPrefix)
		}

		CACertFlagValue, err := cmd.Flags().GetString(CACertFlagName)
		if err != nil {
			return err, false
		}
		m.CACert = CACertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigExternalCAsItems0OptionsFlags(depth int, m *models.SwarmSpecCAConfigExternalCAsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigExternalCAsItems0ProtocolFlags(depth int, m *models.SwarmSpecCAConfigExternalCAsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ProtocolFlagName := fmt.Sprintf("%v.Protocol", cmdPrefix)
	if cmd.Flags().Changed(ProtocolFlagName) {

		var ProtocolFlagName string
		if cmdPrefix == "" {
			ProtocolFlagName = "Protocol"
		} else {
			ProtocolFlagName = fmt.Sprintf("%v.Protocol", cmdPrefix)
		}

		ProtocolFlagValue, err := cmd.Flags().GetString(ProtocolFlagName)
		if err != nil {
			return err, false
		}
		m.Protocol = &ProtocolFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigExternalCAsItems0URLFlags(depth int, m *models.SwarmSpecCAConfigExternalCAsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	URLFlagName := fmt.Sprintf("%v.URL", cmdPrefix)
	if cmd.Flags().Changed(URLFlagName) {

		var URLFlagName string
		if cmdPrefix == "" {
			URLFlagName = "URL"
		} else {
			URLFlagName = fmt.Sprintf("%v.URL", cmdPrefix)
		}

		URLFlagValue, err := cmd.Flags().GetString(URLFlagName)
		if err != nil {
			return err, false
		}
		m.URL = URLFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SwarmSpecDispatcher

// register flags to command
func registerModelSwarmSpecDispatcherFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecDispatcherHeartbeatPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecDispatcherHeartbeatPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HeartbeatPeriodDescription := `The delay for an agent to send a heartbeat to the dispatcher.`

	var HeartbeatPeriodFlagName string
	if cmdPrefix == "" {
		HeartbeatPeriodFlagName = "HeartbeatPeriod"
	} else {
		HeartbeatPeriodFlagName = fmt.Sprintf("%v.HeartbeatPeriod", cmdPrefix)
	}

	var HeartbeatPeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(HeartbeatPeriodFlagName, HeartbeatPeriodFlagDefault, HeartbeatPeriodDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecDispatcherFlags(depth int, m *models.SwarmSpecDispatcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, HeartbeatPeriodAdded := retrieveSwarmSpecDispatcherHeartbeatPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HeartbeatPeriodAdded

	return nil, retAdded
}

func retrieveSwarmSpecDispatcherHeartbeatPeriodFlags(depth int, m *models.SwarmSpecDispatcher, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HeartbeatPeriodFlagName := fmt.Sprintf("%v.HeartbeatPeriod", cmdPrefix)
	if cmd.Flags().Changed(HeartbeatPeriodFlagName) {

		var HeartbeatPeriodFlagName string
		if cmdPrefix == "" {
			HeartbeatPeriodFlagName = "HeartbeatPeriod"
		} else {
			HeartbeatPeriodFlagName = fmt.Sprintf("%v.HeartbeatPeriod", cmdPrefix)
		}

		HeartbeatPeriodFlagValue, err := cmd.Flags().GetInt64(HeartbeatPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.HeartbeatPeriod = HeartbeatPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SwarmSpecEncryptionConfig

// register flags to command
func registerModelSwarmSpecEncryptionConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecEncryptionConfigAutoLockManagers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecEncryptionConfigAutoLockManagers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AutoLockManagersDescription := `If set, generate a key and use it to lock data stored on the managers.`

	var AutoLockManagersFlagName string
	if cmdPrefix == "" {
		AutoLockManagersFlagName = "AutoLockManagers"
	} else {
		AutoLockManagersFlagName = fmt.Sprintf("%v.AutoLockManagers", cmdPrefix)
	}

	var AutoLockManagersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(AutoLockManagersFlagName, AutoLockManagersFlagDefault, AutoLockManagersDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecEncryptionConfigFlags(depth int, m *models.SwarmSpecEncryptionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AutoLockManagersAdded := retrieveSwarmSpecEncryptionConfigAutoLockManagersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AutoLockManagersAdded

	return nil, retAdded
}

func retrieveSwarmSpecEncryptionConfigAutoLockManagersFlags(depth int, m *models.SwarmSpecEncryptionConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AutoLockManagersFlagName := fmt.Sprintf("%v.AutoLockManagers", cmdPrefix)
	if cmd.Flags().Changed(AutoLockManagersFlagName) {

		var AutoLockManagersFlagName string
		if cmdPrefix == "" {
			AutoLockManagersFlagName = "AutoLockManagers"
		} else {
			AutoLockManagersFlagName = fmt.Sprintf("%v.AutoLockManagers", cmdPrefix)
		}

		AutoLockManagersFlagValue, err := cmd.Flags().GetBool(AutoLockManagersFlagName)
		if err != nil {
			return err, false
		}
		m.AutoLockManagers = AutoLockManagersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SwarmSpecOrchestration

// register flags to command
func registerModelSwarmSpecOrchestrationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecOrchestrationTaskHistoryRetentionLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecOrchestrationTaskHistoryRetentionLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TaskHistoryRetentionLimitDescription := `The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks.`

	var TaskHistoryRetentionLimitFlagName string
	if cmdPrefix == "" {
		TaskHistoryRetentionLimitFlagName = "TaskHistoryRetentionLimit"
	} else {
		TaskHistoryRetentionLimitFlagName = fmt.Sprintf("%v.TaskHistoryRetentionLimit", cmdPrefix)
	}

	var TaskHistoryRetentionLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(TaskHistoryRetentionLimitFlagName, TaskHistoryRetentionLimitFlagDefault, TaskHistoryRetentionLimitDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecOrchestrationFlags(depth int, m *models.SwarmSpecOrchestration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, TaskHistoryRetentionLimitAdded := retrieveSwarmSpecOrchestrationTaskHistoryRetentionLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TaskHistoryRetentionLimitAdded

	return nil, retAdded
}

func retrieveSwarmSpecOrchestrationTaskHistoryRetentionLimitFlags(depth int, m *models.SwarmSpecOrchestration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TaskHistoryRetentionLimitFlagName := fmt.Sprintf("%v.TaskHistoryRetentionLimit", cmdPrefix)
	if cmd.Flags().Changed(TaskHistoryRetentionLimitFlagName) {

		var TaskHistoryRetentionLimitFlagName string
		if cmdPrefix == "" {
			TaskHistoryRetentionLimitFlagName = "TaskHistoryRetentionLimit"
		} else {
			TaskHistoryRetentionLimitFlagName = fmt.Sprintf("%v.TaskHistoryRetentionLimit", cmdPrefix)
		}

		TaskHistoryRetentionLimitFlagValue, err := cmd.Flags().GetInt64(TaskHistoryRetentionLimitFlagName)
		if err != nil {
			return err, false
		}
		m.TaskHistoryRetentionLimit = TaskHistoryRetentionLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SwarmSpecRaft

// register flags to command
func registerModelSwarmSpecRaftFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecRaftElectionTick(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecRaftHeartbeatTick(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecRaftKeepOldSnapshots(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecRaftLogEntriesForSlowFollowers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecRaftSnapshotInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecRaftElectionTick(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ElectionTickDescription := `The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. ` + "`" + `ElectionTick` + "`" + ` must be greater than ` + "`" + `HeartbeatTick` + "`" + `.

A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
`

	var ElectionTickFlagName string
	if cmdPrefix == "" {
		ElectionTickFlagName = "ElectionTick"
	} else {
		ElectionTickFlagName = fmt.Sprintf("%v.ElectionTick", cmdPrefix)
	}

	var ElectionTickFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ElectionTickFlagName, ElectionTickFlagDefault, ElectionTickDescription)

	return nil
}

func registerSwarmSpecRaftHeartbeatTick(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	HeartbeatTickDescription := `The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.

A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
`

	var HeartbeatTickFlagName string
	if cmdPrefix == "" {
		HeartbeatTickFlagName = "HeartbeatTick"
	} else {
		HeartbeatTickFlagName = fmt.Sprintf("%v.HeartbeatTick", cmdPrefix)
	}

	var HeartbeatTickFlagDefault int64

	_ = cmd.PersistentFlags().Int64(HeartbeatTickFlagName, HeartbeatTickFlagDefault, HeartbeatTickDescription)

	return nil
}

func registerSwarmSpecRaftKeepOldSnapshots(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive KeepOldSnapshots uint64 is not supported by go-swagger cli yet

	return nil
}

func registerSwarmSpecRaftLogEntriesForSlowFollowers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive LogEntriesForSlowFollowers uint64 is not supported by go-swagger cli yet

	return nil
}

func registerSwarmSpecRaftSnapshotInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive SnapshotInterval uint64 is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecRaftFlags(depth int, m *models.SwarmSpecRaft, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ElectionTickAdded := retrieveSwarmSpecRaftElectionTickFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ElectionTickAdded

	err, HeartbeatTickAdded := retrieveSwarmSpecRaftHeartbeatTickFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HeartbeatTickAdded

	err, KeepOldSnapshotsAdded := retrieveSwarmSpecRaftKeepOldSnapshotsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KeepOldSnapshotsAdded

	err, LogEntriesForSlowFollowersAdded := retrieveSwarmSpecRaftLogEntriesForSlowFollowersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogEntriesForSlowFollowersAdded

	err, SnapshotIntervalAdded := retrieveSwarmSpecRaftSnapshotIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnapshotIntervalAdded

	return nil, retAdded
}

func retrieveSwarmSpecRaftElectionTickFlags(depth int, m *models.SwarmSpecRaft, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ElectionTickFlagName := fmt.Sprintf("%v.ElectionTick", cmdPrefix)
	if cmd.Flags().Changed(ElectionTickFlagName) {

		var ElectionTickFlagName string
		if cmdPrefix == "" {
			ElectionTickFlagName = "ElectionTick"
		} else {
			ElectionTickFlagName = fmt.Sprintf("%v.ElectionTick", cmdPrefix)
		}

		ElectionTickFlagValue, err := cmd.Flags().GetInt64(ElectionTickFlagName)
		if err != nil {
			return err, false
		}
		m.ElectionTick = ElectionTickFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecRaftHeartbeatTickFlags(depth int, m *models.SwarmSpecRaft, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	HeartbeatTickFlagName := fmt.Sprintf("%v.HeartbeatTick", cmdPrefix)
	if cmd.Flags().Changed(HeartbeatTickFlagName) {

		var HeartbeatTickFlagName string
		if cmdPrefix == "" {
			HeartbeatTickFlagName = "HeartbeatTick"
		} else {
			HeartbeatTickFlagName = fmt.Sprintf("%v.HeartbeatTick", cmdPrefix)
		}

		HeartbeatTickFlagValue, err := cmd.Flags().GetInt64(HeartbeatTickFlagName)
		if err != nil {
			return err, false
		}
		m.HeartbeatTick = HeartbeatTickFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecRaftKeepOldSnapshotsFlags(depth int, m *models.SwarmSpecRaft, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	KeepOldSnapshotsFlagName := fmt.Sprintf("%v.KeepOldSnapshots", cmdPrefix)
	if cmd.Flags().Changed(KeepOldSnapshotsFlagName) {

		// warning: primitive KeepOldSnapshots uint64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecRaftLogEntriesForSlowFollowersFlags(depth int, m *models.SwarmSpecRaft, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LogEntriesForSlowFollowersFlagName := fmt.Sprintf("%v.LogEntriesForSlowFollowers", cmdPrefix)
	if cmd.Flags().Changed(LogEntriesForSlowFollowersFlagName) {

		// warning: primitive LogEntriesForSlowFollowers uint64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecRaftSnapshotIntervalFlags(depth int, m *models.SwarmSpecRaft, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SnapshotIntervalFlagName := fmt.Sprintf("%v.SnapshotInterval", cmdPrefix)
	if cmd.Flags().Changed(SnapshotIntervalFlagName) {

		// warning: primitive SnapshotInterval uint64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for SwarmSpecTaskDefaults

// register flags to command
func registerModelSwarmSpecTaskDefaultsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecTaskDefaultsLogDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecTaskDefaultsLogDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var LogDriverFlagName string
	if cmdPrefix == "" {
		LogDriverFlagName = "LogDriver"
	} else {
		LogDriverFlagName = fmt.Sprintf("%v.LogDriver", cmdPrefix)
	}

	if err := registerModelSwarmSpecTaskDefaultsLogDriverFlags(depth+1, LogDriverFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecTaskDefaultsFlags(depth int, m *models.SwarmSpecTaskDefaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LogDriverAdded := retrieveSwarmSpecTaskDefaultsLogDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogDriverAdded

	return nil, retAdded
}

func retrieveSwarmSpecTaskDefaultsLogDriverFlags(depth int, m *models.SwarmSpecTaskDefaults, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LogDriverFlagName := fmt.Sprintf("%v.LogDriver", cmdPrefix)
	if cmd.Flags().Changed(LogDriverFlagName) {
		// info: complex object LogDriver SwarmSpecTaskDefaultsLogDriver is retrieved outside this Changed() block
	}
	LogDriverFlagValue := m.LogDriver
	if swag.IsZero(LogDriverFlagValue) {
		LogDriverFlagValue = &models.SwarmSpecTaskDefaultsLogDriver{}
	}

	err, LogDriverAdded := retrieveModelSwarmSpecTaskDefaultsLogDriverFlags(depth+1, LogDriverFlagValue, LogDriverFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LogDriverAdded
	if LogDriverAdded {
		m.LogDriver = LogDriverFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for SwarmSpecTaskDefaultsLogDriver

// register flags to command
func registerModelSwarmSpecTaskDefaultsLogDriverFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecTaskDefaultsLogDriverName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecTaskDefaultsLogDriverOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecTaskDefaultsLogDriverName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := `The log driver to use as a default for new tasks.
`

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

func registerSwarmSpecTaskDefaultsLogDriverOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Options map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecTaskDefaultsLogDriverFlags(depth int, m *models.SwarmSpecTaskDefaultsLogDriver, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveSwarmSpecTaskDefaultsLogDriverNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OptionsAdded := retrieveSwarmSpecTaskDefaultsLogDriverOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OptionsAdded

	return nil, retAdded
}

func retrieveSwarmSpecTaskDefaultsLogDriverNameFlags(depth int, m *models.SwarmSpecTaskDefaultsLogDriver, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSwarmSpecTaskDefaultsLogDriverOptionsFlags(depth int, m *models.SwarmSpecTaskDefaultsLogDriver, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	OptionsFlagName := fmt.Sprintf("%v.Options", cmdPrefix)
	if cmd.Flags().Changed(OptionsFlagName) {
		// warning: Options map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
