// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for PluginInterfaceType

// register flags to command
func registerModelPluginInterfaceTypeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginInterfaceTypeCapability(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginInterfaceTypePrefix(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginInterfaceTypeVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginInterfaceTypeCapability(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CapabilityDescription := `Required. `

	var CapabilityFlagName string
	if cmdPrefix == "" {
		CapabilityFlagName = "Capability"
	} else {
		CapabilityFlagName = fmt.Sprintf("%v.Capability", cmdPrefix)
	}

	var CapabilityFlagDefault string

	_ = cmd.PersistentFlags().String(CapabilityFlagName, CapabilityFlagDefault, CapabilityDescription)

	return nil
}

func registerPluginInterfaceTypePrefix(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PrefixDescription := `Required. `

	var PrefixFlagName string
	if cmdPrefix == "" {
		PrefixFlagName = "Prefix"
	} else {
		PrefixFlagName = fmt.Sprintf("%v.Prefix", cmdPrefix)
	}

	var PrefixFlagDefault string

	_ = cmd.PersistentFlags().String(PrefixFlagName, PrefixFlagDefault, PrefixDescription)

	return nil
}

func registerPluginInterfaceTypeVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	VersionDescription := `Required. `

	var VersionFlagName string
	if cmdPrefix == "" {
		VersionFlagName = "Version"
	} else {
		VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	var VersionFlagDefault string

	_ = cmd.PersistentFlags().String(VersionFlagName, VersionFlagDefault, VersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginInterfaceTypeFlags(depth int, m *models.PluginInterfaceType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CapabilityAdded := retrievePluginInterfaceTypeCapabilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CapabilityAdded

	err, PrefixAdded := retrievePluginInterfaceTypePrefixFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PrefixAdded

	err, VersionAdded := retrievePluginInterfaceTypeVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrievePluginInterfaceTypeCapabilityFlags(depth int, m *models.PluginInterfaceType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CapabilityFlagName := fmt.Sprintf("%v.Capability", cmdPrefix)
	if cmd.Flags().Changed(CapabilityFlagName) {

		var CapabilityFlagName string
		if cmdPrefix == "" {
			CapabilityFlagName = "Capability"
		} else {
			CapabilityFlagName = fmt.Sprintf("%v.Capability", cmdPrefix)
		}

		CapabilityFlagValue, err := cmd.Flags().GetString(CapabilityFlagName)
		if err != nil {
			return err, false
		}
		m.Capability = CapabilityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginInterfaceTypePrefixFlags(depth int, m *models.PluginInterfaceType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PrefixFlagName := fmt.Sprintf("%v.Prefix", cmdPrefix)
	if cmd.Flags().Changed(PrefixFlagName) {

		var PrefixFlagName string
		if cmdPrefix == "" {
			PrefixFlagName = "Prefix"
		} else {
			PrefixFlagName = fmt.Sprintf("%v.Prefix", cmdPrefix)
		}

		PrefixFlagValue, err := cmd.Flags().GetString(PrefixFlagName)
		if err != nil {
			return err, false
		}
		m.Prefix = PrefixFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePluginInterfaceTypeVersionFlags(depth int, m *models.PluginInterfaceType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VersionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(VersionFlagName) {

		var VersionFlagName string
		if cmdPrefix == "" {
			VersionFlagName = "Version"
		} else {
			VersionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
		}

		VersionFlagValue, err := cmd.Flags().GetString(VersionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = VersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
