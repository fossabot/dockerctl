// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for NetworkContainer

// register flags to command
func registerModelNetworkContainerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNetworkContainerEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkContainerIPV4Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkContainerIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkContainerMacAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkContainerName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkContainerEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	EndpointIDDescription := ``

	var EndpointIDFlagName string
	if cmdPrefix == "" {
		EndpointIDFlagName = "EndpointID"
	} else {
		EndpointIDFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
	}

	var EndpointIDFlagDefault string

	_ = cmd.PersistentFlags().String(EndpointIDFlagName, EndpointIDFlagDefault, EndpointIDDescription)

	return nil
}

func registerNetworkContainerIPV4Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPV4AddressDescription := ``

	var IPV4AddressFlagName string
	if cmdPrefix == "" {
		IPV4AddressFlagName = "IPv4Address"
	} else {
		IPV4AddressFlagName = fmt.Sprintf("%v.IPv4Address", cmdPrefix)
	}

	var IPV4AddressFlagDefault string

	_ = cmd.PersistentFlags().String(IPV4AddressFlagName, IPV4AddressFlagDefault, IPV4AddressDescription)

	return nil
}

func registerNetworkContainerIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPV6AddressDescription := ``

	var IPV6AddressFlagName string
	if cmdPrefix == "" {
		IPV6AddressFlagName = "IPv6Address"
	} else {
		IPV6AddressFlagName = fmt.Sprintf("%v.IPv6Address", cmdPrefix)
	}

	var IPV6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(IPV6AddressFlagName, IPV6AddressFlagDefault, IPV6AddressDescription)

	return nil
}

func registerNetworkContainerMacAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MacAddressDescription := ``

	var MacAddressFlagName string
	if cmdPrefix == "" {
		MacAddressFlagName = "MacAddress"
	} else {
		MacAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
	}

	var MacAddressFlagDefault string

	_ = cmd.PersistentFlags().String(MacAddressFlagName, MacAddressFlagDefault, MacAddressDescription)

	return nil
}

func registerNetworkContainerName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NameDescription := ``

	var NameFlagName string
	if cmdPrefix == "" {
		NameFlagName = "Name"
	} else {
		NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var NameFlagDefault string

	_ = cmd.PersistentFlags().String(NameFlagName, NameFlagDefault, NameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNetworkContainerFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EndpointIDAdded := retrieveNetworkContainerEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EndpointIDAdded

	err, IPV4AddressAdded := retrieveNetworkContainerIPV4AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPV4AddressAdded

	err, IPV6AddressAdded := retrieveNetworkContainerIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPV6AddressAdded

	err, MacAddressAdded := retrieveNetworkContainerMacAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MacAddressAdded

	err, NameAdded := retrieveNetworkContainerNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	return nil, retAdded
}

func retrieveNetworkContainerEndpointIDFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EndpointIDFlagName := fmt.Sprintf("%v.EndpointID", cmdPrefix)
	if cmd.Flags().Changed(EndpointIDFlagName) {

		var EndpointIDFlagName string
		if cmdPrefix == "" {
			EndpointIDFlagName = "EndpointID"
		} else {
			EndpointIDFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
		}

		EndpointIDFlagValue, err := cmd.Flags().GetString(EndpointIDFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = EndpointIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkContainerIPV4AddressFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPV4AddressFlagName := fmt.Sprintf("%v.IPv4Address", cmdPrefix)
	if cmd.Flags().Changed(IPV4AddressFlagName) {

		var IPV4AddressFlagName string
		if cmdPrefix == "" {
			IPV4AddressFlagName = "IPv4Address"
		} else {
			IPV4AddressFlagName = fmt.Sprintf("%v.IPv4Address", cmdPrefix)
		}

		IPV4AddressFlagValue, err := cmd.Flags().GetString(IPV4AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4Address = IPV4AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkContainerIPV6AddressFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPV6AddressFlagName := fmt.Sprintf("%v.IPv6Address", cmdPrefix)
	if cmd.Flags().Changed(IPV6AddressFlagName) {

		var IPV6AddressFlagName string
		if cmdPrefix == "" {
			IPV6AddressFlagName = "IPv6Address"
		} else {
			IPV6AddressFlagName = fmt.Sprintf("%v.IPv6Address", cmdPrefix)
		}

		IPV6AddressFlagValue, err := cmd.Flags().GetString(IPV6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Address = IPV6AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkContainerMacAddressFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MacAddressFlagName := fmt.Sprintf("%v.MacAddress", cmdPrefix)
	if cmd.Flags().Changed(MacAddressFlagName) {

		var MacAddressFlagName string
		if cmdPrefix == "" {
			MacAddressFlagName = "MacAddress"
		} else {
			MacAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
		}

		MacAddressFlagValue, err := cmd.Flags().GetString(MacAddressFlagName)
		if err != nil {
			return err, false
		}
		m.MacAddress = MacAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkContainerNameFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(NameFlagName) {

		var NameFlagName string
		if cmdPrefix == "" {
			NameFlagName = "Name"
		} else {
			NameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		NameFlagValue, err := cmd.Flags().GetString(NameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = NameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
