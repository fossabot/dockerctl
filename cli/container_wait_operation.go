// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerWaitCmd returns a cmd to handle operation containerWait
func makeOperationContainerContainerWaitCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerWait",
		Short: `Block until a container stops, then returns the exit code.`,
		RunE:  runOperationContainerContainerWait,
	}

	if err := registerOperationContainerContainerWaitParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerWait uses cmd flags to call endpoint api
func runOperationContainerContainerWait(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerWaitParams()
	if err, _ := retrieveOperationContainerContainerWaitConditionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerWaitIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationContainerContainerWaitResult(appCli.Container.ContainerWait(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationContainerContainerWaitParamFlags registers all flags needed to fill params
func registerOperationContainerContainerWaitParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerWaitConditionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerWaitIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerWaitConditionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	ConditionDescription := `Wait until a container state reaches the given condition, either 'not-running' (default), 'next-exit', or 'removed'.`

	var ConditionFlagName string
	if cmdPrefix == "" {
		ConditionFlagName = "condition"
	} else {
		ConditionFlagName = fmt.Sprintf("%v.condition", cmdPrefix)
	}

	var ConditionFlagDefault string = "not-running"

	_ = cmd.PersistentFlags().String(ConditionFlagName, ConditionFlagDefault, ConditionDescription)

	return nil
}
func registerOperationContainerContainerWaitIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	IDDescription := `Required. ID or name of the container`

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func retrieveOperationContainerContainerWaitConditionFlag(m *container.ContainerWaitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("condition") {

		var ConditionFlagName string
		if cmdPrefix == "" {
			ConditionFlagName = "condition"
		} else {
			ConditionFlagName = fmt.Sprintf("%v.condition", cmdPrefix)
		}

		ConditionFlagValue, err := cmd.Flags().GetString(ConditionFlagName)
		if err != nil {
			return err, false
		}
		m.Condition = &ConditionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerWaitIDFlag(m *container.ContainerWaitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

	}
	return nil, retAdded
}

// parseOperationContainerContainerWaitResult parses request result and return the string content
func parseOperationContainerContainerWaitResult(resp0 *container.ContainerWaitOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*container.ContainerWaitOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerWaitNotFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerWaitInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelContainerWaitOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerWaitOKBodyError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerWaitOKBodyStatusCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerWaitOKBodyError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ErrorFlagName string
	if cmdPrefix == "" {
		ErrorFlagName = "Error"
	} else {
		ErrorFlagName = fmt.Sprintf("%v.Error", cmdPrefix)
	}

	if err := registerModelContainerWaitOKBodyErrorFlags(depth+1, ErrorFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerWaitOKBodyStatusCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	StatusCodeDescription := `Required. Exit code of the container`

	var StatusCodeFlagName string
	if cmdPrefix == "" {
		StatusCodeFlagName = "StatusCode"
	} else {
		StatusCodeFlagName = fmt.Sprintf("%v.StatusCode", cmdPrefix)
	}

	var StatusCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(StatusCodeFlagName, StatusCodeFlagDefault, StatusCodeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerWaitOKBodyFlags(depth int, m *container.ContainerWaitOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ErrorAdded := retrieveContainerWaitOKBodyErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded

	err, StatusCodeAdded := retrieveContainerWaitOKBodyStatusCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StatusCodeAdded

	return nil, retAdded
}

func retrieveContainerWaitOKBodyErrorFlags(depth int, m *container.ContainerWaitOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ErrorFlagName := fmt.Sprintf("%v.Error", cmdPrefix)
	if cmd.Flags().Changed(ErrorFlagName) {
		// info: complex object Error ContainerWaitOKBodyError is retrieved outside this Changed() block
	}
	ErrorFlagValue := m.Error
	if swag.IsZero(ErrorFlagValue) {
		ErrorFlagValue = &container.ContainerWaitOKBodyError{}
	}

	err, ErrorAdded := retrieveModelContainerWaitOKBodyErrorFlags(depth+1, ErrorFlagValue, ErrorFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded
	if ErrorAdded {
		m.Error = ErrorFlagValue
	}

	return nil, retAdded
}

func retrieveContainerWaitOKBodyStatusCodeFlags(depth int, m *container.ContainerWaitOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	StatusCodeFlagName := fmt.Sprintf("%v.StatusCode", cmdPrefix)
	if cmd.Flags().Changed(StatusCodeFlagName) {

		var StatusCodeFlagName string
		if cmdPrefix == "" {
			StatusCodeFlagName = "StatusCode"
		} else {
			StatusCodeFlagName = fmt.Sprintf("%v.StatusCode", cmdPrefix)
		}

		StatusCodeFlagValue, err := cmd.Flags().GetInt64(StatusCodeFlagName)
		if err != nil {
			return err, false
		}
		m.StatusCode = StatusCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelContainerWaitOKBodyErrorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerWaitOKBodyErrorMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerWaitOKBodyErrorMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	MessageDescription := `Details of an error`

	var MessageFlagName string
	if cmdPrefix == "" {
		MessageFlagName = "Message"
	} else {
		MessageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
	}

	var MessageFlagDefault string

	_ = cmd.PersistentFlags().String(MessageFlagName, MessageFlagDefault, MessageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerWaitOKBodyErrorFlags(depth int, m *container.ContainerWaitOKBodyError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MessageAdded := retrieveContainerWaitOKBodyErrorMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	return nil, retAdded
}

func retrieveContainerWaitOKBodyErrorMessageFlags(depth int, m *container.ContainerWaitOKBodyError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	MessageFlagName := fmt.Sprintf("%v.Message", cmdPrefix)
	if cmd.Flags().Changed(MessageFlagName) {

		var MessageFlagName string
		if cmdPrefix == "" {
			MessageFlagName = "Message"
		} else {
			MessageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
		}

		MessageFlagValue, err := cmd.Flags().GetString(MessageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = MessageFlagValue

		retAdded = true
	}

	return nil, retAdded
}
