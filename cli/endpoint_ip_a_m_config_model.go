// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointIPAMConfig

// register flags to command
func registerModelEndpointIPAMConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointIPAMConfigIPV4Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointIPAMConfigIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointIPAMConfigLinkLocalIPs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointIPAMConfigIPV4Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPV4AddressDescription := ``

	var IPV4AddressFlagName string
	if cmdPrefix == "" {
		IPV4AddressFlagName = "IPv4Address"
	} else {
		IPV4AddressFlagName = fmt.Sprintf("%v.IPv4Address", cmdPrefix)
	}

	var IPV4AddressFlagDefault string

	_ = cmd.PersistentFlags().String(IPV4AddressFlagName, IPV4AddressFlagDefault, IPV4AddressDescription)

	return nil
}

func registerEndpointIPAMConfigIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IPV6AddressDescription := ``

	var IPV6AddressFlagName string
	if cmdPrefix == "" {
		IPV6AddressFlagName = "IPv6Address"
	} else {
		IPV6AddressFlagName = fmt.Sprintf("%v.IPv6Address", cmdPrefix)
	}

	var IPV6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(IPV6AddressFlagName, IPV6AddressFlagDefault, IPV6AddressDescription)

	return nil
}

func registerEndpointIPAMConfigLinkLocalIPs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: LinkLocalIPs []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointIPAMConfigFlags(depth int, m *models.EndpointIPAMConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IPV4AddressAdded := retrieveEndpointIPAMConfigIPV4AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPV4AddressAdded

	err, IPV6AddressAdded := retrieveEndpointIPAMConfigIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPV6AddressAdded

	err, LinkLocalIPsAdded := retrieveEndpointIPAMConfigLinkLocalIPsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LinkLocalIPsAdded

	return nil, retAdded
}

func retrieveEndpointIPAMConfigIPV4AddressFlags(depth int, m *models.EndpointIPAMConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPV4AddressFlagName := fmt.Sprintf("%v.IPv4Address", cmdPrefix)
	if cmd.Flags().Changed(IPV4AddressFlagName) {

		var IPV4AddressFlagName string
		if cmdPrefix == "" {
			IPV4AddressFlagName = "IPv4Address"
		} else {
			IPV4AddressFlagName = fmt.Sprintf("%v.IPv4Address", cmdPrefix)
		}

		IPV4AddressFlagValue, err := cmd.Flags().GetString(IPV4AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4Address = IPV4AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointIPAMConfigIPV6AddressFlags(depth int, m *models.EndpointIPAMConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IPV6AddressFlagName := fmt.Sprintf("%v.IPv6Address", cmdPrefix)
	if cmd.Flags().Changed(IPV6AddressFlagName) {

		var IPV6AddressFlagName string
		if cmdPrefix == "" {
			IPV6AddressFlagName = "IPv6Address"
		} else {
			IPV6AddressFlagName = fmt.Sprintf("%v.IPv6Address", cmdPrefix)
		}

		IPV6AddressFlagValue, err := cmd.Flags().GetString(IPV6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Address = IPV6AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEndpointIPAMConfigLinkLocalIPsFlags(depth int, m *models.EndpointIPAMConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LinkLocalIPsFlagName := fmt.Sprintf("%v.LinkLocalIPs", cmdPrefix)
	if cmd.Flags().Changed(LinkLocalIPsFlagName) {
		// warning: LinkLocalIPs array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
