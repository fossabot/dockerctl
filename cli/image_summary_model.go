// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ImageSummary

// register flags to command
func registerModelImageSummaryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerImageSummaryContainers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSummaryCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSummaryID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSummaryLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSummaryParentID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSummaryRepoDigests(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSummaryRepoTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSummarySharedSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSummarySize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImageSummaryVirtualSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerImageSummaryContainers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ContainersDescription := `Required. `

	var ContainersFlagName string
	if cmdPrefix == "" {
		ContainersFlagName = "Containers"
	} else {
		ContainersFlagName = fmt.Sprintf("%v.Containers", cmdPrefix)
	}

	var ContainersFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ContainersFlagName, ContainersFlagDefault, ContainersDescription)

	return nil
}

func registerImageSummaryCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CreatedDescription := `Required. `

	var CreatedFlagName string
	if cmdPrefix == "" {
		CreatedFlagName = "Created"
	} else {
		CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
	}

	var CreatedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(CreatedFlagName, CreatedFlagDefault, CreatedDescription)

	return nil
}

func registerImageSummaryID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := `Required. `

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "Id"
	} else {
		IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var IDFlagDefault string

	_ = cmd.PersistentFlags().String(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

func registerImageSummaryLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerImageSummaryParentID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ParentIDDescription := `Required. `

	var ParentIDFlagName string
	if cmdPrefix == "" {
		ParentIDFlagName = "ParentId"
	} else {
		ParentIDFlagName = fmt.Sprintf("%v.ParentId", cmdPrefix)
	}

	var ParentIDFlagDefault string

	_ = cmd.PersistentFlags().String(ParentIDFlagName, ParentIDFlagDefault, ParentIDDescription)

	return nil
}

func registerImageSummaryRepoDigests(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: RepoDigests []string array type is not supported by go-swagger cli yet

	return nil
}

func registerImageSummaryRepoTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: RepoTags []string array type is not supported by go-swagger cli yet

	return nil
}

func registerImageSummarySharedSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SharedSizeDescription := `Required. `

	var SharedSizeFlagName string
	if cmdPrefix == "" {
		SharedSizeFlagName = "SharedSize"
	} else {
		SharedSizeFlagName = fmt.Sprintf("%v.SharedSize", cmdPrefix)
	}

	var SharedSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SharedSizeFlagName, SharedSizeFlagDefault, SharedSizeDescription)

	return nil
}

func registerImageSummarySize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	SizeDescription := `Required. `

	var SizeFlagName string
	if cmdPrefix == "" {
		SizeFlagName = "Size"
	} else {
		SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
	}

	var SizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(SizeFlagName, SizeFlagDefault, SizeDescription)

	return nil
}

func registerImageSummaryVirtualSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	VirtualSizeDescription := `Required. `

	var VirtualSizeFlagName string
	if cmdPrefix == "" {
		VirtualSizeFlagName = "VirtualSize"
	} else {
		VirtualSizeFlagName = fmt.Sprintf("%v.VirtualSize", cmdPrefix)
	}

	var VirtualSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(VirtualSizeFlagName, VirtualSizeFlagDefault, VirtualSizeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelImageSummaryFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ContainersAdded := retrieveImageSummaryContainersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContainersAdded

	err, CreatedAdded := retrieveImageSummaryCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAdded

	err, IDAdded := retrieveImageSummaryIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, LabelsAdded := retrieveImageSummaryLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelsAdded

	err, ParentIDAdded := retrieveImageSummaryParentIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ParentIDAdded

	err, RepoDigestsAdded := retrieveImageSummaryRepoDigestsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RepoDigestsAdded

	err, RepoTagsAdded := retrieveImageSummaryRepoTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RepoTagsAdded

	err, SharedSizeAdded := retrieveImageSummarySharedSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SharedSizeAdded

	err, SizeAdded := retrieveImageSummarySizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	err, VirtualSizeAdded := retrieveImageSummaryVirtualSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VirtualSizeAdded

	return nil, retAdded
}

func retrieveImageSummaryContainersFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ContainersFlagName := fmt.Sprintf("%v.Containers", cmdPrefix)
	if cmd.Flags().Changed(ContainersFlagName) {

		var ContainersFlagName string
		if cmdPrefix == "" {
			ContainersFlagName = "Containers"
		} else {
			ContainersFlagName = fmt.Sprintf("%v.Containers", cmdPrefix)
		}

		ContainersFlagValue, err := cmd.Flags().GetInt64(ContainersFlagName)
		if err != nil {
			return err, false
		}
		m.Containers = ContainersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSummaryCreatedFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CreatedFlagName := fmt.Sprintf("%v.Created", cmdPrefix)
	if cmd.Flags().Changed(CreatedFlagName) {

		var CreatedFlagName string
		if cmdPrefix == "" {
			CreatedFlagName = "Created"
		} else {
			CreatedFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
		}

		CreatedFlagValue, err := cmd.Flags().GetInt64(CreatedFlagName)
		if err != nil {
			return err, false
		}
		m.Created = CreatedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSummaryIDFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "Id"
		} else {
			IDFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetString(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSummaryLabelsFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	LabelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(LabelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveImageSummaryParentIDFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ParentIDFlagName := fmt.Sprintf("%v.ParentId", cmdPrefix)
	if cmd.Flags().Changed(ParentIDFlagName) {

		var ParentIDFlagName string
		if cmdPrefix == "" {
			ParentIDFlagName = "ParentId"
		} else {
			ParentIDFlagName = fmt.Sprintf("%v.ParentId", cmdPrefix)
		}

		ParentIDFlagValue, err := cmd.Flags().GetString(ParentIDFlagName)
		if err != nil {
			return err, false
		}
		m.ParentID = ParentIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSummaryRepoDigestsFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RepoDigestsFlagName := fmt.Sprintf("%v.RepoDigests", cmdPrefix)
	if cmd.Flags().Changed(RepoDigestsFlagName) {
		// warning: RepoDigests array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveImageSummaryRepoTagsFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	RepoTagsFlagName := fmt.Sprintf("%v.RepoTags", cmdPrefix)
	if cmd.Flags().Changed(RepoTagsFlagName) {
		// warning: RepoTags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveImageSummarySharedSizeFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SharedSizeFlagName := fmt.Sprintf("%v.SharedSize", cmdPrefix)
	if cmd.Flags().Changed(SharedSizeFlagName) {

		var SharedSizeFlagName string
		if cmdPrefix == "" {
			SharedSizeFlagName = "SharedSize"
		} else {
			SharedSizeFlagName = fmt.Sprintf("%v.SharedSize", cmdPrefix)
		}

		SharedSizeFlagValue, err := cmd.Flags().GetInt64(SharedSizeFlagName)
		if err != nil {
			return err, false
		}
		m.SharedSize = SharedSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSummarySizeFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	SizeFlagName := fmt.Sprintf("%v.Size", cmdPrefix)
	if cmd.Flags().Changed(SizeFlagName) {

		var SizeFlagName string
		if cmdPrefix == "" {
			SizeFlagName = "Size"
		} else {
			SizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
		}

		SizeFlagValue, err := cmd.Flags().GetInt64(SizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = SizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImageSummaryVirtualSizeFlags(depth int, m *models.ImageSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	VirtualSizeFlagName := fmt.Sprintf("%v.VirtualSize", cmdPrefix)
	if cmd.Flags().Changed(VirtualSizeFlagName) {

		var VirtualSizeFlagName string
		if cmdPrefix == "" {
			VirtualSizeFlagName = "VirtualSize"
		} else {
			VirtualSizeFlagName = fmt.Sprintf("%v.VirtualSize", cmdPrefix)
		}

		VirtualSizeFlagValue, err := cmd.Flags().GetInt64(VirtualSizeFlagName)
		if err != nil {
			return err, false
		}
		m.VirtualSize = VirtualSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
