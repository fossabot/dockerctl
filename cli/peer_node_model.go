// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for PeerNode

// register flags to command
func registerModelPeerNodeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPeerNodeAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPeerNodeNodeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPeerNodeAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	AddrDescription := `IP address and ports at which this node can be reached.
`

	var AddrFlagName string
	if cmdPrefix == "" {
		AddrFlagName = "Addr"
	} else {
		AddrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
	}

	var AddrFlagDefault string

	_ = cmd.PersistentFlags().String(AddrFlagName, AddrFlagDefault, AddrDescription)

	return nil
}

func registerPeerNodeNodeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	NodeIDDescription := `Unique identifier of for this node in the swarm.`

	var NodeIDFlagName string
	if cmdPrefix == "" {
		NodeIDFlagName = "NodeID"
	} else {
		NodeIDFlagName = fmt.Sprintf("%v.NodeID", cmdPrefix)
	}

	var NodeIDFlagDefault string

	_ = cmd.PersistentFlags().String(NodeIDFlagName, NodeIDFlagDefault, NodeIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPeerNodeFlags(depth int, m *models.PeerNode, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AddrAdded := retrievePeerNodeAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AddrAdded

	err, NodeIDAdded := retrievePeerNodeNodeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NodeIDAdded

	return nil, retAdded
}

func retrievePeerNodeAddrFlags(depth int, m *models.PeerNode, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	AddrFlagName := fmt.Sprintf("%v.Addr", cmdPrefix)
	if cmd.Flags().Changed(AddrFlagName) {

		var AddrFlagName string
		if cmdPrefix == "" {
			AddrFlagName = "Addr"
		} else {
			AddrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
		}

		AddrFlagValue, err := cmd.Flags().GetString(AddrFlagName)
		if err != nil {
			return err, false
		}
		m.Addr = AddrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePeerNodeNodeIDFlags(depth int, m *models.PeerNode, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	NodeIDFlagName := fmt.Sprintf("%v.NodeID", cmdPrefix)
	if cmd.Flags().Changed(NodeIDFlagName) {

		var NodeIDFlagName string
		if cmdPrefix == "" {
			NodeIDFlagName = "NodeID"
		} else {
			NodeIDFlagName = fmt.Sprintf("%v.NodeID", cmdPrefix)
		}

		NodeIDFlagValue, err := cmd.Flags().GetString(NodeIDFlagName)
		if err != nil {
			return err, false
		}
		m.NodeID = NodeIDFlagValue

		retAdded = true
	}

	return nil, retAdded
}
