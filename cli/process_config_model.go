// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ProcessConfig

// register flags to command
func registerModelProcessConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProcessConfigArguments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessConfigEntrypoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessConfigPrivileged(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessConfigTty(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessConfigUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProcessConfigArguments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: arguments []string array type is not supported by go-swagger cli yet

	return nil
}

func registerProcessConfigEntrypoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	EntrypointDescription := ``

	var EntrypointFlagName string
	if cmdPrefix == "" {
		EntrypointFlagName = "entrypoint"
	} else {
		EntrypointFlagName = fmt.Sprintf("%v.entrypoint", cmdPrefix)
	}

	var EntrypointFlagDefault string

	_ = cmd.PersistentFlags().String(EntrypointFlagName, EntrypointFlagDefault, EntrypointDescription)

	return nil
}

func registerProcessConfigPrivileged(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	PrivilegedDescription := ``

	var PrivilegedFlagName string
	if cmdPrefix == "" {
		PrivilegedFlagName = "privileged"
	} else {
		PrivilegedFlagName = fmt.Sprintf("%v.privileged", cmdPrefix)
	}

	var PrivilegedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(PrivilegedFlagName, PrivilegedFlagDefault, PrivilegedDescription)

	return nil
}

func registerProcessConfigTty(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	TtyDescription := ``

	var TtyFlagName string
	if cmdPrefix == "" {
		TtyFlagName = "tty"
	} else {
		TtyFlagName = fmt.Sprintf("%v.tty", cmdPrefix)
	}

	var TtyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(TtyFlagName, TtyFlagDefault, TtyDescription)

	return nil
}

func registerProcessConfigUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	UserDescription := ``

	var UserFlagName string
	if cmdPrefix == "" {
		UserFlagName = "user"
	} else {
		UserFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	var UserFlagDefault string

	_ = cmd.PersistentFlags().String(UserFlagName, UserFlagDefault, UserDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProcessConfigFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ArgumentsAdded := retrieveProcessConfigArgumentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ArgumentsAdded

	err, EntrypointAdded := retrieveProcessConfigEntrypointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EntrypointAdded

	err, PrivilegedAdded := retrieveProcessConfigPrivilegedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PrivilegedAdded

	err, TtyAdded := retrieveProcessConfigTtyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TtyAdded

	err, UserAdded := retrieveProcessConfigUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UserAdded

	return nil, retAdded
}

func retrieveProcessConfigArgumentsFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ArgumentsFlagName := fmt.Sprintf("%v.arguments", cmdPrefix)
	if cmd.Flags().Changed(ArgumentsFlagName) {
		// warning: arguments array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveProcessConfigEntrypointFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	EntrypointFlagName := fmt.Sprintf("%v.entrypoint", cmdPrefix)
	if cmd.Flags().Changed(EntrypointFlagName) {

		var EntrypointFlagName string
		if cmdPrefix == "" {
			EntrypointFlagName = "entrypoint"
		} else {
			EntrypointFlagName = fmt.Sprintf("%v.entrypoint", cmdPrefix)
		}

		EntrypointFlagValue, err := cmd.Flags().GetString(EntrypointFlagName)
		if err != nil {
			return err, false
		}
		m.Entrypoint = EntrypointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessConfigPrivilegedFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	PrivilegedFlagName := fmt.Sprintf("%v.privileged", cmdPrefix)
	if cmd.Flags().Changed(PrivilegedFlagName) {

		var PrivilegedFlagName string
		if cmdPrefix == "" {
			PrivilegedFlagName = "privileged"
		} else {
			PrivilegedFlagName = fmt.Sprintf("%v.privileged", cmdPrefix)
		}

		PrivilegedFlagValue, err := cmd.Flags().GetBool(PrivilegedFlagName)
		if err != nil {
			return err, false
		}
		m.Privileged = PrivilegedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessConfigTtyFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	TtyFlagName := fmt.Sprintf("%v.tty", cmdPrefix)
	if cmd.Flags().Changed(TtyFlagName) {

		var TtyFlagName string
		if cmdPrefix == "" {
			TtyFlagName = "tty"
		} else {
			TtyFlagName = fmt.Sprintf("%v.tty", cmdPrefix)
		}

		TtyFlagValue, err := cmd.Flags().GetBool(TtyFlagName)
		if err != nil {
			return err, false
		}
		m.Tty = TtyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProcessConfigUserFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	UserFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(UserFlagName) {

		var UserFlagName string
		if cmdPrefix == "" {
			UserFlagName = "user"
		} else {
			UserFlagName = fmt.Sprintf("%v.user", cmdPrefix)
		}

		UserFlagValue, err := cmd.Flags().GetString(UserFlagName)
		if err != nil {
			return err, false
		}
		m.User = UserFlagValue

		retAdded = true
	}

	return nil, retAdded
}
